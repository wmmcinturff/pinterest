!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var s=F[U]={i:U,l:!1,exports:{}};return Q[U].call(s.exports,s,s.exports,B),s.l=!0,s.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)B.d(U,s,function(F){return Q[F]}.bind(null,s));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=11)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nvar firebase = __webpack_require__(4);\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);\n\nvar name = \"firebase\";\nvar version = \"7.21.1\";\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfirebase__default['default'].registerVersion(name, version, 'app');\nmodule.exports = firebase__default['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vaW5kZXgudHM/NzhiYiJdLCJuYW1lcyI6WyJmaXJlYmFzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkFBLDZCQUFTLGVBQVRBLENBQXlCLElBQXpCQSxFQUErQixPQUEvQkEsRUFBd0MsS0FBeENBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgZmlyZWJhc2UgZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBuYW1lLCB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcblxuZmlyZWJhc2UucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdhcHAnKTtcblxuZXhwb3J0IGRlZmF1bHQgZmlyZWJhc2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n}\nfunction __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    "throw": verb(1),\n    "return": verb(2)\n  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError("Generator is already executing.");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\nfunction __createBinding(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n  var s = typeof Symbol === "function" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === "number") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");\n}\nfunction __read(o, n) {\n  var m = typeof Symbol === "function" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i["return"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n;\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\n  var g = generator.apply(thisArg, _arguments || []),\n      i,\n      q = [];\n  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n\n  function fulfill(value) {\n    resume("next", value);\n  }\n\n  function reject(value) {\n    resume("throw", value);\n  }\n\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb("next"), verb("throw", function (e) {\n    throw e;\n  }), verb("return"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: n === "return"\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, "raw", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n;\nfunction __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result.default = mod;\n  return result;\n}\nfunction __importDefault(mod) {\n  return mod && mod.__esModule ? mod : {\n    default: mod\n  };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError("attempted to get private field on non-instance");\n  }\n\n  return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError("attempted to set private field on non-instance");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.5.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2020-05-04T22:49Z\n */\n(function (global, factory) {\n  "use strict";\n\n  if ( true && typeof module.exports === "object") {\n    // For CommonJS and CommonJS-like environments where a proper `window`\n    // is present, execute the factory and get jQuery.\n    // For environments that do not have a `window` with a `document`\n    // (such as Node.js), expose a factory as module.exports.\n    // This accentuates the need for the creation of a real `window`.\n    // e.g. var jQuery = require("jquery")(window);\n    // See ticket #14549 for more info.\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error("jQuery requires a window with a document");\n      }\n\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  } // Pass this if window is not defined yet\n\n})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {\n  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n  // enough that all such attempts are guarded in a try block.\n  "use strict";\n\n  var arr = [];\n  var getProto = Object.getPrototypeOf;\n  var slice = arr.slice;\n  var flat = arr.flat ? function (array) {\n    return arr.flat.call(array);\n  } : function (array) {\n    return arr.concat.apply([], array);\n  };\n  var push = arr.push;\n  var indexOf = arr.indexOf;\n  var class2type = {};\n  var toString = class2type.toString;\n  var hasOwn = class2type.hasOwnProperty;\n  var fnToString = hasOwn.toString;\n  var ObjectFunctionString = fnToString.call(Object);\n  var support = {};\n\n  var isFunction = function isFunction(obj) {\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns "function" for HTML <object> elements\n    // (i.e., `typeof document.createElement( "object" ) === "function"`).\n    // We don\'t want to classify *any* DOM node as a function.\n    return typeof obj === "function" && typeof obj.nodeType !== "number";\n  };\n\n  var isWindow = function isWindow(obj) {\n    return obj != null && obj === obj.window;\n  };\n\n  var document = window.document;\n  var preservedScriptAttributes = {\n    type: true,\n    src: true,\n    nonce: true,\n    noModule: true\n  };\n\n  function DOMEval(code, node, doc) {\n    doc = doc || document;\n    var i,\n        val,\n        script = doc.createElement("script");\n    script.text = code;\n\n    if (node) {\n      for (i in preservedScriptAttributes) {\n        // Support: Firefox 64+, Edge 18+\n        // Some browsers don\'t support the "nonce" property on scripts.\n        // On the other hand, just using `getAttribute` is not enough as\n        // the `nonce` attribute is reset to an empty string whenever it\n        // becomes browsing-context connected.\n        // See https://github.com/whatwg/html/issues/2369\n        // See https://html.spec.whatwg.org/#nonce-attributes\n        // The `node.getAttribute` check was added for the sake of\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\n        // via an object.\n        val = node[i] || node.getAttribute && node.getAttribute(i);\n\n        if (val) {\n          script.setAttribute(i, val);\n        }\n      }\n    }\n\n    doc.head.appendChild(script).parentNode.removeChild(script);\n  }\n\n  function toType(obj) {\n    if (obj == null) {\n      return obj + "";\n    } // Support: Android <=2.3 only (functionish RegExp)\n\n\n    return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;\n  }\n  /* global Symbol */\n  // Defining this global in .eslintrc.json would create a danger of using the global\n  // unguarded in another place, it seems safer to define global only for this module\n\n\n  var version = "3.5.1",\n      // Define a local copy of jQuery\n  jQuery = function (selector, context) {\n    // The jQuery object is actually just the init constructor \'enhanced\'\n    // Need init if jQuery is called (just allow error to be thrown if not included)\n    return new jQuery.fn.init(selector, context);\n  };\n\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n    constructor: jQuery,\n    // The default length of a jQuery object is 0\n    length: 0,\n    toArray: function () {\n      return slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function (num) {\n      // Return all the elements in a clean array\n      if (num == null) {\n        return slice.call(this);\n      } // Return just the one element from the set\n\n\n      return num < 0 ? this[num + this.length] : this[num];\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function (elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\n\n      ret.prevObject = this; // Return the newly-formed element set\n\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    each: function (callback) {\n      return jQuery.each(this, callback);\n    },\n    map: function (callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    slice: function () {\n      return this.pushStack(slice.apply(this, arguments));\n    },\n    first: function () {\n      return this.eq(0);\n    },\n    last: function () {\n      return this.eq(-1);\n    },\n    even: function () {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return (i + 1) % 2;\n      }));\n    },\n    odd: function () {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return i % 2;\n      }));\n    },\n    eq: function (i) {\n      var len = this.length,\n          j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    end: function () {\n      return this.prevObject || this.constructor();\n    },\n    // For internal use only.\n    // Behaves like an Array\'s method, not like a jQuery method.\n    push: push,\n    sort: arr.sort,\n    splice: arr.splice\n  };\n\n  jQuery.extend = jQuery.fn.extend = function () {\n    var options,\n        name,\n        src,\n        copy,\n        copyIsArray,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false; // Handle a deep copy situation\n\n    if (typeof target === "boolean") {\n      deep = target; // Skip the boolean and the target\n\n      target = arguments[i] || {};\n      i++;\n    } // Handle case when target is a string or something (possible in deep copy)\n\n\n    if (typeof target !== "object" && !isFunction(target)) {\n      target = {};\n    } // Extend jQuery itself if only one argument is passed\n\n\n    if (i === length) {\n      target = this;\n      i--;\n    }\n\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          copy = options[name]; // Prevent Object.prototype pollution\n          // Prevent never-ending loop\n\n          if (name === "__proto__" || target === copy) {\n            continue;\n          } // Recurse if we\'re merging plain objects or arrays\n\n\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n            src = target[name]; // Ensure proper type for the source value\n\n            if (copyIsArray && !Array.isArray(src)) {\n              clone = [];\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\n              clone = {};\n            } else {\n              clone = src;\n            }\n\n            copyIsArray = false; // Never move original objects, clone them\n\n            target[name] = jQuery.extend(deep, clone, copy); // Don\'t bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    } // Return the modified object\n\n\n    return target;\n  };\n\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: "jQuery" + (version + Math.random()).replace(/\\D/g, ""),\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n    error: function (msg) {\n      throw new Error(msg);\n    },\n    noop: function () {},\n    isPlainObject: function (obj) {\n      var proto, Ctor; // Detect obvious negatives\n      // Use toString instead of jQuery.type to catch host objects\n\n      if (!obj || toString.call(obj) !== "[object Object]") {\n        return false;\n      }\n\n      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain\n\n      if (!proto) {\n        return true;\n      } // Objects with prototype are plain iff they were constructed by a global Object function\n\n\n      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;\n      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;\n    },\n    isEmptyObject: function (obj) {\n      var name;\n\n      for (name in obj) {\n        return false;\n      }\n\n      return true;\n    },\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function (code, options, doc) {\n      DOMEval(code, {\n        nonce: options && options.nonce\n      }, doc);\n    },\n    each: function (obj, callback) {\n      var length,\n          i = 0;\n\n      if (isArrayLike(obj)) {\n        length = obj.length;\n\n        for (; i < length; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      }\n\n      return obj;\n    },\n    // results is for internal usage only\n    makeArray: function (arr, results) {\n      var ret = results || [];\n\n      if (arr != null) {\n        if (isArrayLike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);\n        } else {\n          push.call(ret, arr);\n        }\n      }\n\n      return ret;\n    },\n    inArray: function (elem, arr, i) {\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\n    },\n    // Support: Android <=4.0 only, PhantomJS 1 only\n    // push.apply(_, arraylike) throws on ancient WebKit\n    merge: function (first, second) {\n      var len = +second.length,\n          j = 0,\n          i = first.length;\n\n      for (; j < len; j++) {\n        first[i++] = second[j];\n      }\n\n      first.length = i;\n      return first;\n    },\n    grep: function (elems, callback, invert) {\n      var callbackInverse,\n          matches = [],\n          i = 0,\n          length = elems.length,\n          callbackExpect = !invert; // Go through the array, only saving the items\n      // that pass the validator function\n\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n\n      return matches;\n    },\n    // arg is for internal usage only\n    map: function (elems, callback, arg) {\n      var length,\n          value,\n          i = 0,\n          ret = []; // Go through the array, translating each of the items to their new values\n\n      if (isArrayLike(elems)) {\n        length = elems.length;\n\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        } // Go through every key on the object,\n\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      } // Flatten any nested arrays\n\n\n      return flat(ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n  });\n\n  if (typeof Symbol === "function") {\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n  } // Populate the class2type map\n\n\n  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {\n    class2type["[object " + name + "]"] = name.toLowerCase();\n  });\n\n  function isArrayLike(obj) {\n    // Support: real iOS 8.2 only (not reproducible in simulator)\n    // `in` check used to prevent JIT error (gh-2145)\n    // hasOwn isn\'t used here due to false negatives\n    // regarding Nodelist length in IE\n    var length = !!obj && "length" in obj && obj.length,\n        type = toType(obj);\n\n    if (isFunction(obj) || isWindow(obj)) {\n      return false;\n    }\n\n    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;\n  }\n\n  var Sizzle =\n  /*!\n   * Sizzle CSS Selector Engine v2.3.5\n   * https://sizzlejs.com/\n   *\n   * Copyright JS Foundation and other contributors\n   * Released under the MIT license\n   * https://js.foundation/\n   *\n   * Date: 2020-03-14\n   */\n  function (window) {\n    var i,\n        support,\n        Expr,\n        getText,\n        isXML,\n        tokenize,\n        compile,\n        select,\n        outermostContext,\n        sortInput,\n        hasDuplicate,\n        // Local document vars\n    setDocument,\n        document,\n        docElem,\n        documentIsHTML,\n        rbuggyQSA,\n        rbuggyMatches,\n        matches,\n        contains,\n        // Instance-specific data\n    expando = "sizzle" + 1 * new Date(),\n        preferredDoc = window.document,\n        dirruns = 0,\n        done = 0,\n        classCache = createCache(),\n        tokenCache = createCache(),\n        compilerCache = createCache(),\n        nonnativeSelectorCache = createCache(),\n        sortOrder = function (a, b) {\n      if (a === b) {\n        hasDuplicate = true;\n      }\n\n      return 0;\n    },\n        // Instance methods\n    hasOwn = {}.hasOwnProperty,\n        arr = [],\n        pop = arr.pop,\n        pushNative = arr.push,\n        push = arr.push,\n        slice = arr.slice,\n        // Use a stripped-down indexOf as it\'s faster than native\n    // https://jsperf.com/thor-indexof-vs-for/5\n    indexOf = function (list, elem) {\n      var i = 0,\n          len = list.length;\n\n      for (; i < len; i++) {\n        if (list[i] === elem) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",\n        // Regular expressions\n    // http://www.w3.org/TR/css3-selectors/#whitespace\n    whitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]",\n        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    identifier = "(?:\\\\\\\\[\\\\da-fA-F]{1,6}" + whitespace + "?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+",\n        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n    attributes = "\\\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)\n    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]\n    // or strings [capture 3 or capture 4]"\n    "*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|(" + identifier + "))|)" + whitespace + "*\\\\]",\n        pseudos = ":(" + identifier + ")(?:\\\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n    // 1. quoted (capture 3; capture 4 or capture 5)\n    "(\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|" + // 2. simple (capture 6)\n    "((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)\n    ".*" + ")\\\\)|)",\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n    rwhitespace = new RegExp(whitespace + "+", "g"),\n        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g"),\n        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),\n        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),\n        rdescend = new RegExp(whitespace + "|>"),\n        rpseudo = new RegExp(pseudos),\n        ridentifier = new RegExp("^" + identifier + "$"),\n        matchExpr = {\n      "ID": new RegExp("^#(" + identifier + ")"),\n      "CLASS": new RegExp("^\\\\.(" + identifier + ")"),\n      "TAG": new RegExp("^(" + identifier + "|[*])"),\n      "ATTR": new RegExp("^" + attributes),\n      "PSEUDO": new RegExp("^" + pseudos),\n      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace + "*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i"),\n      "bool": new RegExp("^(?:" + booleans + ")$", "i"),\n      // For use in libraries implementing .is()\n      // We use this for POS matching in `select`\n      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" + whitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i")\n    },\n        rhtml = /HTML$/i,\n        rinputs = /^(?:input|select|textarea|button)$/i,\n        rheader = /^h\\d$/i,\n        rnative = /^[^{]+\\{\\s*\\[native \\w/,\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\n    rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n        rsibling = /[+~]/,\n        // CSS escapes\n    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n    runescape = new RegExp("\\\\\\\\[\\\\da-fA-F]{1,6}" + whitespace + "?|\\\\\\\\([^\\\\r\\\\n\\\\f])", "g"),\n        funescape = function (escape, nonHex) {\n      var high = "0x" + escape.slice(1) - 0x10000;\n      return nonHex ? // Strip the backslash prefix from a non-hex escape sequence\n      nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point\n      // Support: IE <=11+\n      // For values outside the Basic Multilingual Plane (BMP), manually construct a\n      // surrogate pair\n      high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n    },\n        // CSS string/identifier serialization\n    // https://drafts.csswg.org/cssom/#common-serializing-idioms\n    rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n        fcssescape = function (ch, asCodePoint) {\n      if (asCodePoint) {\n        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n        if (ch === "\\0") {\n          return "\\uFFFD";\n        } // Control characters and (dependent upon position) numbers get escaped as code points\n\n\n        return ch.slice(0, -1) + "\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";\n      } // Other potentially-special ASCII characters get backslash-escaped\n\n\n      return "\\\\" + ch;\n    },\n        // Used for iframes\n    // See setDocument()\n    // Removing the function wrapper causes a "Permission Denied"\n    // error in IE\n    unloadHandler = function () {\n      setDocument();\n    },\n        inDisabledFieldset = addCombinator(function (elem) {\n      return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";\n    }, {\n      dir: "parentNode",\n      next: "legend"\n    }); // Optimize for push.apply( _, NodeList )\n\n\n    try {\n      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\n      // Detect silently failing push.apply\n      // eslint-disable-next-line no-unused-expressions\n\n      arr[preferredDoc.childNodes.length].nodeType;\n    } catch (e) {\n      push = {\n        apply: arr.length ? // Leverage slice if possible\n        function (target, els) {\n          pushNative.apply(target, slice.call(els));\n        } : // Support: IE<9\n        // Otherwise append directly\n        function (target, els) {\n          var j = target.length,\n              i = 0; // Can\'t trust NodeList.length\n\n          while (target[j++] = els[i++]) {}\n\n          target.length = j - 1;\n        }\n      };\n    }\n\n    function Sizzle(selector, context, results, seed) {\n      var m,\n          i,\n          elem,\n          nid,\n          match,\n          groups,\n          newSelector,\n          newContext = context && context.ownerDocument,\n          // nodeType defaults to 9, since context defaults to document\n      nodeType = context ? context.nodeType : 9;\n      results = results || []; // Return early from calls with invalid selector or context\n\n      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n        return results;\n      } // Try to shortcut find operations (as opposed to filters) in HTML documents\n\n\n      if (!seed) {\n        setDocument(context);\n        context = context || document;\n\n        if (documentIsHTML) {\n          // If the selector is sufficiently simple, try using a "get*By*" DOM method\n          // (excepting DocumentFragment context, where the methods don\'t exist)\n          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n            // ID selector\n            if (m = match[1]) {\n              // Document context\n              if (nodeType === 9) {\n                if (elem = context.getElementById(m)) {\n                  // Support: IE, Opera, Webkit\n                  // TODO: identify versions\n                  // getElementById can match elements by name instead of ID\n                  if (elem.id === m) {\n                    results.push(elem);\n                    return results;\n                  }\n                } else {\n                  return results;\n                } // Element context\n\n              } else {\n                // Support: IE, Opera, Webkit\n                // TODO: identify versions\n                // getElementById can match elements by name instead of ID\n                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                  results.push(elem);\n                  return results;\n                }\n              } // Type selector\n\n            } else if (match[2]) {\n              push.apply(results, context.getElementsByTagName(selector));\n              return results; // Class selector\n            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n              push.apply(results, context.getElementsByClassName(m));\n              return results;\n            }\n          } // Take advantage of querySelectorAll\n\n\n          if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only\n          // Exclude object elements\n          nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {\n            newSelector = selector;\n            newContext = context; // qSA considers elements outside a scoping root when evaluating child or\n            // descendant combinators, which is not what we want.\n            // In such cases, we work around the behavior by prefixing every selector in the\n            // list with an ID selector referencing the scope context.\n            // The technique has to be used as well when a leading combinator is used\n            // as such selectors are not recognized by querySelectorAll.\n            // Thanks to Andrew Dupont for this technique.\n\n            if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {\n              // Expand context for sibling selectors\n              newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser\n              // supports it & if we\'re not changing the context.\n\n              if (newContext !== context || !support.scope) {\n                // Capture the context ID, setting it first if necessary\n                if (nid = context.getAttribute("id")) {\n                  nid = nid.replace(rcssescape, fcssescape);\n                } else {\n                  context.setAttribute("id", nid = expando);\n                }\n              } // Prefix every selector in the list\n\n\n              groups = tokenize(selector);\n              i = groups.length;\n\n              while (i--) {\n                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);\n              }\n\n              newSelector = groups.join(",");\n            }\n\n            try {\n              push.apply(results, newContext.querySelectorAll(newSelector));\n              return results;\n            } catch (qsaError) {\n              nonnativeSelectorCache(selector, true);\n            } finally {\n              if (nid === expando) {\n                context.removeAttribute("id");\n              }\n            }\n          }\n        }\n      } // All others\n\n\n      return select(selector.replace(rtrim, "$1"), context, results, seed);\n    }\n    /**\n     * Create key-value caches of limited size\n     * @returns {function(string, object)} Returns the Object data after storing it on itself with\n     *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n     *\tdeleting the oldest entry\n     */\n\n\n    function createCache() {\n      var keys = [];\n\n      function cache(key, value) {\n        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)\n        if (keys.push(key + " ") > Expr.cacheLength) {\n          // Only keep the most recent entries\n          delete cache[keys.shift()];\n        }\n\n        return cache[key + " "] = value;\n      }\n\n      return cache;\n    }\n    /**\n     * Mark a function for special use by Sizzle\n     * @param {Function} fn The function to mark\n     */\n\n\n    function markFunction(fn) {\n      fn[expando] = true;\n      return fn;\n    }\n    /**\n     * Support testing using an element\n     * @param {Function} fn Passed the created element and returns a boolean result\n     */\n\n\n    function assert(fn) {\n      var el = document.createElement("fieldset");\n\n      try {\n        return !!fn(el);\n      } catch (e) {\n        return false;\n      } finally {\n        // Remove from its parent by default\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        } // release memory in IE\n\n\n        el = null;\n      }\n    }\n    /**\n     * Adds the same handler for all of the specified attrs\n     * @param {String} attrs Pipe-separated list of attributes\n     * @param {Function} handler The method that will be applied\n     */\n\n\n    function addHandle(attrs, handler) {\n      var arr = attrs.split("|"),\n          i = arr.length;\n\n      while (i--) {\n        Expr.attrHandle[arr[i]] = handler;\n      }\n    }\n    /**\n     * Checks document order of two siblings\n     * @param {Element} a\n     * @param {Element} b\n     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n     */\n\n\n    function siblingCheck(a, b) {\n      var cur = b && a,\n          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes\n\n      if (diff) {\n        return diff;\n      } // Check if b follows a\n\n\n      if (cur) {\n        while (cur = cur.nextSibling) {\n          if (cur === b) {\n            return -1;\n          }\n        }\n      }\n\n      return a ? 1 : -1;\n    }\n    /**\n     * Returns a function to use in pseudos for input types\n     * @param {String} type\n     */\n\n\n    function createInputPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return name === "input" && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for buttons\n     * @param {String} type\n     */\n\n\n    function createButtonPseudo(type) {\n      return function (elem) {\n        var name = elem.nodeName.toLowerCase();\n        return (name === "input" || name === "button") && elem.type === type;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for :enabled/:disabled\n     * @param {Boolean} disabled true for :disabled; false for :enabled\n     */\n\n\n    function createDisabledPseudo(disabled) {\n      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n      return function (elem) {\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ("form" in elem) {\n          // Check for inherited disabledness on relevant non-disabled elements:\n          // * listed form-associated elements in a disabled fieldset\n          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n          // * option elements in a disabled optgroup\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n          // All such elements have a "form" property.\n          if (elem.parentNode && elem.disabled === false) {\n            // Option elements defer to a parent optgroup if present\n            if ("label" in elem) {\n              if ("label" in elem.parentNode) {\n                return elem.parentNode.disabled === disabled;\n              } else {\n                return elem.disabled === disabled;\n              }\n            } // Support: IE 6 - 11\n            // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\n\n            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually\n\n            /* jshint -W018 */\n            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\n          }\n\n          return elem.disabled === disabled; // Try to winnow out elements that can\'t be disabled before trusting the disabled property.\n          // Some victims get caught in our net (label, legend, menu, track), but it shouldn\'t\n          // even exist on them, let alone have a boolean value.\n        } else if ("label" in elem) {\n          return elem.disabled === disabled;\n        } // Remaining elements are neither :enabled nor :disabled\n\n\n        return false;\n      };\n    }\n    /**\n     * Returns a function to use in pseudos for positionals\n     * @param {Function} fn\n     */\n\n\n    function createPositionalPseudo(fn) {\n      return markFunction(function (argument) {\n        argument = +argument;\n        return markFunction(function (seed, matches) {\n          var j,\n              matchIndexes = fn([], seed.length, argument),\n              i = matchIndexes.length; // Match elements found at the specified indexes\n\n          while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n              seed[j] = !(matches[j] = seed[j]);\n            }\n          }\n        });\n      });\n    }\n    /**\n     * Checks a node for validity as a Sizzle context\n     * @param {Element|Object=} context\n     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n     */\n\n\n    function testContext(context) {\n      return context && typeof context.getElementsByTagName !== "undefined" && context;\n    } // Expose support vars for convenience\n\n\n    support = Sizzle.support = {};\n    /**\n     * Detects XML nodes\n     * @param {Element|Object} elem An element or a document\n     * @returns {Boolean} True iff elem is a non-HTML XML node\n     */\n\n    isXML = Sizzle.isXML = function (elem) {\n      var namespace = elem.namespaceURI,\n          docElem = (elem.ownerDocument || elem).documentElement; // Support: IE <=8\n      // Assume HTML when documentElement doesn\'t yet exist, such as inside loading iframes\n      // https://bugs.jquery.com/ticket/4833\n\n      return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");\n    };\n    /**\n     * Sets document-related variables once based on the current document\n     * @param {Element|Object} [doc] An element or document object to use to set the document\n     * @returns {Object} Returns the current document\n     */\n\n\n    setDocument = Sizzle.setDocument = function (node) {\n      var hasCompare,\n          subWindow,\n          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {\n        return document;\n      } // Update global variables\n\n\n      document = doc;\n      docElem = document.documentElement;\n      documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+\n      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n\n      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n        // Support: IE 11, Edge\n        if (subWindow.addEventListener) {\n          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only\n        } else if (subWindow.attachEvent) {\n          subWindow.attachEvent("onunload", unloadHandler);\n        }\n      } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n      // Safari 4 - 5 only, Opera <=11.6 - 12.x only\n      // IE/Edge & older browsers don\'t support the :scope pseudo-class.\n      // Support: Safari 6.0 only\n      // Safari 6.0 supports :scope but it\'s an alias of :root there.\n\n\n      support.scope = assert(function (el) {\n        docElem.appendChild(el).appendChild(document.createElement("div"));\n        return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;\n      });\n      /* Attributes\n      ---------------------------------------------------------------------- */\n      // Support: IE<8\n      // Verify that getAttribute really returns attributes and not properties\n      // (excepting IE8 booleans)\n\n      support.attributes = assert(function (el) {\n        el.className = "i";\n        return !el.getAttribute("className");\n      });\n      /* getElement(s)By*\n      ---------------------------------------------------------------------- */\n      // Check if getElementsByTagName("*") returns only elements\n\n      support.getElementsByTagName = assert(function (el) {\n        el.appendChild(document.createComment(""));\n        return !el.getElementsByTagName("*").length;\n      }); // Support: IE<9\n\n      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10\n      // Check if getElementById returns elements by name\n      // The broken getElementById methods don\'t pick up programmatically-set names,\n      // so use a roundabout getElementsByName test\n\n      support.getById = assert(function (el) {\n        docElem.appendChild(el).id = expando;\n        return !document.getElementsByName || !document.getElementsByName(expando).length;\n      }); // ID filter and find\n\n      if (support.getById) {\n        Expr.filter["ID"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            return elem.getAttribute("id") === attrId;\n          };\n        };\n\n        Expr.find["ID"] = function (id, context) {\n          if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n            var elem = context.getElementById(id);\n            return elem ? [elem] : [];\n          }\n        };\n      } else {\n        Expr.filter["ID"] = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");\n            return node && node.value === attrId;\n          };\n        }; // Support: IE 6 - 7 only\n        // getElementById is not reliable as a find shortcut\n\n\n        Expr.find["ID"] = function (id, context) {\n          if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n            var node,\n                i,\n                elems,\n                elem = context.getElementById(id);\n\n            if (elem) {\n              // Verify the id attribute\n              node = elem.getAttributeNode("id");\n\n              if (node && node.value === id) {\n                return [elem];\n              } // Fall back on getElementsByName\n\n\n              elems = context.getElementsByName(id);\n              i = 0;\n\n              while (elem = elems[i++]) {\n                node = elem.getAttributeNode("id");\n\n                if (node && node.value === id) {\n                  return [elem];\n                }\n              }\n            }\n\n            return [];\n          }\n        };\n      } // Tag\n\n\n      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {\n        if (typeof context.getElementsByTagName !== "undefined") {\n          return context.getElementsByTagName(tag); // DocumentFragment nodes don\'t have gEBTN\n        } else if (support.qsa) {\n          return context.querySelectorAll(tag);\n        }\n      } : function (tag, context) {\n        var elem,\n            tmp = [],\n            i = 0,\n            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n        results = context.getElementsByTagName(tag); // Filter out possible comments\n\n        if (tag === "*") {\n          while (elem = results[i++]) {\n            if (elem.nodeType === 1) {\n              tmp.push(elem);\n            }\n          }\n\n          return tmp;\n        }\n\n        return results;\n      }; // Class\n\n      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {\n        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {\n          return context.getElementsByClassName(className);\n        }\n      };\n      /* QSA/matchesSelector\n      ---------------------------------------------------------------------- */\n      // QSA and matchesSelector support\n      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\n      // We allow this because of a bug in IE8/9 that throws an error\n      // whenever `document.activeElement` is accessed on an iframe\n      // So, we allow :focus to pass through QSA all the time to avoid the IE error\n      // See https://bugs.jquery.com/ticket/13378\n\n      rbuggyQSA = [];\n\n      if (support.qsa = rnative.test(document.querySelectorAll)) {\n        // Build QSA regex\n        // Regex strategy adopted from Diego Perini\n        assert(function (el) {\n          var input; // Select is set to empty string on purpose\n          // This is to test IE\'s treatment of not explicitly\n          // setting a boolean content attribute,\n          // since its presence should be enough\n          // https://bugs.jquery.com/ticket/12359\n\n          docElem.appendChild(el).innerHTML = "<a id=\'" + expando + "\'></a>" + "<select id=\'" + expando + "-\\r\\\\\' msallowcapture=\'\'>" + "<option selected=\'\'></option></select>"; // Support: IE8, Opera 11-12.16\n          // Nothing should be selected when empty strings follow ^= or $= or *=\n          // The test attribute must be unknown in Opera but "safe" for WinRT\n          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\n          if (el.querySelectorAll("[msallowcapture^=\'\']").length) {\n            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:\'\'|\\"\\")");\n          } // Support: IE8\n          // Boolean attributes and "value" are not treated correctly\n\n\n          if (!el.querySelectorAll("[selected]").length) {\n            rbuggyQSA.push("\\\\[" + whitespace + "*(?:value|" + booleans + ")");\n          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\n\n          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {\n            rbuggyQSA.push("~=");\n          } // Support: IE 11+, Edge 15 - 18+\n          // IE 11/Edge don\'t find elements on a `[name=\'\']` query in some cases.\n          // Adding a temporary attribute to the document before the selection works\n          // around the issue.\n          // Interestingly, IE 10 & older don\'t seem to have the issue.\n\n\n          input = document.createElement("input");\n          input.setAttribute("name", "");\n          el.appendChild(input);\n\n          if (!el.querySelectorAll("[name=\'\']").length) {\n            rbuggyQSA.push("\\\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:\'\'|\\"\\")");\n          } // Webkit/Opera - :checked should return selected option elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          // IE8 throws error here and will not see later tests\n\n\n          if (!el.querySelectorAll(":checked").length) {\n            rbuggyQSA.push(":checked");\n          } // Support: Safari 8+, iOS 8+\n          // https://bugs.webkit.org/show_bug.cgi?id=136851\n          // In-page `selector#id sibling-combinator selector` fails\n\n\n          if (!el.querySelectorAll("a#" + expando + "+*").length) {\n            rbuggyQSA.push(".#.+[+~]");\n          } // Support: Firefox <=3.6 - 5 only\n          // Old Firefox doesn\'t throw on a badly-escaped identifier.\n\n\n          el.querySelectorAll("\\\\\\f");\n          rbuggyQSA.push("[\\\\r\\\\n\\\\f]");\n        });\n        assert(function (el) {\n          el.innerHTML = "<a href=\'\' disabled=\'disabled\'></a>" + "<select disabled=\'disabled\'><option/></select>"; // Support: Windows 8 Native Apps\n          // The type and name attributes are restricted during .innerHTML assignment\n\n          var input = document.createElement("input");\n          input.setAttribute("type", "hidden");\n          el.appendChild(input).setAttribute("name", "D"); // Support: IE8\n          // Enforce case-sensitivity of name attribute\n\n          if (el.querySelectorAll("[name=d]").length) {\n            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");\n          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n          // IE8 throws error here and will not see later tests\n\n\n          if (el.querySelectorAll(":enabled").length !== 2) {\n            rbuggyQSA.push(":enabled", ":disabled");\n          } // Support: IE9-11+\n          // IE\'s :disabled selector does not pick up the children of disabled fieldsets\n\n\n          docElem.appendChild(el).disabled = true;\n\n          if (el.querySelectorAll(":disabled").length !== 2) {\n            rbuggyQSA.push(":enabled", ":disabled");\n          } // Support: Opera 10 - 11 only\n          // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n          el.querySelectorAll("*,:x");\n          rbuggyQSA.push(",.*:");\n        });\n      }\n\n      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n        assert(function (el) {\n          // Check to see if it\'s possible to do matchesSelector\n          // on a disconnected node (IE 9)\n          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception\n          // Gecko does not error, returns false instead\n\n          matches.call(el, "[s!=\'\']:x");\n          rbuggyMatches.push("!=", pseudos);\n        });\n      }\n\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));\n      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));\n      /* Contains\n      ---------------------------------------------------------------------- */\n\n      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\n      // Purposefully self-exclusive\n      // As in, an element does not contain itself\n\n      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n        var adown = a.nodeType === 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n      } : function (a, b) {\n        if (b) {\n          while (b = b.parentNode) {\n            if (b === a) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      };\n      /* Sorting\n      ---------------------------------------------------------------------- */\n      // Document order sorting\n\n      sortOrder = hasCompare ? function (a, b) {\n        // Flag for duplicate removal\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        } // Sort on method existence if only one input has compareDocumentPosition\n\n\n        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n        if (compare) {\n          return compare;\n        } // Calculate position if both inputs belong to the same document\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n\n\n        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\n        1; // Disconnected nodes\n\n        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n          // Choose the first element that is related to our preferred document\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {\n            return -1;\n          } // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n\n\n          if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {\n            return 1;\n          } // Maintain original order\n\n\n          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n        }\n\n        return compare & 4 ? -1 : 1;\n      } : function (a, b) {\n        // Exit early if the nodes are identical\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n\n        var cur,\n            i = 0,\n            aup = a.parentNode,\n            bup = b.parentNode,\n            ap = [a],\n            bp = [b]; // Parentless nodes are either documents or disconnected\n\n        if (!aup || !bup) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n\n          /* eslint-disable eqeqeq */\n          return a == document ? -1 : b == document ? 1 :\n          /* eslint-enable eqeqeq */\n          aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\n        } else if (aup === bup) {\n          return siblingCheck(a, b);\n        } // Otherwise we need full lists of their ancestors for comparison\n\n\n        cur = a;\n\n        while (cur = cur.parentNode) {\n          ap.unshift(cur);\n        }\n\n        cur = b;\n\n        while (cur = cur.parentNode) {\n          bp.unshift(cur);\n        } // Walk down the tree looking for a discrepancy\n\n\n        while (ap[i] === bp[i]) {\n          i++;\n        }\n\n        return i ? // Do a sibling check if the nodes have a common ancestor\n        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n        // two documents; shallow comparisons work.\n\n        /* eslint-disable eqeqeq */\n        ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :\n        /* eslint-enable eqeqeq */\n        0;\n      };\n      return document;\n    };\n\n    Sizzle.matches = function (expr, elements) {\n      return Sizzle(expr, null, null, elements);\n    };\n\n    Sizzle.matchesSelector = function (elem, expr) {\n      setDocument(elem);\n\n      if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n        try {\n          var ret = matches.call(elem, expr); // IE 9\'s matchesSelector returns false on disconnected nodes\n\n          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n          // fragment in IE 9\n          elem.document && elem.document.nodeType !== 11) {\n            return ret;\n          }\n        } catch (e) {\n          nonnativeSelectorCache(expr, true);\n        }\n      }\n\n      return Sizzle(expr, document, null, [elem]).length > 0;\n    };\n\n    Sizzle.contains = function (context, elem) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((context.ownerDocument || context) != document) {\n        setDocument(context);\n      }\n\n      return contains(context, elem);\n    };\n\n    Sizzle.attr = function (elem, name) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((elem.ownerDocument || elem) != document) {\n        setDocument(elem);\n      }\n\n      var fn = Expr.attrHandle[name.toLowerCase()],\n          // Don\'t get fooled by Object.prototype properties (jQuery #13807)\n      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n    };\n\n    Sizzle.escape = function (sel) {\n      return (sel + "").replace(rcssescape, fcssescape);\n    };\n\n    Sizzle.error = function (msg) {\n      throw new Error("Syntax error, unrecognized expression: " + msg);\n    };\n    /**\n     * Document sorting and removing duplicates\n     * @param {ArrayLike} results\n     */\n\n\n    Sizzle.uniqueSort = function (results) {\n      var elem,\n          duplicates = [],\n          j = 0,\n          i = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n      hasDuplicate = !support.detectDuplicates;\n      sortInput = !support.sortStable && results.slice(0);\n      results.sort(sortOrder);\n\n      if (hasDuplicate) {\n        while (elem = results[i++]) {\n          if (elem === results[i]) {\n            j = duplicates.push(i);\n          }\n        }\n\n        while (j--) {\n          results.splice(duplicates[j], 1);\n        }\n      } // Clear input after sorting to release objects\n      // See https://github.com/jquery/sizzle/pull/225\n\n\n      sortInput = null;\n      return results;\n    };\n    /**\n     * Utility function for retrieving the text value of an array of DOM nodes\n     * @param {Array|Element} elem\n     */\n\n\n    getText = Sizzle.getText = function (elem) {\n      var node,\n          ret = "",\n          i = 0,\n          nodeType = elem.nodeType;\n\n      if (!nodeType) {\n        // If no nodeType, this is expected to be an array\n        while (node = elem[i++]) {\n          // Do not traverse comment nodes\n          ret += getText(node);\n        }\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n        // Use textContent for elements\n        // innerText usage removed for consistency of new lines (jQuery #11153)\n        if (typeof elem.textContent === "string") {\n          return elem.textContent;\n        } else {\n          // Traverse its children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            ret += getText(elem);\n          }\n        }\n      } else if (nodeType === 3 || nodeType === 4) {\n        return elem.nodeValue;\n      } // Do not include comment or processing instruction nodes\n\n\n      return ret;\n    };\n\n    Expr = Sizzle.selectors = {\n      // Can be adjusted by the user\n      cacheLength: 50,\n      createPseudo: markFunction,\n      match: matchExpr,\n      attrHandle: {},\n      find: {},\n      relative: {\n        ">": {\n          dir: "parentNode",\n          first: true\n        },\n        " ": {\n          dir: "parentNode"\n        },\n        "+": {\n          dir: "previousSibling",\n          first: true\n        },\n        "~": {\n          dir: "previousSibling"\n        }\n      },\n      preFilter: {\n        "ATTR": function (match) {\n          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);\n\n          if (match[2] === "~=") {\n            match[3] = " " + match[3] + " ";\n          }\n\n          return match.slice(0, 4);\n        },\n        "CHILD": function (match) {\n          /* matches from matchExpr["CHILD"]\n          \t1 type (only|nth|...)\n          \t2 what (child|of-type)\n          \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n          \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n          \t5 sign of xn-component\n          \t6 x of xn-component\n          \t7 sign of y-component\n          \t8 y of y-component\n          */\n          match[1] = match[1].toLowerCase();\n\n          if (match[1].slice(0, 3) === "nth") {\n            // nth-* requires argument\n            if (!match[3]) {\n              Sizzle.error(match[0]);\n            } // numeric x and y parameters for Expr.filter.CHILD\n            // remember that false/true cast respectively to 0/1\n\n\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));\n            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments\n          } else if (match[3]) {\n            Sizzle.error(match[0]);\n          }\n\n          return match;\n        },\n        "PSEUDO": function (match) {\n          var excess,\n              unquoted = !match[6] && match[2];\n\n          if (matchExpr["CHILD"].test(match[0])) {\n            return null;\n          } // Accept quoted arguments as-is\n\n\n          if (match[3]) {\n            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments\n          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\n          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\n          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {\n            // excess is a negative index\n            match[0] = match[0].slice(0, excess);\n            match[2] = unquoted.slice(0, excess);\n          } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n          return match.slice(0, 3);\n        }\n      },\n      filter: {\n        "TAG": function (nodeNameSelector) {\n          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n          return nodeNameSelector === "*" ? function () {\n            return true;\n          } : function (elem) {\n            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n          };\n        },\n        "CLASS": function (className) {\n          var pattern = classCache[className + " "];\n          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {\n            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");\n          });\n        },\n        "ATTR": function (name, operator, check) {\n          return function (elem) {\n            var result = Sizzle.attr(elem, name);\n\n            if (result == null) {\n              return operator === "!=";\n            }\n\n            if (!operator) {\n              return true;\n            }\n\n            result += "";\n            /* eslint-disable max-len */\n\n            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;\n            /* eslint-enable max-len */\n          };\n        },\n        "CHILD": function (type, what, _argument, first, last) {\n          var simple = type.slice(0, 3) !== "nth",\n              forward = type.slice(-4) !== "last",\n              ofType = what === "of-type";\n          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n          function (elem) {\n            return !!elem.parentNode;\n          } : function (elem, _context, xml) {\n            var cache,\n                uniqueCache,\n                outerCache,\n                node,\n                nodeIndex,\n                start,\n                dir = simple !== forward ? "nextSibling" : "previousSibling",\n                parent = elem.parentNode,\n                name = ofType && elem.nodeName.toLowerCase(),\n                useCache = !xml && !ofType,\n                diff = false;\n\n            if (parent) {\n              // :(first|last|only)-(child|of-type)\n              if (simple) {\n                while (dir) {\n                  node = elem;\n\n                  while (node = node[dir]) {\n                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                      return false;\n                    }\n                  } // Reverse direction for :only-* (if we haven\'t yet done so)\n\n\n                  start = dir = type === "only" && !start && "nextSibling";\n                }\n\n                return true;\n              }\n\n              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n              if (forward && useCache) {\n                // Seek `elem` from a previously-cached index\n                // ...in a gzip-friendly way\n                node = parent;\n                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                // Defend against cloned attroperties (jQuery gh-1709)\n\n                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                cache = uniqueCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = nodeIndex && cache[2];\n                node = nodeIndex && parent.childNodes[nodeIndex];\n\n                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\n                diff = nodeIndex = 0) || start.pop()) {\n                  // When found, cache indexes on `parent` and break\n                  if (node.nodeType === 1 && ++diff && node === elem) {\n                    uniqueCache[type] = [dirruns, nodeIndex, diff];\n                    break;\n                  }\n                }\n              } else {\n                // Use previously-cached element index if available\n                if (useCache) {\n                  // ...in a gzip-friendly way\n                  node = elem;\n                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                  // Defend against cloned attroperties (jQuery gh-1709)\n\n                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                  cache = uniqueCache[type] || [];\n                  nodeIndex = cache[0] === dirruns && cache[1];\n                  diff = nodeIndex;\n                } // xml :nth-child(...)\n                // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\n\n                if (diff === false) {\n                  // Use the same loop as above to seek `elem` from the start\n                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                      // Cache the index of each encountered element\n                      if (useCache) {\n                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                        // Defend against cloned attroperties (jQuery gh-1709)\n\n                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                        uniqueCache[type] = [dirruns, diff];\n                      }\n\n                      if (node === elem) {\n                        break;\n                      }\n                    }\n                  }\n                }\n              } // Incorporate the offset, then check against cycle size\n\n\n              diff -= last;\n              return diff === first || diff % first === 0 && diff / first >= 0;\n            }\n          };\n        },\n        "PSEUDO": function (pseudo, argument) {\n          // pseudo-class names are case-insensitive\n          // http://www.w3.org/TR/selectors/#pseudo-classes\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n          // Remember that setFilters inherits from pseudos\n          var args,\n              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that\n          // arguments are needed to create the filter function\n          // just as Sizzle does\n\n          if (fn[expando]) {\n            return fn(argument);\n          } // But maintain support for old signatures\n\n\n          if (fn.length > 1) {\n            args = [pseudo, pseudo, "", argument];\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n              var idx,\n                  matched = fn(seed, argument),\n                  i = matched.length;\n\n              while (i--) {\n                idx = indexOf(seed, matched[i]);\n                seed[idx] = !(matches[idx] = matched[i]);\n              }\n            }) : function (elem) {\n              return fn(elem, 0, args);\n            };\n          }\n\n          return fn;\n        }\n      },\n      pseudos: {\n        // Potentially complex pseudos\n        "not": markFunction(function (selector) {\n          // Trim the selector passed to compile\n          // to avoid treating leading and trailing\n          // spaces as combinators\n          var input = [],\n              results = [],\n              matcher = compile(selector.replace(rtrim, "$1"));\n          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {\n            var elem,\n                unmatched = matcher(seed, null, xml, []),\n                i = seed.length; // Match elements unmatched by `matcher`\n\n            while (i--) {\n              if (elem = unmatched[i]) {\n                seed[i] = !(matches[i] = elem);\n              }\n            }\n          }) : function (elem, _context, xml) {\n            input[0] = elem;\n            matcher(input, null, xml, results); // Don\'t keep the element (issue #299)\n\n            input[0] = null;\n            return !results.pop();\n          };\n        }),\n        "has": markFunction(function (selector) {\n          return function (elem) {\n            return Sizzle(selector, elem).length > 0;\n          };\n        }),\n        "contains": markFunction(function (text) {\n          text = text.replace(runescape, funescape);\n          return function (elem) {\n            return (elem.textContent || getText(elem)).indexOf(text) > -1;\n          };\n        }),\n        // "Whether an element is represented by a :lang() selector\n        // is based solely on the element\'s language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by "-".\n        // The matching of C against the element\'s language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name."\n        // http://www.w3.org/TR/selectors/#lang-pseudo\n        "lang": markFunction(function (lang) {\n          // lang value must be a valid identifier\n          if (!ridentifier.test(lang || "")) {\n            Sizzle.error("unsupported lang: " + lang);\n          }\n\n          lang = lang.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            var elemLang;\n\n            do {\n              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {\n                elemLang = elemLang.toLowerCase();\n                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;\n              }\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n            return false;\n          };\n        }),\n        // Miscellaneous\n        "target": function (elem) {\n          var hash = window.location && window.location.hash;\n          return hash && hash.slice(1) === elem.id;\n        },\n        "root": function (elem) {\n          return elem === docElem;\n        },\n        "focus": function (elem) {\n          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n        },\n        // Boolean properties\n        "enabled": createDisabledPseudo(false),\n        "disabled": createDisabledPseudo(true),\n        "checked": function (elem) {\n          // In CSS3, :checked should return both checked and selected elements\n          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          var nodeName = elem.nodeName.toLowerCase();\n          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;\n        },\n        "selected": function (elem) {\n          // Accessing this property makes selected-by-default\n          // options in Safari work properly\n          if (elem.parentNode) {\n            // eslint-disable-next-line no-unused-expressions\n            elem.parentNode.selectedIndex;\n          }\n\n          return elem.selected === true;\n        },\n        // Contents\n        "empty": function (elem) {\n          // http://www.w3.org/TR/selectors/#empty-pseudo\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\n          // nodeType < 6 works because attributes (2) do not appear as children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            if (elem.nodeType < 6) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        "parent": function (elem) {\n          return !Expr.pseudos["empty"](elem);\n        },\n        // Element/input types\n        "header": function (elem) {\n          return rheader.test(elem.nodeName);\n        },\n        "input": function (elem) {\n          return rinputs.test(elem.nodeName);\n        },\n        "button": function (elem) {\n          var name = elem.nodeName.toLowerCase();\n          return name === "input" && elem.type === "button" || name === "button";\n        },\n        "text": function (elem) {\n          var attr;\n          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8\n          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"\n          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");\n        },\n        // Position-in-collection\n        "first": createPositionalPseudo(function () {\n          return [0];\n        }),\n        "last": createPositionalPseudo(function (_matchIndexes, length) {\n          return [length - 1];\n        }),\n        "eq": createPositionalPseudo(function (_matchIndexes, length, argument) {\n          return [argument < 0 ? argument + length : argument];\n        }),\n        "even": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 0;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        "odd": createPositionalPseudo(function (matchIndexes, length) {\n          var i = 1;\n\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument > length ? length : argument;\n\n          for (; --i >= 0;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        }),\n        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n\n          for (; ++i < length;) {\n            matchIndexes.push(i);\n          }\n\n          return matchIndexes;\n        })\n      }\n    };\n    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos\n\n    for (i in {\n      radio: true,\n      checkbox: true,\n      file: true,\n      password: true,\n      image: true\n    }) {\n      Expr.pseudos[i] = createInputPseudo(i);\n    }\n\n    for (i in {\n      submit: true,\n      reset: true\n    }) {\n      Expr.pseudos[i] = createButtonPseudo(i);\n    } // Easy API for creating new setFilters\n\n\n    function setFilters() {}\n\n    setFilters.prototype = Expr.filters = Expr.pseudos;\n    Expr.setFilters = new setFilters();\n\n    tokenize = Sizzle.tokenize = function (selector, parseOnly) {\n      var matched,\n          match,\n          tokens,\n          type,\n          soFar,\n          groups,\n          preFilters,\n          cached = tokenCache[selector + " "];\n\n      if (cached) {\n        return parseOnly ? 0 : cached.slice(0);\n      }\n\n      soFar = selector;\n      groups = [];\n      preFilters = Expr.preFilter;\n\n      while (soFar) {\n        // Comma and first run\n        if (!matched || (match = rcomma.exec(soFar))) {\n          if (match) {\n            // Don\'t consume trailing commas as valid\n            soFar = soFar.slice(match[0].length) || soFar;\n          }\n\n          groups.push(tokens = []);\n        }\n\n        matched = false; // Combinators\n\n        if (match = rcombinators.exec(soFar)) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            // Cast descendant combinators to space\n            type: match[0].replace(rtrim, " ")\n          });\n          soFar = soFar.slice(matched.length);\n        } // Filters\n\n\n        for (type in Expr.filter) {\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              type: type,\n              matches: match\n            });\n            soFar = soFar.slice(matched.length);\n          }\n        }\n\n        if (!matched) {\n          break;\n        }\n      } // Return the length of the invalid excess\n      // if we\'re just parsing\n      // Otherwise, throw an error or return tokens\n\n\n      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\n      tokenCache(selector, groups).slice(0);\n    };\n\n    function toSelector(tokens) {\n      var i = 0,\n          len = tokens.length,\n          selector = "";\n\n      for (; i < len; i++) {\n        selector += tokens[i].value;\n      }\n\n      return selector;\n    }\n\n    function addCombinator(matcher, combinator, base) {\n      var dir = combinator.dir,\n          skip = combinator.next,\n          key = skip || dir,\n          checkNonElements = base && key === "parentNode",\n          doneName = done++;\n      return combinator.first ? // Check against closest ancestor/preceding element\n      function (elem, context, xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            return matcher(elem, context, xml);\n          }\n        }\n\n        return false;\n      } : // Check against all ancestor/preceding elements\n      function (elem, context, xml) {\n        var oldCache,\n            uniqueCache,\n            outerCache,\n            newCache = [dirruns, doneName]; // We can\'t set arbitrary data on XML nodes, so they don\'t benefit from combinator caching\n\n        if (xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              if (matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        } else {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only\n              // Defend against cloned attroperties (jQuery gh-1709)\n\n              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n              if (skip && skip === elem.nodeName.toLowerCase()) {\n                elem = elem[dir] || elem;\n              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                // Assign to newCache so results back-propagate to previous elements\n                return newCache[2] = oldCache[2];\n              } else {\n                // Reuse newcache so results back-propagate to previous elements\n                uniqueCache[key] = newCache; // A match means we\'re done; a fail means we have to keep checking\n\n                if (newCache[2] = matcher(elem, context, xml)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n\n        return false;\n      };\n    }\n\n    function elementMatcher(matchers) {\n      return matchers.length > 1 ? function (elem, context, xml) {\n        var i = matchers.length;\n\n        while (i--) {\n          if (!matchers[i](elem, context, xml)) {\n            return false;\n          }\n        }\n\n        return true;\n      } : matchers[0];\n    }\n\n    function multipleContexts(selector, contexts, results) {\n      var i = 0,\n          len = contexts.length;\n\n      for (; i < len; i++) {\n        Sizzle(selector, contexts[i], results);\n      }\n\n      return results;\n    }\n\n    function condense(unmatched, map, filter, context, xml) {\n      var elem,\n          newUnmatched = [],\n          i = 0,\n          len = unmatched.length,\n          mapped = map != null;\n\n      for (; i < len; i++) {\n        if (elem = unmatched[i]) {\n          if (!filter || filter(elem, context, xml)) {\n            newUnmatched.push(elem);\n\n            if (mapped) {\n              map.push(i);\n            }\n          }\n        }\n      }\n\n      return newUnmatched;\n    }\n\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n      if (postFilter && !postFilter[expando]) {\n        postFilter = setMatcher(postFilter);\n      }\n\n      if (postFinder && !postFinder[expando]) {\n        postFinder = setMatcher(postFinder, postSelector);\n      }\n\n      return markFunction(function (seed, results, context, xml) {\n        var temp,\n            i,\n            elem,\n            preMap = [],\n            postMap = [],\n            preexisting = results.length,\n            // Get initial elements from seed or context\n        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),\n            // Prefilter to get matcher input, preserving a map for seed-results synchronization\n        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n        [] : // ...otherwise use results directly\n        results : matcherIn; // Find primary matches\n\n        if (matcher) {\n          matcher(matcherIn, matcherOut, context, xml);\n        } // Apply postFilter\n\n\n        if (postFilter) {\n          temp = condense(matcherOut, postMap);\n          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n          i = temp.length;\n\n          while (i--) {\n            if (elem = temp[i]) {\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n            }\n          }\n        }\n\n        if (seed) {\n          if (postFinder || preFilter) {\n            if (postFinder) {\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\n              temp = [];\n              i = matcherOut.length;\n\n              while (i--) {\n                if (elem = matcherOut[i]) {\n                  // Restore matcherIn since elem is not yet a final match\n                  temp.push(matcherIn[i] = elem);\n                }\n              }\n\n              postFinder(null, matcherOut = [], temp, xml);\n            } // Move matched elements from seed to results to keep them synchronized\n\n\n            i = matcherOut.length;\n\n            while (i--) {\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n                seed[temp] = !(results[temp] = elem);\n              }\n            }\n          } // Add elements to results, through postFinder if defined\n\n        } else {\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n          if (postFinder) {\n            postFinder(null, results, matcherOut, xml);\n          } else {\n            push.apply(results, matcherOut);\n          }\n        }\n      });\n    }\n\n    function matcherFromTokens(tokens) {\n      var checkContext,\n          matcher,\n          j,\n          len = tokens.length,\n          leadingRelative = Expr.relative[tokens[0].type],\n          implicitRelative = leadingRelative || Expr.relative[" "],\n          i = leadingRelative ? 1 : 0,\n          // The foundational matcher ensures that elements are reachable from top-level context(s)\n      matchContext = addCombinator(function (elem) {\n        return elem === checkContext;\n      }, implicitRelative, true),\n          matchAnyContext = addCombinator(function (elem) {\n        return indexOf(checkContext, elem) > -1;\n      }, implicitRelative, true),\n          matchers = [function (elem, context, xml) {\n        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\n\n        checkContext = null;\n        return ret;\n      }];\n\n      for (; i < len; i++) {\n        if (matcher = Expr.relative[tokens[i].type]) {\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\n        } else {\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n          if (matcher[expando]) {\n            // Find the next relative operator (if any) for proper handling\n            j = ++i;\n\n            for (; j < len; j++) {\n              if (Expr.relative[tokens[j].type]) {\n                break;\n              }\n            }\n\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n            tokens.slice(0, i - 1).concat({\n              value: tokens[i - 2].type === " " ? "*" : ""\n            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n          }\n\n          matchers.push(matcher);\n        }\n      }\n\n      return elementMatcher(matchers);\n    }\n\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n      var bySet = setMatchers.length > 0,\n          byElement = elementMatchers.length > 0,\n          superMatcher = function (seed, context, xml, results, outermost) {\n        var elem,\n            j,\n            matcher,\n            matchedCount = 0,\n            i = "0",\n            unmatched = seed && [],\n            setMatched = [],\n            contextBackup = outermostContext,\n            // We must always have either seed elements or outermost context\n        elems = seed || byElement && Expr.find["TAG"]("*", outermost),\n            // Use integer dirruns iff this is the outermost matcher\n        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n            len = elems.length;\n\n        if (outermost) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          outermostContext = context == document || context || outermost;\n        } // Add elements passing elementMatchers directly to results\n        // Support: IE<9, Safari\n        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id\n\n\n        for (; i !== len && (elem = elems[i]) != null; i++) {\n          if (byElement && elem) {\n            j = 0; // Support: IE 11+, Edge 17 - 18+\n            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n            // two documents; shallow comparisons work.\n            // eslint-disable-next-line eqeqeq\n\n            if (!context && elem.ownerDocument != document) {\n              setDocument(elem);\n              xml = !documentIsHTML;\n            }\n\n            while (matcher = elementMatchers[j++]) {\n              if (matcher(elem, context || document, xml)) {\n                results.push(elem);\n                break;\n              }\n            }\n\n            if (outermost) {\n              dirruns = dirrunsUnique;\n            }\n          } // Track unmatched elements for set filters\n\n\n          if (bySet) {\n            // They will have gone through all possible matchers\n            if (elem = !matcher && elem) {\n              matchedCount--;\n            } // Lengthen the array for every element, matched or not\n\n\n            if (seed) {\n              unmatched.push(elem);\n            }\n          }\n        } // `i` is now the count of elements visited above, and adding it to `matchedCount`\n        // makes the latter nonnegative.\n\n\n        matchedCount += i; // Apply set filters to unmatched elements\n        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n        // equals `i`), unless we didn\'t visit _any_ elements in the above loop because we have\n        // no element matchers and no seed.\n        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that\n        // case, which will result in a "00" `matchedCount` that differs from `i` but is also\n        // numerically zero.\n\n        if (bySet && i !== matchedCount) {\n          j = 0;\n\n          while (matcher = setMatchers[j++]) {\n            matcher(unmatched, setMatched, context, xml);\n          }\n\n          if (seed) {\n            // Reintegrate element matches to eliminate the need for sorting\n            if (matchedCount > 0) {\n              while (i--) {\n                if (!(unmatched[i] || setMatched[i])) {\n                  setMatched[i] = pop.call(results);\n                }\n              }\n            } // Discard index placeholder values to get only actual matches\n\n\n            setMatched = condense(setMatched);\n          } // Add matches to results\n\n\n          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n            Sizzle.uniqueSort(results);\n          }\n        } // Override manipulation of globals by nested matchers\n\n\n        if (outermost) {\n          dirruns = dirrunsUnique;\n          outermostContext = contextBackup;\n        }\n\n        return unmatched;\n      };\n\n      return bySet ? markFunction(superMatcher) : superMatcher;\n    }\n\n    compile = Sizzle.compile = function (selector, match\n    /* Internal Use Only */\n    ) {\n      var i,\n          setMatchers = [],\n          elementMatchers = [],\n          cached = compilerCache[selector + " "];\n\n      if (!cached) {\n        // Generate a function of recursive functions that can be used to check each element\n        if (!match) {\n          match = tokenize(selector);\n        }\n\n        i = match.length;\n\n        while (i--) {\n          cached = matcherFromTokens(match[i]);\n\n          if (cached[expando]) {\n            setMatchers.push(cached);\n          } else {\n            elementMatchers.push(cached);\n          }\n        } // Cache the compiled function\n\n\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\n\n        cached.selector = selector;\n      }\n\n      return cached;\n    };\n    /**\n     * A low-level selection function that works with Sizzle\'s compiled\n     *  selector functions\n     * @param {String|Function} selector A selector or a pre-compiled\n     *  selector function built with Sizzle.compile\n     * @param {Element} context\n     * @param {Array} [results]\n     * @param {Array} [seed] A set of elements to match against\n     */\n\n\n    select = Sizzle.select = function (selector, context, results, seed) {\n      var i,\n          tokens,\n          token,\n          type,\n          find,\n          compiled = typeof selector === "function" && selector,\n          match = !seed && tokenize(selector = compiled.selector || selector);\n      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed\n      // (the latter of which guarantees us context)\n\n      if (match.length === 1) {\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[0] = match[0].slice(0);\n\n        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\n          if (!context) {\n            return results; // Precompiled matchers will still verify ancestry, so step up a level\n          } else if (compiled) {\n            context = context.parentNode;\n          }\n\n          selector = selector.slice(tokens.shift().value.length);\n        } // Fetch a seed set for right-to-left matching\n\n\n        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;\n\n        while (i--) {\n          token = tokens[i]; // Abort if we hit a combinator\n\n          if (Expr.relative[type = token.type]) {\n            break;\n          }\n\n          if (find = Expr.find[type]) {\n            // Search, expanding context for leading sibling combinators\n            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n              // If seed is empty or no tokens remain, we can return early\n              tokens.splice(i, 1);\n              selector = seed.length && toSelector(tokens);\n\n              if (!selector) {\n                push.apply(results, seed);\n                return results;\n              }\n\n              break;\n            }\n          }\n        }\n      } // Compile and execute a filtering function if one is not provided\n      // Provide `match` to avoid retokenization if we modified the selector above\n\n\n      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n      return results;\n    }; // One-time assignments\n    // Sort stability\n\n\n    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+\n    // Always assume duplicates if they aren\'t passed to the comparison function\n\n    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\n\n    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n    // Detached nodes confoundingly follow *each other*\n\n    support.sortDetached = assert(function (el) {\n      // Should return 1, but returns 4 (following)\n      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;\n    }); // Support: IE<8\n    // Prevent attribute/property "interpolation"\n    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n    if (!assert(function (el) {\n      el.innerHTML = "<a href=\'#\'></a>";\n      return el.firstChild.getAttribute("href") === "#";\n    })) {\n      addHandle("type|href|height|width", function (elem, name, isXML) {\n        if (!isXML) {\n          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);\n        }\n      });\n    } // Support: IE<9\n    // Use defaultValue in place of getAttribute("value")\n\n\n    if (!support.attributes || !assert(function (el) {\n      el.innerHTML = "<input/>";\n      el.firstChild.setAttribute("value", "");\n      return el.firstChild.getAttribute("value") === "";\n    })) {\n      addHandle("value", function (elem, _name, isXML) {\n        if (!isXML && elem.nodeName.toLowerCase() === "input") {\n          return elem.defaultValue;\n        }\n      });\n    } // Support: IE<9\n    // Use getAttributeNode to fetch booleans when getAttribute lies\n\n\n    if (!assert(function (el) {\n      return el.getAttribute("disabled") == null;\n    })) {\n      addHandle(booleans, function (elem, name, isXML) {\n        var val;\n\n        if (!isXML) {\n          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n        }\n      });\n    }\n\n    return Sizzle;\n  }(window);\n\n  jQuery.find = Sizzle;\n  jQuery.expr = Sizzle.selectors; // Deprecated\n\n  jQuery.expr[":"] = jQuery.expr.pseudos;\n  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n  jQuery.text = Sizzle.getText;\n  jQuery.isXMLDoc = Sizzle.isXML;\n  jQuery.contains = Sizzle.contains;\n  jQuery.escapeSelector = Sizzle.escape;\n\n  var dir = function (elem, dir, until) {\n    var matched = [],\n        truncate = until !== undefined;\n\n    while ((elem = elem[dir]) && elem.nodeType !== 9) {\n      if (elem.nodeType === 1) {\n        if (truncate && jQuery(elem).is(until)) {\n          break;\n        }\n\n        matched.push(elem);\n      }\n    }\n\n    return matched;\n  };\n\n  var siblings = function (n, elem) {\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== elem) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  };\n\n  var rneedsContext = jQuery.expr.match.needsContext;\n\n  function nodeName(elem, name) {\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n  }\n\n  ;\n  var rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i; // Implement the identical functionality for filter and not\n\n  function winnow(elements, qualifier, not) {\n    if (isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        return !!qualifier.call(elem, i, elem) !== not;\n      });\n    } // Single element\n\n\n    if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier !== not;\n      });\n    } // Arraylike of elements (jQuery, arguments, Array)\n\n\n    if (typeof qualifier !== "string") {\n      return jQuery.grep(elements, function (elem) {\n        return indexOf.call(qualifier, elem) > -1 !== not;\n      });\n    } // Filtered directly for both simple and complex selectors\n\n\n    return jQuery.filter(qualifier, elements, not);\n  }\n\n  jQuery.filter = function (expr, elems, not) {\n    var elem = elems[0];\n\n    if (not) {\n      expr = ":not(" + expr + ")";\n    }\n\n    if (elems.length === 1 && elem.nodeType === 1) {\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n    }\n\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n      return elem.nodeType === 1;\n    }));\n  };\n\n  jQuery.fn.extend({\n    find: function (selector) {\n      var i,\n          ret,\n          len = this.length,\n          self = this;\n\n      if (typeof selector !== "string") {\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n\n      ret = this.pushStack([]);\n\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, self[i], ret);\n      }\n\n      return len > 1 ? jQuery.uniqueSort(ret) : ret;\n    },\n    filter: function (selector) {\n      return this.pushStack(winnow(this, selector || [], false));\n    },\n    not: function (selector) {\n      return this.pushStack(winnow(this, selector || [], true));\n    },\n    is: function (selector) {\n      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set\n      // so $("p:first").is("p:last") won\'t return true for a doc with two "p".\n      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n    }\n  }); // Initialize a jQuery object\n  // A central reference to the root jQuery(document)\n\n  var rootjQuery,\n      // A simple way to check for HTML strings\n  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n  // Strict HTML recognition (#11290: must start with <)\n  // Shortcut simple #id case for speed\n  rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n      init = jQuery.fn.init = function (selector, context, root) {\n    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)\n\n    if (!selector) {\n      return this;\n    } // Method init() accepts an alternate rootjQuery\n    // so migrate can support jQuery.sub (gh-2101)\n\n\n    root = root || rootjQuery; // Handle HTML strings\n\n    if (typeof selector === "string") {\n      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {\n        // Assume that strings that start and end with <> are HTML and skip the regex check\n        match = [null, selector, null];\n      } else {\n        match = rquickExpr.exec(selector);\n      } // Match html or make sure no context is specified for #id\n\n\n      if (match && (match[1] || !context)) {\n        // HANDLE: $(html) -> $(array)\n        if (match[1]) {\n          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat\n          // Intentionally let the error be thrown if parseHTML is not present\n\n          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\n\n          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n            for (match in context) {\n              // Properties of context are called as methods if possible\n              if (isFunction(this[match])) {\n                this[match](context[match]); // ...and otherwise set as attributes\n              } else {\n                this.attr(match, context[match]);\n              }\n            }\n          }\n\n          return this; // HANDLE: $(#id)\n        } else {\n          elem = document.getElementById(match[2]);\n\n          if (elem) {\n            // Inject the element directly into the jQuery object\n            this[0] = elem;\n            this.length = 1;\n          }\n\n          return this;\n        } // HANDLE: $(expr, $(...))\n\n      } else if (!context || context.jquery) {\n        return (context || root).find(selector); // HANDLE: $(expr, context)\n        // (which is just equivalent to: $(context).find(expr)\n      } else {\n        return this.constructor(context).find(selector);\n      } // HANDLE: $(DOMElement)\n\n    } else if (selector.nodeType) {\n      this[0] = selector;\n      this.length = 1;\n      return this; // HANDLE: $(function)\n      // Shortcut for document ready\n    } else if (isFunction(selector)) {\n      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present\n      selector(jQuery);\n    }\n\n    return jQuery.makeArray(selector, this);\n  }; // Give the init function the jQuery prototype for later instantiation\n\n\n  init.prototype = jQuery.fn; // Initialize central reference\n\n  rootjQuery = jQuery(document);\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n      // Methods guaranteed to produce a unique set when starting from a unique set\n  guaranteedUnique = {\n    children: true,\n    contents: true,\n    next: true,\n    prev: true\n  };\n  jQuery.fn.extend({\n    has: function (target) {\n      var targets = jQuery(target, this),\n          l = targets.length;\n      return this.filter(function () {\n        var i = 0;\n\n        for (; i < l; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    closest: function (selectors, context) {\n      var cur,\n          i = 0,\n          l = this.length,\n          matched = [],\n          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there\'s no _selection_ context\n\n      if (!rneedsContext.test(selectors)) {\n        for (; i < l; i++) {\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n            // Always skip document fragments\n            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don\'t pass non-elements to Sizzle\n            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n              matched.push(cur);\n              break;\n            }\n          }\n        }\n      }\n\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n    },\n    // Determine the position of an element within the set\n    index: function (elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      } // Index in selector\n\n\n      if (typeof elem === "string") {\n        return indexOf.call(jQuery(elem), this[0]);\n      } // Locate the position of the desired element\n\n\n      return indexOf.call(this, // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem);\n    },\n    add: function (selector, context) {\n      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n    },\n    addBack: function (selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n\n  function sibling(cur, dir) {\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n    return cur;\n  }\n\n  jQuery.each({\n    parent: function (elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function (elem) {\n      return dir(elem, "parentNode");\n    },\n    parentsUntil: function (elem, _i, until) {\n      return dir(elem, "parentNode", until);\n    },\n    next: function (elem) {\n      return sibling(elem, "nextSibling");\n    },\n    prev: function (elem) {\n      return sibling(elem, "previousSibling");\n    },\n    nextAll: function (elem) {\n      return dir(elem, "nextSibling");\n    },\n    prevAll: function (elem) {\n      return dir(elem, "previousSibling");\n    },\n    nextUntil: function (elem, _i, until) {\n      return dir(elem, "nextSibling", until);\n    },\n    prevUntil: function (elem, _i, until) {\n      return dir(elem, "previousSibling", until);\n    },\n    siblings: function (elem) {\n      return siblings((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function (elem) {\n      return siblings(elem.firstChild);\n    },\n    contents: function (elem) {\n      if (elem.contentDocument != null && // Support: IE 11+\n      // <object> elements with no `data` attribute has an object\n      // `contentDocument` with a `null` prototype.\n      getProto(elem.contentDocument)) {\n        return elem.contentDocument;\n      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n      // Treat the template element as a regular one in browsers that\n      // don\'t support it.\n\n\n      if (nodeName(elem, "template")) {\n        elem = elem.content || elem;\n      }\n\n      return jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var matched = jQuery.map(this, fn, until);\n\n      if (name.slice(-5) !== "Until") {\n        selector = until;\n      }\n\n      if (selector && typeof selector === "string") {\n        matched = jQuery.filter(selector, matched);\n      }\n\n      if (this.length > 1) {\n        // Remove duplicates\n        if (!guaranteedUnique[name]) {\n          jQuery.uniqueSort(matched);\n        } // Reverse order for parents* and prev-derivatives\n\n\n        if (rparentsprev.test(name)) {\n          matched.reverse();\n        }\n      }\n\n      return this.pushStack(matched);\n    };\n  });\n  var rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g; // Convert String-formatted options into Object-formatted ones\n\n  function createOptions(options) {\n    var object = {};\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * "fired" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest "memorized"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n\n\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);\n\n    var // Flag to know if list is currently firing\n    firing,\n        // Last fire value for non-forgettable lists\n    memory,\n        // Flag to know if list was already fired\n    fired,\n        // Flag to prevent firing\n    locked,\n        // Actual callback list\n    list = [],\n        // Queue of execution data for repeatable lists\n    queue = [],\n        // Index of currently firing callback (modified by add/remove as needed)\n    firingIndex = -1,\n        // Fire callbacks\n    fire = function () {\n      // Enforce single-firing\n      locked = locked || options.once; // Execute callbacks for all pending executions,\n      // respecting firingIndex overrides and runtime changes\n\n      fired = firing = true;\n\n      for (; queue.length; firingIndex = -1) {\n        memory = queue.shift();\n\n        while (++firingIndex < list.length) {\n          // Run callback and check for early termination\n          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n            // Jump to end and forget the data so .add doesn\'t re-fire\n            firingIndex = list.length;\n            memory = false;\n          }\n        }\n      } // Forget the data if we\'re done with it\n\n\n      if (!options.memory) {\n        memory = false;\n      }\n\n      firing = false; // Clean up if we\'re done firing for good\n\n      if (locked) {\n        // Keep an empty list if we have data for future add calls\n        if (memory) {\n          list = []; // Otherwise, this object is spent\n        } else {\n          list = "";\n        }\n      }\n    },\n        // Actual Callbacks object\n    self = {\n      // Add a callback or a collection of callbacks to the list\n      add: function () {\n        if (list) {\n          // If we have memory from a past run, we should fire after adding\n          if (memory && !firing) {\n            firingIndex = list.length - 1;\n            queue.push(memory);\n          }\n\n          (function add(args) {\n            jQuery.each(args, function (_, arg) {\n              if (isFunction(arg)) {\n                if (!options.unique || !self.has(arg)) {\n                  list.push(arg);\n                }\n              } else if (arg && arg.length && toType(arg) !== "string") {\n                // Inspect recursively\n                add(arg);\n              }\n            });\n          })(arguments);\n\n          if (memory && !firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Remove a callback from the list\n      remove: function () {\n        jQuery.each(arguments, function (_, arg) {\n          var index;\n\n          while ((index = jQuery.inArray(arg, list, index)) > -1) {\n            list.splice(index, 1); // Handle firing indexes\n\n            if (index <= firingIndex) {\n              firingIndex--;\n            }\n          }\n        });\n        return this;\n      },\n      // Check if a given callback is in the list.\n      // If no argument is given, return whether or not list has callbacks attached.\n      has: function (fn) {\n        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n      },\n      // Remove all callbacks from the list\n      empty: function () {\n        if (list) {\n          list = [];\n        }\n\n        return this;\n      },\n      // Disable .fire and .add\n      // Abort any current/pending executions\n      // Clear all callbacks and values\n      disable: function () {\n        locked = queue = [];\n        list = memory = "";\n        return this;\n      },\n      disabled: function () {\n        return !list;\n      },\n      // Disable .fire\n      // Also disable .add unless we have memory (since it would have no effect)\n      // Abort any pending executions\n      lock: function () {\n        locked = queue = [];\n\n        if (!memory && !firing) {\n          list = memory = "";\n        }\n\n        return this;\n      },\n      locked: function () {\n        return !!locked;\n      },\n      // Call all callbacks with the given context and arguments\n      fireWith: function (context, args) {\n        if (!locked) {\n          args = args || [];\n          args = [context, args.slice ? args.slice() : args];\n          queue.push(args);\n\n          if (!firing) {\n            fire();\n          }\n        }\n\n        return this;\n      },\n      // Call all the callbacks with the given arguments\n      fire: function () {\n        self.fireWith(this, arguments);\n        return this;\n      },\n      // To know if the callbacks have already been called at least once\n      fired: function () {\n        return !!fired;\n      }\n    };\n\n    return self;\n  };\n\n  function Identity(v) {\n    return v;\n  }\n\n  function Thrower(ex) {\n    throw ex;\n  }\n\n  function adoptValue(value, resolve, reject, noValue) {\n    var method;\n\n    try {\n      // Check for promise aspect first to privilege synchronous behavior\n      if (value && isFunction(method = value.promise)) {\n        method.call(value).done(resolve).fail(reject); // Other thenables\n      } else if (value && isFunction(method = value.then)) {\n        method.call(value, resolve, reject); // Other non-thenables\n      } else {\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n        // * false: [ value ].slice( 0 ) => resolve( value )\n        // * true: [ value ].slice( 1 ) => resolve()\n        resolve.apply(undefined, [value].slice(noValue));\n      } // For Promises/A+, convert exceptions into rejections\n      // Since jQuery.when doesn\'t unwrap thenables, we can skip the extra checks appearing in\n      // Deferred#then to conditionally suppress rejection.\n\n    } catch (value) {\n      // Support: Android 4.0 only\n      // Strict mode functions invoked without .call/.apply get global-object context\n      reject.apply(undefined, [value]);\n    }\n  }\n\n  jQuery.extend({\n    Deferred: function (func) {\n      var tuples = [// action, add listener, callbacks,\n      // ... .then handlers, argument index, [final state]\n      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],\n          state = "pending",\n          promise = {\n        state: function () {\n          return state;\n        },\n        always: function () {\n          deferred.done(arguments).fail(arguments);\n          return this;\n        },\n        "catch": function (fn) {\n          return promise.then(null, fn);\n        },\n        // Keep pipe for back-compat\n        pipe: function ()\n        /* fnDone, fnFail, fnProgress */\n        {\n          var fns = arguments;\n          return jQuery.Deferred(function (newDefer) {\n            jQuery.each(tuples, function (_i, tuple) {\n              // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })\n              // deferred.done(function() { bind to newDefer or newDefer.resolve })\n              // deferred.fail(function() { bind to newDefer or newDefer.reject })\n\n              deferred[tuple[1]](function () {\n                var returned = fn && fn.apply(this, arguments);\n\n                if (returned && isFunction(returned.promise)) {\n                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n                } else {\n                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);\n                }\n              });\n            });\n            fns = null;\n          }).promise();\n        },\n        then: function (onFulfilled, onRejected, onProgress) {\n          var maxDepth = 0;\n\n          function resolve(depth, deferred, handler, special) {\n            return function () {\n              var that = this,\n                  args = arguments,\n                  mightThrow = function () {\n                var returned, then; // Support: Promises/A+ section 2.3.3.3.3\n                // https://promisesaplus.com/#point-59\n                // Ignore double-resolution attempts\n\n                if (depth < maxDepth) {\n                  return;\n                }\n\n                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1\n                // https://promisesaplus.com/#point-48\n\n                if (returned === deferred.promise()) {\n                  throw new TypeError("Thenable self-resolution");\n                } // Support: Promises/A+ sections 2.3.3.1, 3.5\n                // https://promisesaplus.com/#point-54\n                // https://promisesaplus.com/#point-75\n                // Retrieve `then` only once\n\n\n                then = returned && ( // Support: Promises/A+ section 2.3.4\n                // https://promisesaplus.com/#point-64\n                // Only check objects and functions for thenability\n                typeof returned === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable\n\n                if (isFunction(then)) {\n                  // Special processors (notify) just wait for resolution\n                  if (special) {\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress\n                  } else {\n                    // ...and disregard older resolution values\n                    maxDepth++;\n                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n                  } // Handle all other returned values\n\n                } else {\n                  // Only substitute handlers pass on context\n                  // and multiple values (non-spec behavior)\n                  if (handler !== Identity) {\n                    that = undefined;\n                    args = [returned];\n                  } // Process the value(s)\n                  // Default process is resolve\n\n\n                  (special || deferred.resolveWith)(that, args);\n                }\n              },\n                  // Only normal processors (resolve) catch and reject exceptions\n              process = special ? mightThrow : function () {\n                try {\n                  mightThrow();\n                } catch (e) {\n                  if (jQuery.Deferred.exceptionHook) {\n                    jQuery.Deferred.exceptionHook(e, process.stackTrace);\n                  } // Support: Promises/A+ section 2.3.3.3.4.1\n                  // https://promisesaplus.com/#point-61\n                  // Ignore post-resolution exceptions\n\n\n                  if (depth + 1 >= maxDepth) {\n                    // Only substitute handlers pass on context\n                    // and multiple values (non-spec behavior)\n                    if (handler !== Thrower) {\n                      that = undefined;\n                      args = [e];\n                    }\n\n                    deferred.rejectWith(that, args);\n                  }\n                }\n              }; // Support: Promises/A+ section 2.3.3.3.1\n              // https://promisesaplus.com/#point-57\n              // Re-resolve promises immediately to dodge false rejection from\n              // subsequent errors\n\n\n              if (depth) {\n                process();\n              } else {\n                // Call an optional hook to record the stack, in case of exception\n                // since it\'s otherwise lost when execution goes async\n                if (jQuery.Deferred.getStackHook) {\n                  process.stackTrace = jQuery.Deferred.getStackHook();\n                }\n\n                window.setTimeout(process);\n              }\n            };\n          }\n\n          return jQuery.Deferred(function (newDefer) {\n            // progress_handlers.add( ... )\n            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )\n\n            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )\n\n            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\n          }).promise();\n        },\n        // Get a promise for this deferred\n        // If obj is provided, the promise aspect is added to the object\n        promise: function (obj) {\n          return obj != null ? jQuery.extend(obj, promise) : promise;\n        }\n      },\n          deferred = {}; // Add list-specific methods\n\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n            stateString = tuple[5]; // promise.progress = list.add\n        // promise.done = list.add\n        // promise.fail = list.add\n\n        promise[tuple[1]] = list.add; // Handle state\n\n        if (stateString) {\n          list.add(function () {\n            // state = "resolved" (i.e., fulfilled)\n            // state = "rejected"\n            state = stateString;\n          }, // rejected_callbacks.disable\n          // fulfilled_callbacks.disable\n          tuples[3 - i][2].disable, // rejected_handlers.disable\n          // fulfilled_handlers.disable\n          tuples[3 - i][3].disable, // progress_callbacks.lock\n          tuples[0][2].lock, // progress_handlers.lock\n          tuples[0][3].lock);\n        } // progress_handlers.fire\n        // fulfilled_handlers.fire\n        // rejected_handlers.fire\n\n\n        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }\n        // deferred.resolve = function() { deferred.resolveWith(...) }\n        // deferred.reject = function() { deferred.rejectWith(...) }\n\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);\n          return this;\n        }; // deferred.notifyWith = list.fireWith\n        // deferred.resolveWith = list.fireWith\n        // deferred.rejectWith = list.fireWith\n\n\n        deferred[tuple[0] + "With"] = list.fireWith;\n      }); // Make the deferred a promise\n\n      promise.promise(deferred); // Call given func if any\n\n      if (func) {\n        func.call(deferred, deferred);\n      } // All done!\n\n\n      return deferred;\n    },\n    // Deferred helper\n    when: function (singleValue) {\n      var // count of uncompleted subordinates\n      remaining = arguments.length,\n          // count of unprocessed arguments\n      i = remaining,\n          // subordinate fulfillment data\n      resolveContexts = Array(i),\n          resolveValues = slice.call(arguments),\n          // the master Deferred\n      master = jQuery.Deferred(),\n          // subordinate callback factory\n      updateFunc = function (i) {\n        return function (value) {\n          resolveContexts[i] = this;\n          resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;\n\n          if (! --remaining) {\n            master.resolveWith(resolveContexts, resolveValues);\n          }\n        };\n      }; // Single- and empty arguments are adopted like Promise.resolve\n\n\n      if (remaining <= 1) {\n        adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)\n\n        if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {\n          return master.then();\n        }\n      } // Multiple arguments are aggregated like Promise.all array elements\n\n\n      while (i--) {\n        adoptValue(resolveValues[i], updateFunc(i), master.reject);\n      }\n\n      return master.promise();\n    }\n  }); // These usually indicate a programmer mistake during development,\n  // warn about them ASAP rather than swallowing them by default.\n\n  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n  jQuery.Deferred.exceptionHook = function (error, stack) {\n    // Support: IE 8 - 9 only\n    // Console exists when dev tools are open, which can happen at any time\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);\n    }\n  };\n\n  jQuery.readyException = function (error) {\n    window.setTimeout(function () {\n      throw error;\n    });\n  }; // The deferred used on DOM ready\n\n\n  var readyList = jQuery.Deferred();\n\n  jQuery.fn.ready = function (fn) {\n    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup\n    // happens at the time of error handling instead of callback\n    // registration.\n    .catch(function (error) {\n      jQuery.readyException(error);\n    });\n    return this;\n  };\n\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See #6781\n    readyWait: 1,\n    // Handle when the DOM is ready\n    ready: function (wait) {\n      // Abort if there are pending holds or we\'re already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      } // Remember that the DOM is ready\n\n\n      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      } // If there are functions bound, to execute\n\n\n      readyList.resolveWith(document, [jQuery]);\n    }\n  });\n  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method\n\n  function completed() {\n    document.removeEventListener("DOMContentLoaded", completed);\n    window.removeEventListener("load", completed);\n    jQuery.ready();\n  } // Catch cases where $(document).ready() is called\n  // after the browser event has already occurred.\n  // Support: IE <=9 - 10 only\n  // Older IE sometimes signals "interactive" too soon\n\n\n  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\n    window.setTimeout(jQuery.ready);\n  } else {\n    // Use the handy event callback\n    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work\n\n    window.addEventListener("load", completed);\n  } // Multifunctional method to get and set values of a collection\n  // The value/s can optionally be executed if it\'s a function\n\n\n  var access = function (elems, fn, key, value, chainable, emptyGet, raw) {\n    var i = 0,\n        len = elems.length,\n        bulk = key == null; // Sets many values\n\n    if (toType(key) === "object") {\n      chainable = true;\n\n      for (i in key) {\n        access(elems, fn, i, key[i], true, emptyGet, raw);\n      } // Sets one value\n\n    } else if (value !== undefined) {\n      chainable = true;\n\n      if (!isFunction(value)) {\n        raw = true;\n      }\n\n      if (bulk) {\n        // Bulk operations run against the entire set\n        if (raw) {\n          fn.call(elems, value);\n          fn = null; // ...except when executing function values\n        } else {\n          bulk = fn;\n\n          fn = function (elem, _key, value) {\n            return bulk.call(jQuery(elem), value);\n          };\n        }\n      }\n\n      if (fn) {\n        for (; i < len; i++) {\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n        }\n      }\n    }\n\n    if (chainable) {\n      return elems;\n    } // Gets\n\n\n    if (bulk) {\n      return fn.call(elems);\n    }\n\n    return len ? fn(elems[0], key) : emptyGet;\n  }; // Matches dashed string for camelizing\n\n\n  var rmsPrefix = /^-ms-/,\n      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()\n\n  function fcamelCase(_all, letter) {\n    return letter.toUpperCase();\n  } // Convert dashed to camelCase; used by the css and data modules\n  // Support: IE <=9 - 11, Edge 12 - 15\n  // Microsoft forgot to hump their vendor prefix (#9572)\n\n\n  function camelCase(string) {\n    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);\n  }\n\n  var acceptData = function (owner) {\n    // Accepts only:\n    //  - Node\n    //    - Node.ELEMENT_NODE\n    //    - Node.DOCUMENT_NODE\n    //  - Object\n    //    - Any\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n  };\n\n  function Data() {\n    this.expando = jQuery.expando + Data.uid++;\n  }\n\n  Data.uid = 1;\n  Data.prototype = {\n    cache: function (owner) {\n      // Check if the owner object already has a cache\n      var value = owner[this.expando]; // If not, create one\n\n      if (!value) {\n        value = {}; // We can accept data for non-element nodes in modern browsers,\n        // but we should not, see #8335.\n        // Always return an empty object.\n\n        if (acceptData(owner)) {\n          // If it is a node unlikely to be stringify-ed or looped over\n          // use plain assignment\n          if (owner.nodeType) {\n            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property\n            // configurable must be true to allow the property to be\n            // deleted when data is removed\n          } else {\n            Object.defineProperty(owner, this.expando, {\n              value: value,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      return value;\n    },\n    set: function (owner, data, value) {\n      var prop,\n          cache = this.cache(owner); // Handle: [ owner, key, value ] args\n      // Always use camelCase key (gh-2257)\n\n      if (typeof data === "string") {\n        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args\n      } else {\n        // Copy the properties one-by-one to the cache object\n        for (prop in data) {\n          cache[camelCase(prop)] = data[prop];\n        }\n      }\n\n      return cache;\n    },\n    get: function (owner, key) {\n      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)\n      owner[this.expando] && owner[this.expando][camelCase(key)];\n    },\n    access: function (owner, key, value) {\n      // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the "read" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n      if (key === undefined || key && typeof key === "string" && value === undefined) {\n        return this.get(owner, key);\n      } // When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n\n\n      this.set(owner, key, value); // Since the "set" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n\n      return value !== undefined ? value : key;\n    },\n    remove: function (owner, key) {\n      var i,\n          cache = owner[this.expando];\n\n      if (cache === undefined) {\n        return;\n      }\n\n      if (key !== undefined) {\n        // Support array or space separated string of keys\n        if (Array.isArray(key)) {\n          // If key is an array of keys...\n          // We always set camelCase keys, so remove that.\n          key = key.map(camelCase);\n        } else {\n          key = camelCase(key); // If a key with the spaces exists, use it.\n          // Otherwise, create an array by matching non-whitespace\n\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n        }\n\n        i = key.length;\n\n        while (i--) {\n          delete cache[key[i]];\n        }\n      } // Remove the expando if there\'s no more data\n\n\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\n        // Support: Chrome <=35 - 45\n        // Webkit & Blink performance suffers when deleting properties\n        // from DOM nodes, so set to undefined instead\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n        if (owner.nodeType) {\n          owner[this.expando] = undefined;\n        } else {\n          delete owner[this.expando];\n        }\n      }\n    },\n    hasData: function (owner) {\n      var cache = owner[this.expando];\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\n    }\n  };\n  var dataPriv = new Data();\n  var dataUser = new Data(); //\tImplementation Summary\n  //\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n  //\t2. Improve the module\'s maintainability by reducing the storage\n  //\t\tpaths to a single mechanism.\n  //\t3. Use the same single mechanism to support "private" and "user" data.\n  //\t4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n      rmultiDash = /[A-Z]/g;\n\n  function getData(data) {\n    if (data === "true") {\n      return true;\n    }\n\n    if (data === "false") {\n      return false;\n    }\n\n    if (data === "null") {\n      return null;\n    } // Only convert to a number if it doesn\'t change the string\n\n\n    if (data === +data + "") {\n      return +data;\n    }\n\n    if (rbrace.test(data)) {\n      return JSON.parse(data);\n    }\n\n    return data;\n  }\n\n  function dataAttr(elem, key, data) {\n    var name; // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n\n    if (data === undefined && elem.nodeType === 1) {\n      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();\n      data = elem.getAttribute(name);\n\n      if (typeof data === "string") {\n        try {\n          data = getData(data);\n        } catch (e) {} // Make sure we set the data so it isn\'t changed later\n\n\n        dataUser.set(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n\n    return data;\n  }\n\n  jQuery.extend({\n    hasData: function (elem) {\n      return dataUser.hasData(elem) || dataPriv.hasData(elem);\n    },\n    data: function (elem, name, data) {\n      return dataUser.access(elem, name, data);\n    },\n    removeData: function (elem, name) {\n      dataUser.remove(elem, name);\n    },\n    // TODO: Now that all calls to _data and _removeData have been replaced\n    // with direct calls to dataPriv methods, these can be deprecated.\n    _data: function (elem, name, data) {\n      return dataPriv.access(elem, name, data);\n    },\n    _removeData: function (elem, name) {\n      dataPriv.remove(elem, name);\n    }\n  });\n  jQuery.fn.extend({\n    data: function (key, value) {\n      var i,\n          name,\n          data,\n          elem = this[0],\n          attrs = elem && elem.attributes; // Gets all values\n\n      if (key === undefined) {\n        if (this.length) {\n          data = dataUser.get(elem);\n\n          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {\n            i = attrs.length;\n\n            while (i--) {\n              // Support: IE 11 only\n              // The attrs elements can be null (#14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n\n                if (name.indexOf("data-") === 0) {\n                  name = camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n\n            dataPriv.set(elem, "hasDataAttrs", true);\n          }\n        }\n\n        return data;\n      } // Sets multiple values\n\n\n      if (typeof key === "object") {\n        return this.each(function () {\n          dataUser.set(this, key);\n        });\n      }\n\n      return access(this, function (value) {\n        var data; // The calling jQuery object (element matches) is not empty\n        // (and therefore has an element appears at this[ 0 ]) and the\n        // `value` parameter was not undefined. An empty jQuery object\n        // will result in `undefined` for elem = this[ 0 ] which will\n        // throw an exception if an attempt to read a data cache is made.\n\n        if (elem && value === undefined) {\n          // Attempt to get data from the cache\n          // The key will always be camelCased in Data\n          data = dataUser.get(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // Attempt to "discover" the data in\n          // HTML5 custom data-* attrs\n\n\n          data = dataAttr(elem, key);\n\n          if (data !== undefined) {\n            return data;\n          } // We tried really hard, but the data doesn\'t exist.\n\n\n          return;\n        } // Set the data...\n\n\n        this.each(function () {\n          // We always store the camelCased key\n          dataUser.set(this, key, value);\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function (key) {\n      return this.each(function () {\n        dataUser.remove(this, key);\n      });\n    }\n  });\n  jQuery.extend({\n    queue: function (elem, type, data) {\n      var queue;\n\n      if (elem) {\n        type = (type || "fx") + "queue";\n        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\n\n        if (data) {\n          if (!queue || Array.isArray(data)) {\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n\n        return queue || [];\n      }\n    },\n    dequeue: function (elem, type) {\n      type = type || "fx";\n\n      var queue = jQuery.queue(elem, type),\n          startLength = queue.length,\n          fn = queue.shift(),\n          hooks = jQuery._queueHooks(elem, type),\n          next = function () {\n        jQuery.dequeue(elem, type);\n      }; // If the fx queue is dequeued, always remove the progress sentinel\n\n\n      if (fn === "inprogress") {\n        fn = queue.shift();\n        startLength--;\n      }\n\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === "fx") {\n          queue.unshift("inprogress");\n        } // Clear up the last queue stop function\n\n\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // Not public - generate a queueHooks object, or return the current one\n    _queueHooks: function (elem, type) {\n      var key = type + "queueHooks";\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n        empty: jQuery.Callbacks("once memory").add(function () {\n          dataPriv.remove(elem, [type + "queue", key]);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function (type, data) {\n      var setter = 2;\n\n      if (typeof type !== "string") {\n        data = type;\n        type = "fx";\n        setter--;\n      }\n\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue\n\n        jQuery._queueHooks(this, type);\n\n        if (type === "fx" && queue[0] !== "inprogress") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function (type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function (type) {\n      return this.queue(type || "fx", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function (type, obj) {\n      var tmp,\n          count = 1,\n          defer = jQuery.Deferred(),\n          elements = this,\n          i = this.length,\n          resolve = function () {\n        if (! --count) {\n          defer.resolveWith(elements, [elements]);\n        }\n      };\n\n      if (typeof type !== "string") {\n        obj = type;\n        type = undefined;\n      }\n\n      type = type || "fx";\n\n      while (i--) {\n        tmp = dataPriv.get(elements[i], type + "queueHooks");\n\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  var pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");\n  var cssExpand = ["Top", "Right", "Bottom", "Left"];\n  var documentElement = document.documentElement;\n\n  var isAttached = function (elem) {\n    return jQuery.contains(elem.ownerDocument, elem);\n  },\n      composed = {\n    composed: true\n  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n  // Check attachment across shadow DOM boundaries when possible (gh-3504)\n  // Support: iOS 10.0-10.2 only\n  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n  // leading to errors. We need to check for `getRootNode`.\n\n\n  if (documentElement.getRootNode) {\n    isAttached = function (elem) {\n      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;\n    };\n  }\n\n  var isHiddenWithinTree = function (elem, el) {\n    // isHiddenWithinTree might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem; // Inline style trumps all\n\n    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style\n    // Support: Firefox <=43 - 45\n    // Disconnected elements can have computed display: none, so first confirm that elem is\n    // in the document.\n    isAttached(elem) && jQuery.css(elem, "display") === "none";\n  };\n\n  function adjustCSS(elem, prop, valueParts, tween) {\n    var adjusted,\n        scale,\n        maxIterations = 20,\n        currentValue = tween ? function () {\n      return tween.cur();\n    } : function () {\n      return jQuery.css(elem, prop, "");\n    },\n        initial = currentValue(),\n        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),\n        // Starting value computation is required for potential unit mismatches\n    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n    if (initialInUnit && initialInUnit[3] !== unit) {\n      // Support: Firefox <=54\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n      initial = initial / 2; // Trust units reported by jQuery.css\n\n      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point\n\n      initialInUnit = +initial || 1;\n\n      while (maxIterations--) {\n        // Evaluate and update our best guess (doubling guesses that zero out).\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n        jQuery.style(elem, prop, initialInUnit + unit);\n\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\n          maxIterations = 0;\n        }\n\n        initialInUnit = initialInUnit / scale;\n      }\n\n      initialInUnit = initialInUnit * 2;\n      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on\n\n      valueParts = valueParts || [];\n    }\n\n    if (valueParts) {\n      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified\n\n      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\n      if (tween) {\n        tween.unit = unit;\n        tween.start = initialInUnit;\n        tween.end = adjusted;\n      }\n    }\n\n    return adjusted;\n  }\n\n  var defaultDisplayMap = {};\n\n  function getDefaultDisplay(elem) {\n    var temp,\n        doc = elem.ownerDocument,\n        nodeName = elem.nodeName,\n        display = defaultDisplayMap[nodeName];\n\n    if (display) {\n      return display;\n    }\n\n    temp = doc.body.appendChild(doc.createElement(nodeName));\n    display = jQuery.css(temp, "display");\n    temp.parentNode.removeChild(temp);\n\n    if (display === "none") {\n      display = "block";\n    }\n\n    defaultDisplayMap[nodeName] = display;\n    return display;\n  }\n\n  function showHide(elements, show) {\n    var display,\n        elem,\n        values = [],\n        index = 0,\n        length = elements.length; // Determine new display value for elements that need to change\n\n    for (; index < length; index++) {\n      elem = elements[index];\n\n      if (!elem.style) {\n        continue;\n      }\n\n      display = elem.style.display;\n\n      if (show) {\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n        // check is required in this first loop unless we have a nonempty display value (either\n        // inline or about-to-be-restored)\n        if (display === "none") {\n          values[index] = dataPriv.get(elem, "display") || null;\n\n          if (!values[index]) {\n            elem.style.display = "";\n          }\n        }\n\n        if (elem.style.display === "" && isHiddenWithinTree(elem)) {\n          values[index] = getDefaultDisplay(elem);\n        }\n      } else {\n        if (display !== "none") {\n          values[index] = "none"; // Remember what we\'re overwriting\n\n          dataPriv.set(elem, "display", display);\n        }\n      }\n    } // Set the display of the elements in a second loop to avoid constant reflow\n\n\n    for (index = 0; index < length; index++) {\n      if (values[index] != null) {\n        elements[index].style.display = values[index];\n      }\n    }\n\n    return elements;\n  }\n\n  jQuery.fn.extend({\n    show: function () {\n      return showHide(this, true);\n    },\n    hide: function () {\n      return showHide(this);\n    },\n    toggle: function (state) {\n      if (typeof state === "boolean") {\n        return state ? this.show() : this.hide();\n      }\n\n      return this.each(function () {\n        if (isHiddenWithinTree(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n  var rcheckableType = /^(?:checkbox|radio)$/i;\n  var rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;\n  var rscriptType = /^$|^module$|\\/(?:java|ecma)script/i;\n\n  (function () {\n    var fragment = document.createDocumentFragment(),\n        div = fragment.appendChild(document.createElement("div")),\n        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only\n    // Check state lost if the name is set (#11217)\n    // Support: Windows Web Apps (WWA)\n    // `name` and `type` must use .setAttribute for WWA (#14901)\n\n    input.setAttribute("type", "radio");\n    input.setAttribute("checked", "checked");\n    input.setAttribute("name", "t");\n    div.appendChild(input); // Support: Android <=4.1 only\n    // Older WebKit doesn\'t clone checked state correctly in fragments\n\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\n\n    div.innerHTML = "<textarea>x</textarea>";\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only\n    // IE <=9 replaces <option> tags with their contents when inserted outside of\n    // the select element.\n\n    div.innerHTML = "<option></option>";\n    support.option = !!div.lastChild;\n  })(); // We have to close these tags to support XHTML (#13200)\n\n\n  var wrapMap = {\n    // XHTML parsers do not magically insert elements in the\n    // same way that tag soup parsers do. So we cannot shorten\n    // this by omitting <tbody> or other required elements.\n    thead: [1, "<table>", "</table>"],\n    col: [2, "<table><colgroup>", "</colgroup></table>"],\n    tr: [2, "<table><tbody>", "</tbody></table>"],\n    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],\n    _default: [0, "", ""]\n  };\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td; // Support: IE <=9 only\n\n  if (!support.option) {\n    wrapMap.optgroup = wrapMap.option = [1, "<select multiple=\'multiple\'>", "</select>"];\n  }\n\n  function getAll(context, tag) {\n    // Support: IE <=9 - 11 only\n    // Use typeof to avoid zero-argument method invocation on host objects (#15151)\n    var ret;\n\n    if (typeof context.getElementsByTagName !== "undefined") {\n      ret = context.getElementsByTagName(tag || "*");\n    } else if (typeof context.querySelectorAll !== "undefined") {\n      ret = context.querySelectorAll(tag || "*");\n    } else {\n      ret = [];\n    }\n\n    if (tag === undefined || tag && nodeName(context, tag)) {\n      return jQuery.merge([context], ret);\n    }\n\n    return ret;\n  } // Mark scripts as having already been evaluated\n\n\n  function setGlobalEval(elems, refElements) {\n    var i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));\n    }\n  }\n\n  var rhtml = /<|&#?\\w+;/;\n\n  function buildFragment(elems, context, scripts, selection, ignored) {\n    var elem,\n        tmp,\n        tag,\n        wrap,\n        attached,\n        j,\n        fragment = context.createDocumentFragment(),\n        nodes = [],\n        i = 0,\n        l = elems.length;\n\n    for (; i < l; i++) {\n      elem = elems[i];\n\n      if (elem || elem === 0) {\n        // Add nodes directly\n        if (toType(elem) === "object") {\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\n        } else if (!rhtml.test(elem)) {\n          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\n        } else {\n          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation\n\n          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();\n          wrap = wrapMap[tag] || wrapMap._default;\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content\n\n          j = wrap[0];\n\n          while (j--) {\n            tmp = tmp.lastChild;\n          } // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n\n\n          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container\n\n          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)\n\n          tmp.textContent = "";\n        }\n      }\n    } // Remove wrapper from fragment\n\n\n    fragment.textContent = "";\n    i = 0;\n\n    while (elem = nodes[i++]) {\n      // Skip elements already in the context collection (trac-4087)\n      if (selection && jQuery.inArray(elem, selection) > -1) {\n        if (ignored) {\n          ignored.push(elem);\n        }\n\n        continue;\n      }\n\n      attached = isAttached(elem); // Append to fragment\n\n      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history\n\n      if (attached) {\n        setGlobalEval(tmp);\n      } // Capture executables\n\n\n      if (scripts) {\n        j = 0;\n\n        while (elem = tmp[j++]) {\n          if (rscriptType.test(elem.type || "")) {\n            scripts.push(elem);\n          }\n        }\n      }\n    }\n\n    return fragment;\n  }\n\n  var rkeyEvent = /^key/,\n      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n      rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\n  function returnTrue() {\n    return true;\n  }\n\n  function returnFalse() {\n    return false;\n  } // Support: IE <=9 - 11+\n  // focus() and blur() are asynchronous, except when they are no-op.\n  // So expect focus to be synchronous when the element is already active,\n  // and blur to be synchronous when the element is not already active.\n  // (focus and blur are always synchronous in other supported browsers,\n  // this just defines when we can count on it).\n\n\n  function expectSync(elem, type) {\n    return elem === safeActiveElement() === (type === "focus");\n  } // Support: IE <=9 only\n  // Accessing document.activeElement can throw unexpectedly\n  // https://bugs.jquery.com/ticket/13393\n\n\n  function safeActiveElement() {\n    try {\n      return document.activeElement;\n    } catch (err) {}\n  }\n\n  function on(elem, types, selector, data, fn, one) {\n    var origFn, type; // Types can be a map of types/handlers\n\n    if (typeof types === "object") {\n      // ( types-Object, selector, data )\n      if (typeof selector !== "string") {\n        // ( types-Object, data )\n        data = data || selector;\n        selector = undefined;\n      }\n\n      for (type in types) {\n        on(elem, type, selector, data, types[type], one);\n      }\n\n      return elem;\n    }\n\n    if (data == null && fn == null) {\n      // ( types, fn )\n      fn = selector;\n      data = selector = undefined;\n    } else if (fn == null) {\n      if (typeof selector === "string") {\n        // ( types, selector, fn )\n        fn = data;\n        data = undefined;\n      } else {\n        // ( types, data, fn )\n        fn = data;\n        data = selector;\n        selector = undefined;\n      }\n    }\n\n    if (fn === false) {\n      fn = returnFalse;\n    } else if (!fn) {\n      return elem;\n    }\n\n    if (one === 1) {\n      origFn = fn;\n\n      fn = function (event) {\n        // Can use an empty set, since event contains the info\n        jQuery().off(event);\n        return origFn.apply(this, arguments);\n      }; // Use same guid so caller can remove using origFn\n\n\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n    }\n\n    return elem.each(function () {\n      jQuery.event.add(this, types, fn, data, selector);\n    });\n  }\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards\' addEvent library for many of the ideas.\n   */\n\n\n  jQuery.event = {\n    global: {},\n    add: function (elem, types, handler, data, selector) {\n      var handleObjIn,\n          eventHandle,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.get(elem); // Only attach events to objects that accept data\n\n      if (!acceptData(elem)) {\n        return;\n      } // Caller can pass in an object of custom data in lieu of the handler\n\n\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      } // Ensure that invalid selectors throw exceptions at attach time\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\n\n      if (selector) {\n        jQuery.find.matchesSelector(documentElement, selector);\n      } // Make sure that the handler has a unique ID, used to find/remove it later\n\n\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      } // Init the element\'s event structure and main handler, if this is the first\n\n\n      if (!(events = elemData.events)) {\n        events = elemData.events = Object.create(null);\n      }\n\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n        };\n      } // Handle multiple events separated by a space\n\n\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers\n\n        if (!type) {\n          continue;\n        } // If event changes its type, use the special event handlers for the changed type\n\n\n        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\n\n        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\n\n        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\n\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(".")\n        }, handleObjIn); // Init the event handler queue if we\'re the first\n\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false\n\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle);\n            }\n          }\n        }\n\n        if (special.add) {\n          special.add.call(elem, handleObj);\n\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        } // Add to the element\'s handler list, delegates in front\n\n\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        } // Keep track of which events have ever been used, for event optimization\n\n\n        jQuery.event.global[type] = true;\n      }\n    },\n    // Detach an event or set of events from an element\n    remove: function (elem, types, handler, selector, mappedTypes) {\n      var j,\n          origCount,\n          tmp,\n          events,\n          t,\n          handleObj,\n          special,\n          handlers,\n          type,\n          namespaces,\n          origType,\n          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      } // Once for each type.namespace in types; type may be omitted\n\n\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element\n\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n\n          continue;\n        }\n\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)"); // Remove matching events\n\n        origCount = j = handlers.length;\n\n        while (j--) {\n          handleObj = handlers[j];\n\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {\n            handlers.splice(j, 1);\n\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        } // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n\n\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n\n          delete events[type];\n        }\n      } // Remove data and the expando if it\'s no longer used\n\n\n      if (jQuery.isEmptyObject(events)) {\n        dataPriv.remove(elem, "handle events");\n      }\n    },\n    dispatch: function (nativeEvent) {\n      var i,\n          j,\n          ret,\n          matched,\n          handleObj,\n          handlerQueue,\n          args = new Array(arguments.length),\n          // Make a writable jQuery.Event from the native event object\n      event = jQuery.event.fix(nativeEvent),\n          handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],\n          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\n\n      args[0] = event;\n\n      for (i = 1; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n\n      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\n\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      } // Determine handlers\n\n\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\n\n      i = 0;\n\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // If the event is namespaced, then each handler is only invoked if it is\n          // specially universal or its namespaces are a superset of the event\'s.\n          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      } // Call the postDispatch hook for the mapped type\n\n\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n\n      return event.result;\n    },\n    handlers: function (event, handlers) {\n      var i,\n          handleObj,\n          sel,\n          matchedHandlers,\n          matchedSelectors,\n          handlerQueue = [],\n          delegateCount = handlers.delegateCount,\n          cur = event.target; // Find delegate handlers\n\n      if (delegateCount && // Support: IE <=9\n      // Black-hole SVG <use> instance trees (trac-13180)\n      cur.nodeType && // Support: Firefox <=42\n      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n      // Support: IE 11 only\n      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)\n      !(event.type === "click" && event.button >= 1)) {\n        for (; cur !== this; cur = cur.parentNode || this) {\n          // Don\'t check non-elements (#13208)\n          // Don\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\n          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {\n            matchedHandlers = [];\n            matchedSelectors = {};\n\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = handlers[i]; // Don\'t conflict with Object.prototype properties (#13203)\n\n              sel = handleObj.selector + " ";\n\n              if (matchedSelectors[sel] === undefined) {\n                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n              }\n\n              if (matchedSelectors[sel]) {\n                matchedHandlers.push(handleObj);\n              }\n            }\n\n            if (matchedHandlers.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matchedHandlers\n              });\n            }\n          }\n        }\n      } // Add the remaining (directly-bound) handlers\n\n\n      cur = this;\n\n      if (delegateCount < handlers.length) {\n        handlerQueue.push({\n          elem: cur,\n          handlers: handlers.slice(delegateCount)\n        });\n      }\n\n      return handlerQueue;\n    },\n    addProp: function (name, hook) {\n      Object.defineProperty(jQuery.Event.prototype, name, {\n        enumerable: true,\n        configurable: true,\n        get: isFunction(hook) ? function () {\n          if (this.originalEvent) {\n            return hook(this.originalEvent);\n          }\n        } : function () {\n          if (this.originalEvent) {\n            return this.originalEvent[name];\n          }\n        },\n        set: function (value) {\n          Object.defineProperty(this, name, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        }\n      });\n    },\n    fix: function (originalEvent) {\n      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      click: {\n        // Utilize native event to ensure correct state for checkable inputs\n        setup: function (data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Claim the first handler\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            // dataPriv.set( el, "click", ... )\n            leverageNative(el, "click", returnTrue);\n          } // Return false to allow normal processing in the caller\n\n\n          return false;\n        },\n        trigger: function (data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data; // Force setup before triggering a click\n\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            leverageNative(el, "click");\n          } // Return non-false to allow normal event-path propagation\n\n\n          return true;\n        },\n        // For cross-browser consistency, suppress native .click() on links\n        // Also prevent it if we\'re currently inside a leveraged native-event stack\n        _default: function (event) {\n          var target = event.target;\n          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");\n        }\n      },\n      beforeunload: {\n        postDispatch: function (event) {\n          // Support: Firefox 20+\n          // Firefox doesn\'t alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    }\n  }; // Ensure the presence of an event listener that handles manually-triggered\n  // synthetic events by interrupting progress until reinvoked in response to\n  // *native* events that it fires directly, ensuring that state changes have\n  // already occurred before other listeners are invoked.\n\n  function leverageNative(el, type, expectSync) {\n    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n    if (!expectSync) {\n      if (dataPriv.get(el, type) === undefined) {\n        jQuery.event.add(el, type, returnTrue);\n      }\n\n      return;\n    } // Register the controller as a special universal handler for all event namespaces\n\n\n    dataPriv.set(el, type, false);\n    jQuery.event.add(el, type, {\n      namespace: false,\n      handler: function (event) {\n        var notAsync,\n            result,\n            saved = dataPriv.get(this, type);\n\n        if (event.isTrigger & 1 && this[type]) {\n          // Interrupt processing of the outer synthetic .trigger()ed event\n          // Saved data should be false in such cases, but might be a leftover capture object\n          // from an async native handler (gh-4350)\n          if (!saved.length) {\n            // Store arguments for use when handling the inner native event\n            // There will always be at least one argument (an event object), so this array\n            // will not be confused with a leftover capture object.\n            saved = slice.call(arguments);\n            dataPriv.set(this, type, saved); // Trigger the native event and capture its result\n            // Support: IE <=9 - 11+\n            // focus() and blur() are asynchronous\n\n            notAsync = expectSync(this, type);\n            this[type]();\n            result = dataPriv.get(this, type);\n\n            if (saved !== result || notAsync) {\n              dataPriv.set(this, type, false);\n            } else {\n              result = {};\n            }\n\n            if (saved !== result) {\n              // Cancel the outer synthetic event\n              event.stopImmediatePropagation();\n              event.preventDefault();\n              return result.value;\n            } // If this is an inner synthetic event for an event with a bubbling surrogate\n            // (focus or blur), assume that the surrogate already propagated from triggering the\n            // native event and prevent that from happening again here.\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\n            // less bad than duplication.\n\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\n            event.stopPropagation();\n          } // If this is a native event triggered above, everything is now in order\n          // Fire an inner synthetic event with the original arguments\n\n        } else if (saved.length) {\n          // ...and capture the result\n          dataPriv.set(this, type, {\n            value: jQuery.event.trigger( // Support: IE <=9 - 11+\n            // Extend with the prototype to reset the above stopImmediatePropagation()\n            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)\n          }); // Abort handling of the native event\n\n          event.stopImmediatePropagation();\n        }\n      }\n    });\n  }\n\n  jQuery.removeEvent = function (elem, type, handle) {\n    // This "if" is needed for plain objects\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle);\n    }\n  };\n\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the \'new\' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    } // Event object\n\n\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type; // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only\n      src.returnValue === false ? returnTrue : returnFalse; // Create target properties\n      // Support: Safari <=6 - 7 only\n      // Target should not be a text node (#504, #13143)\n\n      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n      this.currentTarget = src.currentTarget;\n      this.relatedTarget = src.relatedTarget; // Event type\n    } else {\n      this.type = src;\n    } // Put explicitly provided properties onto the event object\n\n\n    if (props) {\n      jQuery.extend(this, props);\n    } // Create a timestamp if incoming event doesn\'t have one\n\n\n    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed\n\n    this[jQuery.expando] = true;\n  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n  jQuery.Event.prototype = {\n    constructor: jQuery.Event,\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    isSimulated: false,\n    preventDefault: function () {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function () {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function () {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = returnTrue;\n\n      if (e && !this.isSimulated) {\n        e.stopImmediatePropagation();\n      }\n\n      this.stopPropagation();\n    }\n  }; // Includes all common event props including KeyEvent and MouseEvent specific props\n\n  jQuery.each({\n    altKey: true,\n    bubbles: true,\n    cancelable: true,\n    changedTouches: true,\n    ctrlKey: true,\n    detail: true,\n    eventPhase: true,\n    metaKey: true,\n    pageX: true,\n    pageY: true,\n    shiftKey: true,\n    view: true,\n    "char": true,\n    code: true,\n    charCode: true,\n    key: true,\n    keyCode: true,\n    button: true,\n    buttons: true,\n    clientX: true,\n    clientY: true,\n    offsetX: true,\n    offsetY: true,\n    pointerId: true,\n    pointerType: true,\n    screenX: true,\n    screenY: true,\n    targetTouches: true,\n    toElement: true,\n    touches: true,\n    which: function (event) {\n      var button = event.button; // Add which for key events\n\n      if (event.which == null && rkeyEvent.test(event.type)) {\n        return event.charCode != null ? event.charCode : event.keyCode;\n      } // Add which for click: 1 === left; 2 === middle; 3 === right\n\n\n      if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {\n        if (button & 1) {\n          return 1;\n        }\n\n        if (button & 2) {\n          return 3;\n        }\n\n        if (button & 4) {\n          return 2;\n        }\n\n        return 0;\n      }\n\n      return event.which;\n    }\n  }, jQuery.event.addProp);\n  jQuery.each({\n    focus: "focusin",\n    blur: "focusout"\n  }, function (type, delegateType) {\n    jQuery.event.special[type] = {\n      // Utilize native event if possible so blur/focus sequence is correct\n      setup: function () {\n        // Claim the first handler\n        // dataPriv.set( this, "focus", ... )\n        // dataPriv.set( this, "blur", ... )\n        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller\n\n        return false;\n      },\n      trigger: function () {\n        // Force setup before trigger\n        leverageNative(this, type); // Return non-false to allow normal event-path propagation\n\n        return true;\n      },\n      delegateType: delegateType\n    };\n  }); // Create mouseenter/leave events using mouseover/out and event-time checks\n  // so that event delegation works in jQuery.\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\n  //\n  // Support: Safari 7 only\n  // Safari sends mouseenter too often; see:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n  // for the description of the bug (it existed in older Chrome versions as well).\n\n  jQuery.each({\n    mouseenter: "mouseover",\n    mouseleave: "mouseout",\n    pointerenter: "pointerover",\n    pointerleave: "pointerout"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function (event) {\n        var ret,\n            target = this,\n            related = event.relatedTarget,\n            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n\n        return ret;\n      }\n    };\n  });\n  jQuery.fn.extend({\n    on: function (types, selector, data, fn) {\n      return on(this, types, selector, data, fn);\n    },\n    one: function (types, selector, data, fn) {\n      return on(this, types, selector, data, fn, 1);\n    },\n    off: function (types, selector, fn) {\n      var handleObj, type;\n\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n\n      if (typeof types === "object") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n\n        return this;\n      }\n\n      if (selector === false || typeof selector === "function") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n\n      if (fn === false) {\n        fn = returnFalse;\n      }\n\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    }\n  });\n  var // Support: IE <=10 - 11, Edge 12 - 13 only\n  // In IE/Edge using regex groups here causes severe slowdowns.\n  // See https://connect.microsoft.com/IE/feedback/details/1736512/\n  rnoInnerhtml = /<script|<style|<link/i,\n      // checked="checked" or checked\n  rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n      rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g; // Prefer a tbody over its parent table for containing new rows\n\n  function manipulationTarget(elem, content) {\n    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {\n      return jQuery(elem).children("tbody")[0] || elem;\n    }\n\n    return elem;\n  } // Replace/restore the type attribute of script elements for safe DOM manipulation\n\n\n  function disableScript(elem) {\n    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;\n    return elem;\n  }\n\n  function restoreScript(elem) {\n    if ((elem.type || "").slice(0, 5) === "true/") {\n      elem.type = elem.type.slice(5);\n    } else {\n      elem.removeAttribute("type");\n    }\n\n    return elem;\n  }\n\n  function cloneCopyEvent(src, dest) {\n    var i, l, type, pdataOld, udataOld, udataCur, events;\n\n    if (dest.nodeType !== 1) {\n      return;\n    } // 1. Copy private data: events, handlers, etc.\n\n\n    if (dataPriv.hasData(src)) {\n      pdataOld = dataPriv.get(src);\n      events = pdataOld.events;\n\n      if (events) {\n        dataPriv.remove(dest, "handle events");\n\n        for (type in events) {\n          for (i = 0, l = events[type].length; i < l; i++) {\n            jQuery.event.add(dest, type, events[type][i]);\n          }\n        }\n      }\n    } // 2. Copy user data\n\n\n    if (dataUser.hasData(src)) {\n      udataOld = dataUser.access(src);\n      udataCur = jQuery.extend({}, udataOld);\n      dataUser.set(dest, udataCur);\n    }\n  } // Fix IE bugs, see support tests\n\n\n  function fixInput(src, dest) {\n    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.\n\n    if (nodeName === "input" && rcheckableType.test(src.type)) {\n      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options\n    } else if (nodeName === "input" || nodeName === "textarea") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n\n  function domManip(collection, args, callback, ignored) {\n    // Flatten any nested arrays\n    args = flat(args);\n    var fragment,\n        first,\n        scripts,\n        hasScripts,\n        node,\n        doc,\n        i = 0,\n        l = collection.length,\n        iNoClone = l - 1,\n        value = args[0],\n        valueIsFunction = isFunction(value); // We can\'t cloneNode fragments that contain checked, in WebKit\n\n    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {\n      return collection.each(function (index) {\n        var self = collection.eq(index);\n\n        if (valueIsFunction) {\n          args[0] = value.call(this, index, self.html());\n        }\n\n        domManip(self, args, callback, ignored);\n      });\n    }\n\n    if (l) {\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n      first = fragment.firstChild;\n\n      if (fragment.childNodes.length === 1) {\n        fragment = first;\n      } // Require either new content or an interest in ignored elements to invoke the callback\n\n\n      if (first || ignored) {\n        scripts = jQuery.map(getAll(fragment, "script"), disableScript);\n        hasScripts = scripts.length; // Use the original fragment for the last item\n        // instead of the first because it can end up\n        // being emptied incorrectly in certain situations (#8070).\n\n        for (; i < l; i++) {\n          node = fragment;\n\n          if (i !== iNoClone) {\n            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\n\n            if (hasScripts) {\n              // Support: Android <=4.0 only, PhantomJS 1 only\n              // push.apply(_, arraylike) throws on ancient WebKit\n              jQuery.merge(scripts, getAll(node, "script"));\n            }\n          }\n\n          callback.call(collection[i], node, i);\n        }\n\n        if (hasScripts) {\n          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\n\n          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\n\n          for (i = 0; i < hasScripts; i++) {\n            node = scripts[i];\n\n            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {\n              if (node.src && (node.type || "").toLowerCase() !== "module") {\n                // Optional AJAX dependency, but won\'t run scripts if not present\n                if (jQuery._evalUrl && !node.noModule) {\n                  jQuery._evalUrl(node.src, {\n                    nonce: node.nonce || node.getAttribute("nonce")\n                  }, doc);\n                }\n              } else {\n                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return collection;\n  }\n\n  function remove(elem, selector, keepData) {\n    var node,\n        nodes = selector ? jQuery.filter(selector, elem) : elem,\n        i = 0;\n\n    for (; (node = nodes[i]) != null; i++) {\n      if (!keepData && node.nodeType === 1) {\n        jQuery.cleanData(getAll(node));\n      }\n\n      if (node.parentNode) {\n        if (keepData && isAttached(node)) {\n          setGlobalEval(getAll(node, "script"));\n        }\n\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    return elem;\n  }\n\n  jQuery.extend({\n    htmlPrefilter: function (html) {\n      return html;\n    },\n    clone: function (elem, dataAndEvents, deepDataAndEvents) {\n      var i,\n          l,\n          srcElements,\n          destElements,\n          clone = elem.cloneNode(true),\n          inPage = isAttached(elem); // Fix IE cloning issues\n\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem);\n\n        for (i = 0, l = srcElements.length; i < l; i++) {\n          fixInput(srcElements[i], destElements[i]);\n        }\n      } // Copy the events from the original to the clone\n\n\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n\n          for (i = 0, l = srcElements.length; i < l; i++) {\n            cloneCopyEvent(srcElements[i], destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      } // Preserve script evaluation history\n\n\n      destElements = getAll(clone, "script");\n\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, "script"));\n      } // Return the cloned set\n\n\n      return clone;\n    },\n    cleanData: function (elems) {\n      var data,\n          elem,\n          type,\n          special = jQuery.event.special,\n          i = 0;\n\n      for (; (elem = elems[i]) !== undefined; i++) {\n        if (acceptData(elem)) {\n          if (data = elem[dataPriv.expando]) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove\'s overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            } // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n\n\n            elem[dataPriv.expando] = undefined;\n          }\n\n          if (elem[dataUser.expando]) {\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataUser.expando] = undefined;\n          }\n        }\n      }\n    }\n  });\n  jQuery.fn.extend({\n    detach: function (selector) {\n      return remove(this, selector, true);\n    },\n    remove: function (selector) {\n      return remove(this, selector);\n    },\n    text: function (value) {\n      return access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n          }\n        });\n      }, null, value, arguments.length);\n    },\n    append: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.appendChild(elem);\n        }\n      });\n    },\n    prepend: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.insertBefore(elem, target.firstChild);\n        }\n      });\n    },\n    before: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function () {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    empty: function () {\n      var elem,\n          i = 0;\n\n      for (; (elem = this[i]) != null; i++) {\n        if (elem.nodeType === 1) {\n          // Prevent memory leaks\n          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes\n\n          elem.textContent = "";\n        }\n      }\n\n      return this;\n    },\n    clone: function (dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function (value) {\n      return access(this, function (value) {\n        var elem = this[0] || {},\n            i = 0,\n            l = this.length;\n\n        if (value === undefined && elem.nodeType === 1) {\n          return elem.innerHTML;\n        } // See if we can take a shortcut and just use innerHTML\n\n\n        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {\n          value = jQuery.htmlPrefilter(value);\n\n          try {\n            for (; i < l; i++) {\n              elem = this[i] || {}; // Remove element nodes and prevent memory leaks\n\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n\n            elem = 0; // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function () {\n      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content\n\n      return domManip(this, arguments, function (elem) {\n        var parent = this.parentNode;\n\n        if (jQuery.inArray(this, ignored) < 0) {\n          jQuery.cleanData(getAll(this));\n\n          if (parent) {\n            parent.replaceChild(elem, this);\n          }\n        } // Force callback invocation\n\n      }, ignored);\n    }\n  });\n  jQuery.each({\n    appendTo: "append",\n    prependTo: "prepend",\n    insertBefore: "before",\n    insertAfter: "after",\n    replaceAll: "replaceWith"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n          ret = [],\n          insert = jQuery(selector),\n          last = insert.length - 1,\n          i = 0;\n\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\n\n        push.apply(ret, elems.get());\n      }\n\n      return this.pushStack(ret);\n    };\n  });\n  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");\n\n  var getStyles = function (elem) {\n    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n    // IE throws on elements created in popups\n    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"\n    var view = elem.ownerDocument.defaultView;\n\n    if (!view || !view.opener) {\n      view = window;\n    }\n\n    return view.getComputedStyle(elem);\n  };\n\n  var swap = function (elem, options, callback) {\n    var ret,\n        name,\n        old = {}; // Remember the old values, and insert the new ones\n\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n\n    ret = callback.call(elem); // Revert the old values\n\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n\n    return ret;\n  };\n\n  var rboxStyle = new RegExp(cssExpand.join("|"), "i");\n\n  (function () {\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\n    // so they\'re executed at the same time to save the second computation.\n    function computeStyleTests() {\n      // This is a singleton, we need to execute it only once\n      if (!div) {\n        return;\n      }\n\n      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";\n      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";\n      documentElement.appendChild(container).appendChild(div);\n      var divStyle = window.getComputedStyle(div);\n      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n      // Some styles come back with percentage values, even though they shouldn\'t\n\n      div.style.right = "60%";\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\n\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only\n      // Detect overflow:scroll screwiness (gh-3699)\n      // Support: Chrome <=64\n      // Don\'t get tricked when zoom affects offsetWidth (gh-4029)\n\n      div.style.position = "absolute";\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;\n      documentElement.removeChild(container); // Nullify the div so it wouldn\'t be stored in the memory and\n      // it will also be a sign that checks already performed\n\n      div = null;\n    }\n\n    function roundPixelMeasures(measure) {\n      return Math.round(parseFloat(measure));\n    }\n\n    var pixelPositionVal,\n        boxSizingReliableVal,\n        scrollboxSizeVal,\n        pixelBoxStylesVal,\n        reliableTrDimensionsVal,\n        reliableMarginLeftVal,\n        container = document.createElement("div"),\n        div = document.createElement("div"); // Finish early in limited (non-browser) environments\n\n    if (!div.style) {\n      return;\n    } // Support: IE <=9 - 11 only\n    // Style of cloned element affects source element cloned (#8908)\n\n\n    div.style.backgroundClip = "content-box";\n    div.cloneNode(true).style.backgroundClip = "";\n    support.clearCloneStyle = div.style.backgroundClip === "content-box";\n    jQuery.extend(support, {\n      boxSizingReliable: function () {\n        computeStyleTests();\n        return boxSizingReliableVal;\n      },\n      pixelBoxStyles: function () {\n        computeStyleTests();\n        return pixelBoxStylesVal;\n      },\n      pixelPosition: function () {\n        computeStyleTests();\n        return pixelPositionVal;\n      },\n      reliableMarginLeft: function () {\n        computeStyleTests();\n        return reliableMarginLeftVal;\n      },\n      scrollboxSize: function () {\n        computeStyleTests();\n        return scrollboxSizeVal;\n      },\n      // Support: IE 9 - 11+, Edge 15 - 18+\n      // IE/Edge misreport `getComputedStyle` of table rows with width/height\n      // set in CSS while `offset*` properties report correct values.\n      // Behavior in IE 9 is more subtle than in newer versions & it passes\n      // some versions of this test; make sure not to make it pass there!\n      reliableTrDimensions: function () {\n        var table, tr, trChild, trStyle;\n\n        if (reliableTrDimensionsVal == null) {\n          table = document.createElement("table");\n          tr = document.createElement("tr");\n          trChild = document.createElement("div");\n          table.style.cssText = "position:absolute;left:-11111px";\n          tr.style.height = "1px";\n          trChild.style.height = "9px";\n          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);\n          trStyle = window.getComputedStyle(tr);\n          reliableTrDimensionsVal = parseInt(trStyle.height) > 3;\n          documentElement.removeChild(table);\n        }\n\n        return reliableTrDimensionsVal;\n      }\n    });\n  })();\n\n  function curCSS(elem, name, computed) {\n    var width,\n        minWidth,\n        maxWidth,\n        ret,\n        // Support: Firefox 51+\n    // Retrieving style before computed somehow\n    // fixes an issue with getting wrong values\n    // on detached elements\n    style = elem.style;\n    computed = computed || getStyles(elem); // getPropertyValue is needed for:\n    //   .css(\'filter\') (IE 9 only, #12537)\n    //   .css(\'--customProperty) (#3144)\n\n    if (computed) {\n      ret = computed.getPropertyValue(name) || computed[name];\n\n      if (ret === "" && !isAttached(elem)) {\n        ret = jQuery.style(elem, name);\n      } // A tribute to the "awesome hack by Dean Edwards"\n      // Android Browser returns percentage for some values,\n      // but width seems to be reliably pixels.\n      // This is against the CSSOM draft spec:\n      // https://drafts.csswg.org/cssom/#resolved-values\n\n\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth; // Put in the new values to get a computed value out\n\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width; // Revert the changed values\n\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n\n    return ret !== undefined ? // Support: IE <=9 - 11 only\n    // IE returns zIndex value as an integer.\n    ret + "" : ret;\n  }\n\n  function addGetHookIf(conditionFn, hookFn) {\n    // Define the hook, we\'ll check on the first run if it\'s really needed.\n    return {\n      get: function () {\n        if (conditionFn()) {\n          // Hook not needed (or it\'s not possible to use it due\n          // to missing dependency), remove it.\n          delete this.get;\n          return;\n        } // Hook needed; redefine it so that the support test is not executed again.\n\n\n        return (this.get = hookFn).apply(this, arguments);\n      }\n    };\n  }\n\n  var cssPrefixes = ["Webkit", "Moz", "ms"],\n      emptyStyle = document.createElement("div").style,\n      vendorProps = {}; // Return a vendor-prefixed property or undefined\n\n  function vendorPropName(name) {\n    // Check for vendor prefixed names\n    var capName = name[0].toUpperCase() + name.slice(1),\n        i = cssPrefixes.length;\n\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n\n      if (name in emptyStyle) {\n        return name;\n      }\n    }\n  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\n\n\n  function finalPropName(name) {\n    var final = jQuery.cssProps[name] || vendorProps[name];\n\n    if (final) {\n      return final;\n    }\n\n    if (name in emptyStyle) {\n      return name;\n    }\n\n    return vendorProps[name] = vendorPropName(name) || name;\n  }\n\n  var // Swappable if display is none or starts with table\n  // except "table", "table-cell", or "table-caption"\n  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n  rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n      rcustomProp = /^--/,\n      cssShow = {\n    position: "absolute",\n    visibility: "hidden",\n    display: "block"\n  },\n      cssNormalTransform = {\n    letterSpacing: "0",\n    fontWeight: "400"\n  };\n\n  function setPositiveNumber(_elem, value, subtract) {\n    // Any relative (+/-) values have already been\n    // normalized at this point\n    var matches = rcssNum.exec(value);\n    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks\n    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;\n  }\n\n  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\n    var i = dimension === "width" ? 1 : 0,\n        extra = 0,\n        delta = 0; // Adjustment may not be necessary\n\n    if (box === (isBorderBox ? "border" : "content")) {\n      return 0;\n    }\n\n    for (; i < 4; i += 2) {\n      // Both box models exclude margin\n      if (box === "margin") {\n        delta += jQuery.css(elem, box + cssExpand[i], true, styles);\n      } // If we get here with a content-box, we\'re seeking "padding" or "border" or "margin"\n\n\n      if (!isBorderBox) {\n        // Add padding\n        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border\n\n        if (box !== "padding") {\n          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise\n        } else {\n          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        } // If we get here with a border-box (content + padding + border), we\'re seeking "content" or\n        // "padding" or "margin"\n\n      } else {\n        // For "content", subtract padding\n        if (box === "content") {\n          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);\n        } // For "content" or "padding", subtract border\n\n\n        if (box !== "margin") {\n          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        }\n      }\n    } // Account for positive content-box scroll gutter when requested by providing computedVal\n\n\n    if (!isBorderBox && computedVal >= 0) {\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n      // Assuming integer scroll gutter, subtract the rest and round down\n      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can\'t determine content-box scroll gutter\n      // Use an explicit zero to avoid NaN (gh-3964)\n      )) || 0;\n    }\n\n    return delta;\n  }\n\n  function getWidthOrHeight(elem, dimension, extra) {\n    // Start with computed style\n    var styles = getStyles(elem),\n        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n    // Fake content-box until we know it\'s needed to know the true value.\n    boxSizingNeeded = !support.boxSizingReliable() || extra,\n        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n        valueIsBorderBox = isBorderBox,\n        val = curCSS(elem, dimension, styles),\n        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\n\n    if (rnumnonpx.test(val)) {\n      if (!extra) {\n        return val;\n      }\n\n      val = "auto";\n    } // Support: IE 9 - 11 only\n    // Use offsetWidth/offsetHeight for when box sizing is unreliable.\n    // In those cases, the computed value can be trusted to be border-box.\n\n\n    if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+\n    // IE/Edge misreport `getComputedStyle` of table rows with width/height\n    // set in CSS while `offset*` properties report correct values.\n    // Interestingly, in some cases IE 9 doesn\'t suffer from this issue.\n    !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"\n    // This happens for inline elements with no explicit setting (gh-3571)\n    val === "auto" || // Support: Android <=4.1 - 4.3 only\n    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n    !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected\n    elem.getClientRects().length) {\n      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n      // retrieved value as a content box dimension.\n\n      valueIsBorderBox = offsetProp in elem;\n\n      if (valueIsBorderBox) {\n        val = elem[offsetProp];\n      }\n    } // Normalize "" and auto\n\n\n    val = parseFloat(val) || 0; // Adjust for the element\'s box model\n\n    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)\n    val) + "px";\n  }\n\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function (elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, "opacity");\n            return ret === "" ? "1" : ret;\n          }\n        }\n      }\n    },\n    // Don\'t automatically add "px" to these possibly-unitless properties\n    cssNumber: {\n      "animationIterationCount": true,\n      "columnCount": true,\n      "fillOpacity": true,\n      "flexGrow": true,\n      "flexShrink": true,\n      "fontWeight": true,\n      "gridArea": true,\n      "gridColumn": true,\n      "gridColumnEnd": true,\n      "gridColumnStart": true,\n      "gridRow": true,\n      "gridRowEnd": true,\n      "gridRowStart": true,\n      "lineHeight": true,\n      "opacity": true,\n      "order": true,\n      "orphans": true,\n      "widows": true,\n      "zIndex": true,\n      "zoom": true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {},\n    // Get and set the style property on a DOM Node\n    style: function (elem, name, value, extra) {\n      // Don\'t set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      } // Make sure that we\'re working with the right name\n\n\n      var ret,\n          type,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name),\n          style = elem.style; // Make sure that we\'re working with the right name. We don\'t\n      // want to query the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Gets hook for the prefixed version, then unprefixed version\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we\'re setting a value\n\n      if (value !== undefined) {\n        type = typeof value; // Convert "+=" or "-=" to relative numbers (#7345)\n\n        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {\n          value = adjustCSS(elem, name, ret); // Fixes bug #9237\n\n          type = "number";\n        } // Make sure that null and NaN values aren\'t set (#7116)\n\n\n        if (value == null || value !== value) {\n          return;\n        } // If a number was passed in, add the unit (except for certain CSS properties)\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n        // "px" to a few hardcoded values.\n\n\n        if (type === "number" && !isCustomProp) {\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");\n        } // background-* props affect original clone\'s values\n\n\n        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {\n          style[name] = "inherit";\n        } // If a hook was provided, use that value, otherwise just set the specified value\n\n\n        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          if (isCustomProp) {\n            style.setProperty(name, value);\n          } else {\n            style[name] = value;\n          }\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        } // Otherwise just get the value from the style object\n\n\n        return style[name];\n      }\n    },\n    css: function (elem, name, extra, styles) {\n      var val,\n          num,\n          hooks,\n          origName = camelCase(name),\n          isCustomProp = rcustomProp.test(name); // Make sure that we\'re working with the right name. We don\'t\n      // want to modify the value if it is a CSS custom property\n      // since they are user-defined.\n\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      } // Try prefixed name followed by the unprefixed name\n\n\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\n\n      if (hooks && "get" in hooks) {\n        val = hooks.get(elem, true, extra);\n      } // Otherwise, if a way to get the computed value exists, use that\n\n\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      } // Convert "normal" to computed value\n\n\n      if (val === "normal" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      } // Make numeric if forced or a qualifier was provided and val looks numeric\n\n\n      if (extra === "" || extra) {\n        num = parseFloat(val);\n        return extra === true || isFinite(num) ? num || 0 : val;\n      }\n\n      return val;\n    }\n  });\n  jQuery.each(["height", "width"], function (_i, dimension) {\n    jQuery.cssHooks[dimension] = {\n      get: function (elem, computed, extra) {\n        if (computed) {\n          // Certain elements can have dimension info if we invisibly show them\n          // but it must have a current display style that would benefit\n          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+\n          // Table columns in Safari have non-zero offsetWidth & zero\n          // getBoundingClientRect().width unless display is changed.\n          // Support: IE <=11 only\n          // Running getBoundingClientRect on a disconnected node\n          // in IE throws an error.\n          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, dimension, extra);\n          }) : getWidthOrHeight(elem, dimension, extra);\n        }\n      },\n      set: function (elem, value, extra) {\n        var matches,\n            styles = getStyles(elem),\n            // Only read styles.position if the test has a chance to fail\n        // to avoid forcing a reflow.\n        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",\n            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n        boxSizingNeeded = scrollboxSizeBuggy || extra,\n            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and\n        // faking a content-box to get border and padding (gh-3699)\n\n        if (isBorderBox && scrollboxSizeBuggy) {\n          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);\n        } // Convert to pixels if value adjustment is needed\n\n\n        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {\n          elem.style[dimension] = value;\n          value = jQuery.css(elem, dimension);\n        }\n\n        return setPositiveNumber(elem, value, subtract);\n      }\n    };\n  });\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n    if (computed) {\n      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {\n        marginLeft: 0\n      }, function () {\n        return elem.getBoundingClientRect().left;\n      })) + "px";\n    }\n  }); // These hooks are used by animate to expand properties\n\n  jQuery.each({\n    margin: "",\n    padding: "",\n    border: "Width"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function (value) {\n        var i = 0,\n            expanded = {},\n            // Assumes a single number if not a string\n        parts = typeof value === "string" ? value.split(" ") : [value];\n\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n\n        return expanded;\n      }\n    };\n\n    if (prefix !== "margin") {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  jQuery.fn.extend({\n    css: function (name, value) {\n      return access(this, function (elem, name, value) {\n        var styles,\n            len,\n            map = {},\n            i = 0;\n\n        if (Array.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n\n          return map;\n        }\n\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    }\n  });\n\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function (elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || jQuery.easing._default;\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");\n    },\n    cur: function () {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function (percent) {\n      var eased,\n          hooks = Tween.propHooks[this.prop];\n\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n\n      this.now = (this.end - this.start) * eased + this.start;\n\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function (tween) {\n        var result; // Use a property on the element directly when it is not a DOM element,\n        // or when there is no matching style property that exists.\n\n        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n          return tween.elem[tween.prop];\n        } // Passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails.\n        // Simple values such as "10px" are parsed to Float;\n        // complex values such as "rotate(1rad)" are returned as-is.\n\n\n        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.\n\n        return !result || result === "auto" ? 0 : result;\n      },\n      set: function (tween) {\n        // Use step hook for back compat.\n        // Use cssHook if its there.\n        // Use .style if available and use plain properties where available.\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  }; // Support: IE <=9 only\n  // Panic based approach to setting things on disconnected nodes\n\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function (tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.easing = {\n    linear: function (p) {\n      return p;\n    },\n    swing: function (p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    },\n    _default: "swing"\n  };\n  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point\n\n  jQuery.fx.step = {};\n  var fxNow,\n      inProgress,\n      rfxtypes = /^(?:toggle|show|hide)$/,\n      rrun = /queueHooks$/;\n\n  function schedule() {\n    if (inProgress) {\n      if (document.hidden === false && window.requestAnimationFrame) {\n        window.requestAnimationFrame(schedule);\n      } else {\n        window.setTimeout(schedule, jQuery.fx.interval);\n      }\n\n      jQuery.fx.tick();\n    }\n  } // Animations created synchronously will run synchronously\n\n\n  function createFxNow() {\n    window.setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = Date.now();\n  } // Generate parameters to create a standard animation\n\n\n  function genFx(type, includeWidth) {\n    var which,\n        i = 0,\n        attrs = {\n      height: type\n    }; // If we include width, step value is 1 to do all cssExpand values,\n    // otherwise step value is 2 to skip over Left and Right\n\n    includeWidth = includeWidth ? 1 : 0;\n\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs["margin" + which] = attrs["padding" + which] = type;\n    }\n\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n\n    return attrs;\n  }\n\n  function createTween(value, prop, animation) {\n    var tween,\n        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),\n        index = 0,\n        length = collection.length;\n\n    for (; index < length; index++) {\n      if (tween = collection[index].call(animation, prop, value)) {\n        // We\'re done with this property\n        return tween;\n      }\n    }\n  }\n\n  function defaultPrefilter(elem, props, opts) {\n    var prop,\n        value,\n        toggle,\n        hooks,\n        oldfire,\n        propTween,\n        restoreDisplay,\n        display,\n        isBox = "width" in props || "height" in props,\n        anim = this,\n        orig = {},\n        style = elem.style,\n        hidden = elem.nodeType && isHiddenWithinTree(elem),\n        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks\n\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, "fx");\n\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n\n      hooks.unqueued++;\n      anim.always(function () {\n        // Ensure the complete handler is called before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n\n          if (!jQuery.queue(elem, "fx").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    } // Detect show/hide animations\n\n\n    for (prop in props) {\n      value = props[prop];\n\n      if (rfxtypes.test(value)) {\n        delete props[prop];\n        toggle = toggle || value === "toggle";\n\n        if (value === (hidden ? "hide" : "show")) {\n          // Pretend to be hidden if this is a "show" and\n          // there is still data from a stopped show/hide\n          if (value === "show" && dataShow && dataShow[prop] !== undefined) {\n            hidden = true; // Ignore all other no-op show/hide data\n          } else {\n            continue;\n          }\n        }\n\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n      }\n    } // Bail out if this is a no-op like .hide().hide()\n\n\n    propTween = !jQuery.isEmptyObject(props);\n\n    if (!propTween && jQuery.isEmptyObject(orig)) {\n      return;\n    } // Restrict "overflow" and "display" styles during box animations\n\n\n    if (isBox && elem.nodeType === 1) {\n      // Support: IE <=9 - 11, Edge 12 - 15\n      // Record all 3 overflow attributes because IE does not infer the shorthand\n      // from identically-valued overflowX and overflowY and Edge just mirrors\n      // the overflowX value there.\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade\n\n      restoreDisplay = dataShow && dataShow.display;\n\n      if (restoreDisplay == null) {\n        restoreDisplay = dataPriv.get(elem, "display");\n      }\n\n      display = jQuery.css(elem, "display");\n\n      if (display === "none") {\n        if (restoreDisplay) {\n          display = restoreDisplay;\n        } else {\n          // Get nonempty value(s) by temporarily forcing visibility\n          showHide([elem], true);\n          restoreDisplay = elem.style.display || restoreDisplay;\n          display = jQuery.css(elem, "display");\n          showHide([elem]);\n        }\n      } // Animate inline elements as inline-block\n\n\n      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {\n        if (jQuery.css(elem, "float") === "none") {\n          // Restore the original display value at the end of pure show/hide animations\n          if (!propTween) {\n            anim.done(function () {\n              style.display = restoreDisplay;\n            });\n\n            if (restoreDisplay == null) {\n              display = style.display;\n              restoreDisplay = display === "none" ? "" : display;\n            }\n          }\n\n          style.display = "inline-block";\n        }\n      }\n    }\n\n    if (opts.overflow) {\n      style.overflow = "hidden";\n      anim.always(function () {\n        style.overflow = opts.overflow[0];\n        style.overflowX = opts.overflow[1];\n        style.overflowY = opts.overflow[2];\n      });\n    } // Implement show/hide animations\n\n\n    propTween = false;\n\n    for (prop in orig) {\n      // General show/hide setup for this element animation\n      if (!propTween) {\n        if (dataShow) {\n          if ("hidden" in dataShow) {\n            hidden = dataShow.hidden;\n          }\n        } else {\n          dataShow = dataPriv.access(elem, "fxshow", {\n            display: restoreDisplay\n          });\n        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"\n\n\n        if (toggle) {\n          dataShow.hidden = !hidden;\n        } // Show elements before animating them\n\n\n        if (hidden) {\n          showHide([elem], true);\n        }\n        /* eslint-disable no-loop-func */\n\n\n        anim.done(function () {\n          /* eslint-enable no-loop-func */\n          // The final step of a "hide" animation is actually hiding the element\n          if (!hidden) {\n            showHide([elem]);\n          }\n\n          dataPriv.remove(elem, "fxshow");\n\n          for (prop in orig) {\n            jQuery.style(elem, prop, orig[prop]);\n          }\n        });\n      } // Per-property setup\n\n\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n      if (!(prop in dataShow)) {\n        dataShow[prop] = propTween.start;\n\n        if (hidden) {\n          propTween.end = propTween.start;\n          propTween.start = 0;\n        }\n      }\n    }\n  }\n\n  function propFilter(props, specialEasing) {\n    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass\n\n    for (index in props) {\n      name = camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n\n      if (Array.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n\n      hooks = jQuery.cssHooks[name];\n\n      if (hooks && "expand" in hooks) {\n        value = hooks.expand(value);\n        delete props[name]; // Not quite $.extend, this won\'t overwrite existing keys.\n        // Reusing \'index\' because we have the correct "name"\n\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n\n  function Animation(elem, properties, options) {\n    var result,\n        stopped,\n        index = 0,\n        length = Animation.prefilters.length,\n        deferred = jQuery.Deferred().always(function () {\n      // Don\'t match elem in the :animated selector\n      delete tick.elem;\n    }),\n        tick = function () {\n      if (stopped) {\n        return false;\n      }\n\n      var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // Support: Android 2.3 only\n      // Archaic crash bug won\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)\n      temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n\n      for (; index < length; index++) {\n        animation.tweens[index].run(percent);\n      }\n\n      deferred.notifyWith(elem, [animation, percent, remaining]); // If there\'s more to do, yield\n\n      if (percent < 1 && length) {\n        return remaining;\n      } // If this was an empty animation, synthesize a final progress notification\n\n\n      if (!length) {\n        deferred.notifyWith(elem, [animation, 1, 0]);\n      } // Resolve the animation and report its conclusion\n\n\n      deferred.resolveWith(elem, [animation]);\n      return false;\n    },\n        animation = deferred.promise({\n      elem: elem,\n      props: jQuery.extend({}, properties),\n      opts: jQuery.extend(true, {\n        specialEasing: {},\n        easing: jQuery.easing._default\n      }, options),\n      originalProperties: properties,\n      originalOptions: options,\n      startTime: fxNow || createFxNow(),\n      duration: options.duration,\n      tweens: [],\n      createTween: function (prop, end) {\n        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n        animation.tweens.push(tween);\n        return tween;\n      },\n      stop: function (gotoEnd) {\n        var index = 0,\n            // If we are going to the end, we want to run all the tweens\n        // otherwise we skip this part\n        length = gotoEnd ? animation.tweens.length : 0;\n\n        if (stopped) {\n          return this;\n        }\n\n        stopped = true;\n\n        for (; index < length; index++) {\n          animation.tweens[index].run(1);\n        } // Resolve when we played the last frame; otherwise, reject\n\n\n        if (gotoEnd) {\n          deferred.notifyWith(elem, [animation, 1, 0]);\n          deferred.resolveWith(elem, [animation, gotoEnd]);\n        } else {\n          deferred.rejectWith(elem, [animation, gotoEnd]);\n        }\n\n        return this;\n      }\n    }),\n        props = animation.props;\n\n    propFilter(props, animation.opts.specialEasing);\n\n    for (; index < length; index++) {\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n\n      if (result) {\n        if (isFunction(result.stop)) {\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\n        }\n\n        return result;\n      }\n    }\n\n    jQuery.map(props, createTween, animation);\n\n    if (isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    } // Attach callbacks from options\n\n\n    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    }));\n    return animation;\n  }\n\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweeners: {\n      "*": [function (prop, value) {\n        var tween = this.createTween(prop, value);\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n        return tween;\n      }]\n    },\n    tweener: function (props, callback) {\n      if (isFunction(props)) {\n        callback = props;\n        props = ["*"];\n      } else {\n        props = props.match(rnothtmlwhite);\n      }\n\n      var prop,\n          index = 0,\n          length = props.length;\n\n      for (; index < length; index++) {\n        prop = props[index];\n        Animation.tweeners[prop] = Animation.tweeners[prop] || [];\n        Animation.tweeners[prop].unshift(callback);\n      }\n    },\n    prefilters: [defaultPrefilter],\n    prefilter: function (callback, prepend) {\n      if (prepend) {\n        Animation.prefilters.unshift(callback);\n      } else {\n        Animation.prefilters.push(callback);\n      }\n    }\n  });\n\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !isFunction(easing) && easing\n    }; // Go to the end state if fx are off\n\n    if (jQuery.fx.off) {\n      opt.duration = 0;\n    } else {\n      if (typeof opt.duration !== "number") {\n        if (opt.duration in jQuery.fx.speeds) {\n          opt.duration = jQuery.fx.speeds[opt.duration];\n        } else {\n          opt.duration = jQuery.fx.speeds._default;\n        }\n      }\n    } // Normalize opt.queue - true/undefined/null -> "fx"\n\n\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = "fx";\n    } // Queueing\n\n\n    opt.old = opt.complete;\n\n    opt.complete = function () {\n      if (isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n\n    return opt;\n  };\n\n  jQuery.fn.extend({\n    fadeTo: function (speed, to, easing, callback) {\n      // Show any hidden elements after setting opacity to 0\n      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function (prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n          optall = jQuery.speed(speed, easing, callback),\n          doAnimation = function () {\n        // Operate on a copy of prop so per-property easing won\'t be lost\n        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately\n\n        if (empty || dataPriv.get(this, "finish")) {\n          anim.stop(true);\n        }\n      };\n\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function (type, clearQueue, gotoEnd) {\n      var stopQueue = function (hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n\n      if (typeof type !== "string") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n\n      if (clearQueue) {\n        this.queue(type || "fx", []);\n      }\n\n      return this.each(function () {\n        var dequeue = true,\n            index = type != null && type + "queueHooks",\n            timers = jQuery.timers,\n            data = dataPriv.get(this);\n\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        } // Start the next in the queue if the last step wasn\'t forced.\n        // Timers currently will call their complete callbacks, which\n        // will dequeue but only if they were gotoEnd.\n\n\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function (type) {\n      if (type !== false) {\n        type = type || "fx";\n      }\n\n      return this.each(function () {\n        var index,\n            data = dataPriv.get(this),\n            queue = data[type + "queue"],\n            hooks = data[type + "queueHooks"],\n            timers = jQuery.timers,\n            length = queue ? queue.length : 0; // Enable finishing flag on private data\n\n        data.finish = true; // Empty the queue first\n\n        jQuery.queue(this, type, []);\n\n        if (hooks && hooks.stop) {\n          hooks.stop.call(this, true);\n        } // Look for any active animations, and finish them\n\n\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        } // Look for any animations in the old queue and finish them\n\n\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        } // Turn off finishing flag\n\n\n        delete data.finish;\n      });\n    }\n  });\n  jQuery.each(["toggle", "show", "hide"], function (_i, name) {\n    var cssFn = jQuery.fn[name];\n\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  }); // Generate shortcuts for custom animations\n\n  jQuery.each({\n    slideDown: genFx("show"),\n    slideUp: genFx("hide"),\n    slideToggle: genFx("toggle"),\n    fadeIn: {\n      opacity: "show"\n    },\n    fadeOut: {\n      opacity: "hide"\n    },\n    fadeToggle: {\n      opacity: "toggle"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n  jQuery.timers = [];\n\n  jQuery.fx.tick = function () {\n    var timer,\n        i = 0,\n        timers = jQuery.timers;\n    fxNow = Date.now();\n\n    for (; i < timers.length; i++) {\n      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)\n\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n\n    fxNow = undefined;\n  };\n\n  jQuery.fx.timer = function (timer) {\n    jQuery.timers.push(timer);\n    jQuery.fx.start();\n  };\n\n  jQuery.fx.interval = 13;\n\n  jQuery.fx.start = function () {\n    if (inProgress) {\n      return;\n    }\n\n    inProgress = true;\n    schedule();\n  };\n\n  jQuery.fx.stop = function () {\n    inProgress = null;\n  };\n\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  }; // Based off of the plugin by Clint Helfers, with permission.\n  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || "fx";\n    return this.queue(type, function (next, hooks) {\n      var timeout = window.setTimeout(next, time);\n\n      hooks.stop = function () {\n        window.clearTimeout(timeout);\n      };\n    });\n  };\n\n  (function () {\n    var input = document.createElement("input"),\n        select = document.createElement("select"),\n        opt = select.appendChild(document.createElement("option"));\n    input.type = "checkbox"; // Support: Android <=4.3 only\n    // Default value for a checkbox should be "on"\n\n    support.checkOn = input.value !== ""; // Support: IE <=11 only\n    // Must access selectedIndex to make default options select\n\n    support.optSelected = opt.selected; // Support: IE <=11 only\n    // An input loses its value after becoming a radio\n\n    input = document.createElement("input");\n    input.value = "t";\n    input.type = "radio";\n    support.radioValue = input.value === "t";\n  })();\n\n  var boolHook,\n      attrHandle = jQuery.expr.attrHandle;\n  jQuery.fn.extend({\n    attr: function (name, value) {\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function (name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    }\n  });\n  jQuery.extend({\n    attr: function (elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don\'t get/set attributes on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      } // Fallback to prop when attributes are not supported\n\n\n      if (typeof elem.getAttribute === "undefined") {\n        return jQuery.prop(elem, name, value);\n      } // Attribute hooks are determined by the lowercase version\n      // Grab necessary hook if one is defined\n\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n      }\n\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n          return;\n        }\n\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        elem.setAttribute(name, value + "");\n        return value;\n      }\n\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined\n\n      return ret == null ? undefined : ret;\n    },\n    attrHooks: {\n      type: {\n        set: function (elem, value) {\n          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {\n            var val = elem.value;\n            elem.setAttribute("type", value);\n\n            if (val) {\n              elem.value = val;\n            }\n\n            return value;\n          }\n        }\n      }\n    },\n    removeAttr: function (elem, value) {\n      var name,\n          i = 0,\n          // Attribute names can contain non-HTML whitespace characters\n      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n      attrNames = value && value.match(rnothtmlwhite);\n\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          elem.removeAttribute(name);\n        }\n      }\n    }\n  }); // Hooks for boolean attributes\n\n  boolHook = {\n    set: function (elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else {\n        elem.setAttribute(name, name);\n      }\n\n      return name;\n    }\n  };\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (_i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n\n    attrHandle[name] = function (elem, name, isXML) {\n      var ret,\n          handle,\n          lowercaseName = name.toLowerCase();\n\n      if (!isXML) {\n        // Avoid an infinite loop by temporarily removing this function from the getter\n        handle = attrHandle[lowercaseName];\n        attrHandle[lowercaseName] = ret;\n        ret = getter(elem, name, isXML) != null ? lowercaseName : null;\n        attrHandle[lowercaseName] = handle;\n      }\n\n      return ret;\n    };\n  });\n  var rfocusable = /^(?:input|select|textarea|button)$/i,\n      rclickable = /^(?:a|area)$/i;\n  jQuery.fn.extend({\n    prop: function (name, value) {\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function (name) {\n      return this.each(function () {\n        delete this[jQuery.propFix[name] || name];\n      });\n    }\n  });\n  jQuery.extend({\n    prop: function (elem, name, value) {\n      var ret,\n          hooks,\n          nType = elem.nodeType; // Don\'t get/set properties on text, comment and attribute nodes\n\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n\n      if (value !== undefined) {\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n\n        return elem[name] = value;\n      }\n\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n\n      return elem[name];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function (elem) {\n          // Support: IE <=9 - 11 only\n          // elem.tabIndex doesn\'t always return the\n          // correct value when it hasn\'t been explicitly set\n          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n          // Use proper attribute retrieval(#12072)\n          var tabindex = jQuery.find.attr(elem, "tabindex");\n\n          if (tabindex) {\n            return parseInt(tabindex, 10);\n          }\n\n          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n            return 0;\n          }\n\n          return -1;\n        }\n      }\n    },\n    propFix: {\n      "for": "htmlFor",\n      "class": "className"\n    }\n  }); // Support: IE <=11 only\n  // Accessing the selectedIndex property\n  // forces the browser to respect setting selected\n  // on the option\n  // The getter ensures a default option is selected\n  // when in an optgroup\n  // eslint rule "no-unused-expressions" is disabled for this code\n  // since it considers such accessions noop\n\n  if (!support.optSelected) {\n    jQuery.propHooks.selected = {\n      get: function (elem) {\n        /* eslint no-unused-expressions: "off" */\n        var parent = elem.parentNode;\n\n        if (parent && parent.parentNode) {\n          parent.parentNode.selectedIndex;\n        }\n\n        return null;\n      },\n      set: function (elem) {\n        /* eslint no-unused-expressions: "off" */\n        var parent = elem.parentNode;\n\n        if (parent) {\n          parent.selectedIndex;\n\n          if (parent.parentNode) {\n            parent.parentNode.selectedIndex;\n          }\n        }\n      }\n    };\n  }\n\n  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n  }); // Strip and collapse whitespace according to HTML spec\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\n  function stripAndCollapse(value) {\n    var tokens = value.match(rnothtmlwhite) || [];\n    return tokens.join(" ");\n  }\n\n  function getClass(elem) {\n    return elem.getAttribute && elem.getAttribute("class") || "";\n  }\n\n  function classesToArray(value) {\n    if (Array.isArray(value)) {\n      return value;\n    }\n\n    if (typeof value === "string") {\n      return value.match(rnothtmlwhite) || [];\n    }\n\n    return [];\n  }\n\n  jQuery.fn.extend({\n    addClass: function (value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem);\n          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              if (cur.indexOf(" " + clazz + " ") < 0) {\n                cur += clazz + " ";\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute("class", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    removeClass: function (value) {\n      var classes,\n          elem,\n          cur,\n          curValue,\n          clazz,\n          j,\n          finalValue,\n          i = 0;\n\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, getClass(this)));\n        });\n      }\n\n      if (!arguments.length) {\n        return this.attr("class", "");\n      }\n\n      classes = classesToArray(value);\n\n      if (classes.length) {\n        while (elem = this[i++]) {\n          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)\n\n          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n\n          if (cur) {\n            j = 0;\n\n            while (clazz = classes[j++]) {\n              // Remove *all* instances\n              while (cur.indexOf(" " + clazz + " ") > -1) {\n                cur = cur.replace(" " + clazz + " ", " ");\n              }\n            } // Only assign if different to avoid unneeded rendering.\n\n\n            finalValue = stripAndCollapse(cur);\n\n            if (curValue !== finalValue) {\n              elem.setAttribute("class", finalValue);\n            }\n          }\n        }\n      }\n\n      return this;\n    },\n    toggleClass: function (value, stateVal) {\n      var type = typeof value,\n          isValidValue = type === "string" || Array.isArray(value);\n\n      if (typeof stateVal === "boolean" && isValidValue) {\n        return stateVal ? this.addClass(value) : this.removeClass(value);\n      }\n\n      if (isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n        });\n      }\n\n      return this.each(function () {\n        var className, i, self, classNames;\n\n        if (isValidValue) {\n          // Toggle individual class names\n          i = 0;\n          self = jQuery(this);\n          classNames = classesToArray(value);\n\n          while (className = classNames[i++]) {\n            // Check each className given, space separated list\n            if (self.hasClass(className)) {\n              self.removeClass(className);\n            } else {\n              self.addClass(className);\n            }\n          } // Toggle whole class name\n\n        } else if (value === undefined || type === "boolean") {\n          className = getClass(this);\n\n          if (className) {\n            // Store className if set\n            dataPriv.set(this, "__className__", className);\n          } // If the element has a class name or if we\'re passed `false`,\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n\n\n          if (this.setAttribute) {\n            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");\n          }\n        }\n      });\n    },\n    hasClass: function (selector) {\n      var className,\n          elem,\n          i = 0;\n      className = " " + selector + " ";\n\n      while (elem = this[i++]) {\n        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  var rreturn = /\\r/g;\n  jQuery.fn.extend({\n    val: function (value) {\n      var hooks,\n          ret,\n          valueIsFunction,\n          elem = this[0];\n\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {\n            return ret;\n          }\n\n          ret = elem.value; // Handle most common string cases\n\n          if (typeof ret === "string") {\n            return ret.replace(rreturn, "");\n          } // Handle cases where value is null/undef or number\n\n\n          return ret == null ? "" : ret;\n        }\n\n        return;\n      }\n\n      valueIsFunction = isFunction(value);\n      return this.each(function (i) {\n        var val;\n\n        if (this.nodeType !== 1) {\n          return;\n        }\n\n        if (valueIsFunction) {\n          val = value.call(this, i, jQuery(this).val());\n        } else {\n          val = value;\n        } // Treat null/undefined as ""; convert numbers to string\n\n\n        if (val == null) {\n          val = "";\n        } else if (typeof val === "number") {\n          val += "";\n        } else if (Array.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? "" : value + "";\n          });\n        }\n\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\n\n        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function (elem) {\n          var val = jQuery.find.attr(elem, "value");\n          return val != null ? val : // Support: IE <=10 - 11 only\n          // option.text throws exceptions (#14686, #14858)\n          // Strip and collapse whitespace\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n          stripAndCollapse(jQuery.text(elem));\n        }\n      },\n      select: {\n        get: function (elem) {\n          var value,\n              option,\n              i,\n              options = elem.options,\n              index = elem.selectedIndex,\n              one = elem.type === "select-one",\n              values = one ? null : [],\n              max = one ? index + 1 : options.length;\n\n          if (index < 0) {\n            i = max;\n          } else {\n            i = one ? index : 0;\n          } // Loop through all the selected options\n\n\n          for (; i < max; i++) {\n            option = options[i]; // Support: IE <=9 only\n            // IE8-9 doesn\'t update selected after form reset (#2551)\n\n            if ((option.selected || i === index) && // Don\'t return options that are disabled or in a disabled optgroup\n            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val(); // We don\'t need an array for one selects\n\n              if (one) {\n                return value;\n              } // Multi-Selects return an array\n\n\n              values.push(value);\n            }\n          }\n\n          return values;\n        },\n        set: function (elem, value) {\n          var optionSet,\n              option,\n              options = elem.options,\n              values = jQuery.makeArray(value),\n              i = options.length;\n\n          while (i--) {\n            option = options[i];\n            /* eslint-disable no-cond-assign */\n\n            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n              optionSet = true;\n            }\n            /* eslint-enable no-cond-assign */\n\n          } // Force browsers to behave consistently when non-matching value is set\n\n\n          if (!optionSet) {\n            elem.selectedIndex = -1;\n          }\n\n          return values;\n        }\n      }\n    }\n  }); // Radios and checkboxes getter/setter\n\n  jQuery.each(["radio", "checkbox"], function () {\n    jQuery.valHooks[this] = {\n      set: function (elem, value) {\n        if (Array.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n        }\n      }\n    };\n\n    if (!support.checkOn) {\n      jQuery.valHooks[this].get = function (elem) {\n        return elem.getAttribute("value") === null ? "on" : elem.value;\n      };\n    }\n  }); // Return jQuery for attributes-only inclusion\n\n  support.focusin = "onfocusin" in window;\n\n  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n      stopPropagationCallback = function (e) {\n    e.stopPropagation();\n  };\n\n  jQuery.extend(jQuery.event, {\n    trigger: function (event, data, elem, onlyHandlers) {\n      var i,\n          cur,\n          tmp,\n          bubbleType,\n          ontype,\n          handle,\n          special,\n          lastElement,\n          eventPath = [elem || document],\n          type = hasOwn.call(event, "type") ? event.type : event,\n          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];\n      cur = lastElement = tmp = elem = elem || document; // Don\'t do events on text and comment nodes\n\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      } // focus/blur morphs to focusin/out; ensure we\'re not firing them right now\n\n\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n\n      if (type.indexOf(".") > -1) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(".");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n\n      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\n\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(".");\n      event.rnamespace = event.namespace ? new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)") : null; // Clean up the event in case it is being reused\n\n      event.result = undefined;\n\n      if (!event.target) {\n        event.target = elem;\n      } // Clone any incoming data and prepend the event, creating the handler arg list\n\n\n      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\n\n      special = jQuery.event.special[type] || {};\n\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      } // Determine event propagation path in advance, per W3C events spec (#9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\n\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        } // Only add window if we got to document (e.g., not plain obj or detached DOM)\n\n\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      } // Fire handlers on the event path\n\n\n      i = 0;\n\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        lastElement = cur;\n        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\n\n        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");\n\n        if (handle) {\n          handle.apply(cur, data);\n        } // Native handler\n\n\n        handle = ontype && cur[ontype];\n\n        if (handle && handle.apply && acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n\n      event.type = type; // If nobody prevented the default action, do it now\n\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n          // Call a native DOM method on the target with the same name as the event.\n          // Don\'t do default actions on window, that\'s where global variables be (#6170)\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\n            // Don\'t re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n\n            if (tmp) {\n              elem[ontype] = null;\n            } // Prevent re-triggering of the same event, since we already bubbled it above\n\n\n            jQuery.event.triggered = type;\n\n            if (event.isPropagationStopped()) {\n              lastElement.addEventListener(type, stopPropagationCallback);\n            }\n\n            elem[type]();\n\n            if (event.isPropagationStopped()) {\n              lastElement.removeEventListener(type, stopPropagationCallback);\n            }\n\n            jQuery.event.triggered = undefined;\n\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n\n      return event.result;\n    },\n    // Piggyback on a donor event to simulate a different one\n    // Used only for `focus(in | out)` events\n    simulate: function (type, elem, event) {\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true\n      });\n      jQuery.event.trigger(e, null, elem);\n    }\n  });\n  jQuery.fn.extend({\n    trigger: function (type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function (type, data) {\n      var elem = this[0];\n\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  }); // Support: Firefox <=44\n  // Firefox doesn\'t have focus(in | out) events\n  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n  //\n  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n  // focus(in | out) events fire after focus & blur events,\n  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\n  if (!support.focusin) {\n    jQuery.each({\n      focus: "focusin",\n      blur: "focusout"\n    }, function (orig, fix) {\n      // Attach a single capturing handler on the document while someone wants focusin/focusout\n      var handler = function (event) {\n        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n      };\n\n      jQuery.event.special[fix] = {\n        setup: function () {\n          // Handle: regular nodes (via `this.ownerDocument`), window\n          // (via `this.document`) & document (via `this`).\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix);\n\n          if (!attaches) {\n            doc.addEventListener(orig, handler, true);\n          }\n\n          dataPriv.access(doc, fix, (attaches || 0) + 1);\n        },\n        teardown: function () {\n          var doc = this.ownerDocument || this.document || this,\n              attaches = dataPriv.access(doc, fix) - 1;\n\n          if (!attaches) {\n            doc.removeEventListener(orig, handler, true);\n            dataPriv.remove(doc, fix);\n          } else {\n            dataPriv.access(doc, fix, attaches);\n          }\n        }\n      };\n    });\n  }\n\n  var location = window.location;\n  var nonce = {\n    guid: Date.now()\n  };\n  var rquery = /\\?/; // Cross-browser xml parsing\n\n  jQuery.parseXML = function (data) {\n    var xml;\n\n    if (!data || typeof data !== "string") {\n      return null;\n    } // Support: IE 9 - 11 only\n    // IE throws on parseFromString with invalid input.\n\n\n    try {\n      xml = new window.DOMParser().parseFromString(data, "text/xml");\n    } catch (e) {\n      xml = undefined;\n    }\n\n    if (!xml || xml.getElementsByTagName("parsererror").length) {\n      jQuery.error("Invalid XML: " + data);\n    }\n\n    return xml;\n  };\n\n  var rbracket = /\\[\\]$/,\n      rCRLF = /\\r?\\n/g,\n      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n      rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n\n    if (Array.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);\n        }\n      });\n    } else if (!traditional && toType(obj) === "object") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  } // Serialize an array of form elements or a set of\n  // key/values into a query string\n\n\n  jQuery.param = function (a, traditional) {\n    var prefix,\n        s = [],\n        add = function (key, valueOrFunction) {\n      // If value is a function, invoke it and use its return value\n      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);\n    };\n\n    if (a == null) {\n      return "";\n    } // If an array was passed in, assume that it is an array of form elements.\n\n\n    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the "old" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    } // Return the resulting serialization\n\n\n    return s.join("&");\n  };\n\n  jQuery.fn.extend({\n    serialize: function () {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function () {\n      return this.map(function () {\n        // Can add propHook for "elements" to filter or add form elements\n        var elements = jQuery.prop(this, "elements");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works\n\n        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n      }).map(function (_i, elem) {\n        var val = jQuery(this).val();\n\n        if (val == null) {\n          return null;\n        }\n\n        if (Array.isArray(val)) {\n          return jQuery.map(val, function (val) {\n            return {\n              name: elem.name,\n              value: val.replace(rCRLF, "\\r\\n")\n            };\n          });\n        }\n\n        return {\n          name: elem.name,\n          value: val.replace(rCRLF, "\\r\\n")\n        };\n      }).get();\n    }\n  });\n  var r20 = /%20/g,\n      rhash = /#.*$/,\n      rantiCache = /([?&])_=[^&]*/,\n      rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n      // #7653, #8125, #8152: local protocol detection\n  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n      rnoContent = /^(?:GET|HEAD)$/,\n      rprotocol = /^\\/\\//,\n\n  /* Prefilters\n   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n   * 2) These are called:\n   *    - BEFORE asking for a transport\n   *    - AFTER param serialization (s.data is a string if s.processData is true)\n   * 3) key is the dataType\n   * 4) the catchall symbol "*" can be used\n   * 5) execution will start with transport dataType and THEN continue down to "*" if needed\n   */\n  prefilters = {},\n\n  /* Transports bindings\n   * 1) key is the dataType\n   * 2) the catchall symbol "*" can be used\n   * 3) selection will start with transport dataType and THEN go to "*" if needed\n   */\n  transports = {},\n      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n  allTypes = "*/".concat("*"),\n      // Anchor tag for parsing the document origin\n  originAnchor = document.createElement("a");\n  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to "*"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== "string") {\n        func = dataTypeExpression;\n        dataTypeExpression = "*";\n      }\n\n      var dataType,\n          i = 0,\n          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n\n      if (isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === "+") {\n            dataType = dataType.slice(1) || "*";\n            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  } // Base inspection function for prefilters and transports\n\n\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n        seekingTransport = structure === transports;\n\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\n        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n\n    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");\n  } // A special extend for ajax options\n  // that takes "flat" options (not to be deep extended)\n  // Fixes #9887\n\n\n  function ajaxExtend(target, src) {\n    var key,\n        deep,\n        flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n\n    return target;\n  }\n  /* Handles responses to an ajax request:\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n\n\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var ct,\n        type,\n        finalDataType,\n        firstDataType,\n        contents = s.contents,\n        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process\n\n    while (dataTypes[0] === "*") {\n      dataTypes.shift();\n\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");\n      }\n    } // Check if we\'re dealing with a known content-type\n\n\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    } // Check to see if we have a response for the expected dataType\n\n\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      } // Or just use first one\n\n\n      finalDataType = finalDataType || firstDataType;\n    } // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n\n\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n\n      return responses[finalDataType];\n    }\n  }\n  /* Chain conversions given the request and the original response\n   * Also sets the responseXXX fields on the jqXHR instance\n   */\n\n\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,\n        current,\n        conv,\n        tmp,\n        prev,\n        converters = {},\n        // Work with a copy of dataTypes in case we need to modify it for conversion\n    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys\n\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n\n    current = dataTypes.shift(); // Convert to each sequential dataType\n\n    while (current) {\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      } // Apply the dataFilter if provided\n\n\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n\n      prev = current;\n      current = dataTypes.shift();\n\n      if (current) {\n        // There\'s only work to do if current dataType is non-auto\n        if (current === "*") {\n          current = prev; // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== "*" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair\n\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(" ");\n\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];\n\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n\n                  break;\n                }\n              }\n            }\n          } // Apply converter (if not an equivalence)\n\n\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s.throws) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: "parsererror",\n                  error: conv ? e : "No conversion from " + prev + " to " + current\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      state: "success",\n      data: response\n    };\n  }\n\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: location.href,\n      type: "GET",\n      isLocal: rlocalProtocol.test(location.protocol),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: "application/x-www-form-urlencoded; charset=UTF-8",\n\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n      accepts: {\n        "*": allTypes,\n        text: "text/plain",\n        html: "text/html",\n        xml: "application/xml, text/xml",\n        json: "application/json, text/javascript"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: "responseXML",\n        text: "responseText",\n        json: "responseJSON"\n      },\n      // Data converters\n      // Keys separate source (or catchall "*") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        "* text": String,\n        // Text to html (true = no transformation)\n        "text html": true,\n        // Evaluate text as a json expression\n        "text json": JSON.parse,\n        // Parse text as xml\n        "text xml": jQuery.parseXML\n      },\n      // For options that shouldn\'t be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn\'t be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function (target, settings) {\n      return settings ? // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function (url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (typeof url === "object") {\n        options = url;\n        url = undefined;\n      } // Force options to be an object\n\n\n      options = options || {};\n      var transport,\n          // URL without anti-cache param\n      cacheURL,\n          // Response headers\n      responseHeadersString,\n          responseHeaders,\n          // timeout handle\n      timeoutTimer,\n          // Url cleanup var\n      urlAnchor,\n          // Request state (becomes false upon send and true upon completion)\n      completed,\n          // To know if global events are to be dispatched\n      fireGlobals,\n          // Loop variable\n      i,\n          // uncached part of the url\n      uncached,\n          // Create the final options object\n      s = jQuery.ajaxSetup({}, options),\n          // Callbacks context\n      callbackContext = s.context || s,\n          // Context for global events is callbackContext if it is a DOM node or jQuery collection\n      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n          // Deferreds\n      deferred = jQuery.Deferred(),\n          completeDeferred = jQuery.Callbacks("once memory"),\n          // Status-dependent callbacks\n      statusCode = s.statusCode || {},\n          // Headers (they are sent all at once)\n      requestHeaders = {},\n          requestHeadersNames = {},\n          // Default abort message\n      strAbort = "canceled",\n          // Fake xhr\n      jqXHR = {\n        readyState: 0,\n        // Builds headers hashtable if needed\n        getResponseHeader: function (key) {\n          var match;\n\n          if (completed) {\n            if (!responseHeaders) {\n              responseHeaders = {};\n\n              while (match = rheaders.exec(responseHeadersString)) {\n                responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);\n              }\n            }\n\n            match = responseHeaders[key.toLowerCase() + " "];\n          }\n\n          return match == null ? null : match.join(", ");\n        },\n        // Raw string\n        getAllResponseHeaders: function () {\n          return completed ? responseHeadersString : null;\n        },\n        // Caches the header\n        setRequestHeader: function (name, value) {\n          if (completed == null) {\n            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n            requestHeaders[name] = value;\n          }\n\n          return this;\n        },\n        // Overrides response content-type header\n        overrideMimeType: function (type) {\n          if (completed == null) {\n            s.mimeType = type;\n          }\n\n          return this;\n        },\n        // Status-dependent callbacks\n        statusCode: function (map) {\n          var code;\n\n          if (map) {\n            if (completed) {\n              // Execute the appropriate callbacks\n              jqXHR.always(map[jqXHR.status]);\n            } else {\n              // Lazy-add the new callbacks in a way that preserves old ones\n              for (code in map) {\n                statusCode[code] = [statusCode[code], map[code]];\n              }\n            }\n          }\n\n          return this;\n        },\n        // Cancel the request\n        abort: function (statusText) {\n          var finalText = statusText || strAbort;\n\n          if (transport) {\n            transport.abort(finalText);\n          }\n\n          done(0, finalText);\n          return this;\n        }\n      }; // Attach deferreds\n\n      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)\n      // Handle falsy url in the settings object (#10093: consistency with old signature)\n      // We also use the url parameter if available\n\n      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004\n\n      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\n\n      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn\'t match the current origin.\n\n      if (s.crossDomain == null) {\n        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15\n        // IE throws exception on accessing the href property if url is malformed,\n        // e.g. http://example.com:80x/\n\n        try {\n          urlAnchor.href = s.url; // Support: IE <=8 - 11 only\n          // Anchor\'s host property isn\'t correctly set when s.url is relative\n\n          urlAnchor.href = urlAnchor.href;\n          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;\n        } catch (e) {\n          // If there is an error parsing the URL, assume it is crossDomain,\n          // it can be rejected by the transport if it is invalid\n          s.crossDomain = true;\n        }\n      } // Convert data if not already a string\n\n\n      if (s.data && s.processData && typeof s.data !== "string") {\n        s.data = jQuery.param(s.data, s.traditional);\n      } // Apply prefilters\n\n\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\n\n      if (completed) {\n        return jqXHR;\n      } // We can fire global events as of now if asked to\n      // Don\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\n\n      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests\n\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger("ajaxStart");\n      } // Uppercase the type\n\n\n      s.type = s.type.toUpperCase(); // Determine if request has content\n\n      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we\'re toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n      // Remove hash to simplify url manipulation\n\n      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content\n\n      if (!s.hasContent) {\n        // Remember the hash so we can put it back\n        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url\n\n        if (s.data && (s.processData || typeof s.data === "string")) {\n          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it\'s not used in an eventual retry\n\n          delete s.data;\n        } // Add or update anti-cache param if needed\n\n\n        if (s.cache === false) {\n          cacheURL = cacheURL.replace(rantiCache, "$1");\n          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;\n        } // Put hash and anti-cache on the URL that will be requested (gh-1732)\n\n\n        s.url = cacheURL + uncached; // Change \'%20\' to \'+\' if this is encoded form body content (gh-2658)\n      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {\n        s.data = s.data.replace(r20, "+");\n      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\n\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);\n        }\n\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);\n        }\n      } // Set the correct header, if data is being sent\n\n\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader("Content-Type", s.contentType);\n      } // Set the Accepts header for the server, depending on the dataType\n\n\n      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option\n\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      } // Allow custom headers/mimetypes and early abort\n\n\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      } // Aborting is no longer a cancellation\n\n\n      strAbort = "abort"; // Install callbacks on deferreds\n\n      completeDeferred.add(s.complete);\n      jqXHR.done(s.success);\n      jqXHR.fail(s.error); // Get transport\n\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\n\n      if (!transport) {\n        done(-1, "No Transport");\n      } else {\n        jqXHR.readyState = 1; // Send global event\n\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxSend", [jqXHR, s]);\n        } // If request was aborted inside ajaxSend, stop there\n\n\n        if (completed) {\n          return jqXHR;\n        } // Timeout\n\n\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = window.setTimeout(function () {\n            jqXHR.abort("timeout");\n          }, s.timeout);\n        }\n\n        try {\n          completed = false;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Rethrow post-completion exceptions\n          if (completed) {\n            throw e;\n          } // Propagate others as results\n\n\n          done(-1, e);\n        }\n      } // Callback for when everything is done\n\n\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n            success,\n            error,\n            response,\n            modified,\n            statusText = nativeStatusText; // Ignore repeat invocations\n\n        if (completed) {\n          return;\n        }\n\n        completed = true; // Clear timeout if it exists\n\n        if (timeoutTimer) {\n          window.clearTimeout(timeoutTimer);\n        } // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n\n\n        transport = undefined; // Cache response headers\n\n        responseHeadersString = headers || ""; // Set readyState\n\n        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful\n\n        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data\n\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        } // Use a noop converter for missing script\n\n\n        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1) {\n          s.converters["text script"] = function () {};\n        } // Convert no matter what (that way responseXXX fields are always set)\n\n\n        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining\n\n        if (isSuccess) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader("Last-Modified");\n\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n\n            modified = jqXHR.getResponseHeader("etag");\n\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          } // if no content\n\n\n          if (status === 204 || s.type === "HEAD") {\n            statusText = "nocontent"; // if not modified\n          } else if (status === 304) {\n            statusText = "notmodified"; // If we have data, let\'s convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // Extract error from statusText and normalize for non-aborts\n          error = statusText;\n\n          if (status || !statusText) {\n            statusText = "error";\n\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        } // Set data for the fake xhr object\n\n\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error\n\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        } // Status-dependent callbacks\n\n\n        jqXHR.statusCode(statusCode);\n        statusCode = undefined;\n\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);\n        } // Complete\n\n\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter\n\n          if (! --jQuery.active) {\n            jQuery.event.trigger("ajaxStop");\n          }\n        }\n      }\n\n      return jqXHR;\n    },\n    getJSON: function (url, data, callback) {\n      return jQuery.get(url, data, callback, "json");\n    },\n    getScript: function (url, callback) {\n      return jQuery.get(url, undefined, callback, "script");\n    }\n  });\n  jQuery.each(["get", "post"], function (_i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // Shift arguments if data argument was omitted\n      if (isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      } // The url can be an options object (which then must have .url)\n\n\n      return jQuery.ajax(jQuery.extend({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      }, jQuery.isPlainObject(url) && url));\n    };\n  });\n  jQuery.ajaxPrefilter(function (s) {\n    var i;\n\n    for (i in s.headers) {\n      if (i.toLowerCase() === "content-type") {\n        s.contentType = s.headers[i] || "";\n      }\n    }\n  });\n\n  jQuery._evalUrl = function (url, options, doc) {\n    return jQuery.ajax({\n      url: url,\n      // Make this explicit, since user can override this through ajaxSetup (#11264)\n      type: "GET",\n      dataType: "script",\n      cache: true,\n      async: false,\n      global: false,\n      // Only evaluate the response if it is successful (gh-4126)\n      // dataFilter is not invoked for failure responses, so using it instead\n      // of the default converter is kludgy but it works.\n      converters: {\n        "text script": function () {}\n      },\n      dataFilter: function (response) {\n        jQuery.globalEval(response, options, doc);\n      }\n    });\n  };\n\n  jQuery.fn.extend({\n    wrapAll: function (html) {\n      var wrap;\n\n      if (this[0]) {\n        if (isFunction(html)) {\n          html = html.call(this[0]);\n        } // The elements to wrap the target around\n\n\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n\n        wrap.map(function () {\n          var elem = this;\n\n          while (elem.firstElementChild) {\n            elem = elem.firstElementChild;\n          }\n\n          return elem;\n        }).append(this);\n      }\n\n      return this;\n    },\n    wrapInner: function (html) {\n      if (isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n\n      return this.each(function () {\n        var self = jQuery(this),\n            contents = self.contents();\n\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function (html) {\n      var htmlIsFunction = isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function (selector) {\n      this.parent(selector).not("body").each(function () {\n        jQuery(this).replaceWith(this.childNodes);\n      });\n      return this;\n    }\n  });\n\n  jQuery.expr.pseudos.hidden = function (elem) {\n    return !jQuery.expr.pseudos.visible(elem);\n  };\n\n  jQuery.expr.pseudos.visible = function (elem) {\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n  };\n\n  jQuery.ajaxSettings.xhr = function () {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {}\n  };\n\n  var xhrSuccessStatus = {\n    // File protocol always yields status code 0, assume 200\n    0: 200,\n    // Support: IE <=9 only\n    // #1450: sometimes IE returns 1223 when it should be 204\n    1223: 204\n  },\n      xhrSupported = jQuery.ajaxSettings.xhr();\n  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;\n  support.ajax = xhrSupported = !!xhrSupported;\n  jQuery.ajaxTransport(function (options) {\n    var callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest\n\n    if (support.cors || xhrSupported && !options.crossDomain) {\n      return {\n        send: function (headers, complete) {\n          var i,\n              xhr = options.xhr();\n          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided\n\n          if (options.xhrFields) {\n            for (i in options.xhrFields) {\n              xhr[i] = options.xhrFields[i];\n            }\n          } // Override mime type if needed\n\n\n          if (options.mimeType && xhr.overrideMimeType) {\n            xhr.overrideMimeType(options.mimeType);\n          } // X-Requested-With header\n          // For cross-domain requests, seeing as conditions for a preflight are\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\n          // (it can always be set on a per-request basis or even using ajaxSetup)\n          // For same-domain requests, won\'t change header if already provided.\n\n\n          if (!options.crossDomain && !headers["X-Requested-With"]) {\n            headers["X-Requested-With"] = "XMLHttpRequest";\n          } // Set headers\n\n\n          for (i in headers) {\n            xhr.setRequestHeader(i, headers[i]);\n          } // Callback\n\n\n          callback = function (type) {\n            return function () {\n              if (callback) {\n                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\n\n                if (type === "abort") {\n                  xhr.abort();\n                } else if (type === "error") {\n                  // Support: IE <=9 only\n                  // On a manual native abort, IE9 throws\n                  // errors on any property access that is not readyState\n                  if (typeof xhr.status !== "number") {\n                    complete(0, "error");\n                  } else {\n                    complete( // File: protocol always yields status 0; see #8605, #14207\n                    xhr.status, xhr.statusText);\n                  }\n                } else {\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only\n                  // IE9 has no XHR2 but throws on binary (trac-11426)\n                  // For XHR2 non-text, let the caller handle it (gh-2498)\n                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {\n                    binary: xhr.response\n                  } : {\n                    text: xhr.responseText\n                  }, xhr.getAllResponseHeaders());\n                }\n              }\n            };\n          }; // Listen to events\n\n\n          xhr.onload = callback();\n          errorCallback = xhr.onerror = xhr.ontimeout = callback("error"); // Support: IE 9 only\n          // Use onreadystatechange to replace onabort\n          // to handle uncaught aborts\n\n          if (xhr.onabort !== undefined) {\n            xhr.onabort = errorCallback;\n          } else {\n            xhr.onreadystatechange = function () {\n              // Check readyState before timeout as it changes\n              if (xhr.readyState === 4) {\n                // Allow onerror to be called first,\n                // but that will not handle a native abort\n                // Also, save errorCallback to a variable\n                // as xhr.onerror cannot be accessed\n                window.setTimeout(function () {\n                  if (callback) {\n                    errorCallback();\n                  }\n                });\n              }\n            };\n          } // Create the abort callback\n\n\n          callback = callback("abort");\n\n          try {\n            // Do send the request (this may raise an exception)\n            xhr.send(options.hasContent && options.data || null);\n          } catch (e) {\n            // #14683: Only rethrow if this hasn\'t been notified as an error yet\n            if (callback) {\n              throw e;\n            }\n          }\n        },\n        abort: function () {\n          if (callback) {\n            callback();\n          }\n        }\n      };\n    }\n  }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n\n  jQuery.ajaxPrefilter(function (s) {\n    if (s.crossDomain) {\n      s.contents.script = false;\n    }\n  }); // Install script dataType\n\n  jQuery.ajaxSetup({\n    accepts: {\n      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      "text script": function (text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  }); // Handle cache\'s special case and crossDomain\n\n  jQuery.ajaxPrefilter("script", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n\n    if (s.crossDomain) {\n      s.type = "GET";\n    }\n  }); // Bind script tag hack transport\n\n  jQuery.ajaxTransport("script", function (s) {\n    // This transport only deals with cross domain or forced-by-attrs requests\n    if (s.crossDomain || s.scriptAttrs) {\n      var script, callback;\n      return {\n        send: function (_, complete) {\n          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({\n            charset: s.scriptCharset,\n            src: s.url\n          }).on("load error", callback = function (evt) {\n            script.remove();\n            callback = null;\n\n            if (evt) {\n              complete(evt.type === "error" ? 404 : 200, evt.type);\n            }\n          }); // Use native DOM manipulation to avoid our domManip AJAX trickery\n\n          document.head.appendChild(script[0]);\n        },\n        abort: function () {\n          if (callback) {\n            callback();\n          }\n        }\n      };\n    }\n  });\n  var oldCallbacks = [],\n      rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n  jQuery.ajaxSetup({\n    jsonp: "callback",\n    jsonpCallback: function () {\n      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;\n      this[callback] = true;\n      return callback;\n    }\n  }); // Detect, normalize options and install callbacks for jsonp requests\n\n  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {\n    var callbackName,\n        overwritten,\n        responseContainer,\n        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set\n\n    if (jsonProp || s.dataTypes[0] === "jsonp") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;\n      } // Use data converter to retrieve json after script execution\n\n\n      s.converters["script json"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + " was not called");\n        }\n\n        return responseContainer[0];\n      }; // Force json dataType\n\n\n      s.dataTypes[0] = "json"; // Install callback\n\n      overwritten = window[callbackName];\n\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      }; // Clean-up function (fires after converters)\n\n\n      jqXHR.always(function () {\n        // If previous value didn\'t exist - remove it\n        if (overwritten === undefined) {\n          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value\n        } else {\n          window[callbackName] = overwritten;\n        } // Save back as free\n\n\n        if (s[callbackName]) {\n          // Make sure that re-using the options doesn\'t screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use\n\n          oldCallbacks.push(callbackName);\n        } // Call if it was a function and we have a response\n\n\n        if (responseContainer && isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n\n        responseContainer = overwritten = undefined;\n      }); // Delegate to script\n\n      return "script";\n    }\n  }); // Support: Safari 8 only\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\n  // collapse sibling forms: the second one becomes a child of the first one.\n  // Because of that, this security measure has to be disabled in Safari 8.\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\n\n  support.createHTMLDocument = function () {\n    var body = document.implementation.createHTMLDocument("").body;\n    body.innerHTML = "<form></form><form></form>";\n    return body.childNodes.length === 2;\n  }(); // Argument "data" should be string of html\n  // context (optional): If specified, the fragment will be created in this context,\n  // defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n\n\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (typeof data !== "string") {\n      return [];\n    }\n\n    if (typeof context === "boolean") {\n      keepScripts = context;\n      context = false;\n    }\n\n    var base, parsed, scripts;\n\n    if (!context) {\n      // Stop scripts or inline event handlers from being executed immediately\n      // by using document.implementation\n      if (support.createHTMLDocument) {\n        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document\n        // so any parsed elements with URLs\n        // are based on the document\'s URL (gh-2965)\n\n        base = context.createElement("base");\n        base.href = document.location.href;\n        context.head.appendChild(base);\n      } else {\n        context = document;\n      }\n    }\n\n    parsed = rsingleTag.exec(data);\n    scripts = !keepScripts && []; // Single tag\n\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n\n    parsed = buildFragment([data], context, scripts);\n\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n\n    return jQuery.merge([], parsed.childNodes);\n  };\n  /**\n   * Load a url into a page\n   */\n\n\n  jQuery.fn.load = function (url, params, callback) {\n    var selector,\n        type,\n        response,\n        self = this,\n        off = url.indexOf(" ");\n\n    if (off > -1) {\n      selector = stripAndCollapse(url.slice(off));\n      url = url.slice(0, off);\n    } // If it\'s a function\n\n\n    if (isFunction(params)) {\n      // We assume that it\'s the callback\n      callback = params;\n      params = undefined; // Otherwise, build a param string\n    } else if (params && typeof params === "object") {\n      type = "POST";\n    } // If we have elements to modify, make the request\n\n\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // If "type" variable is undefined, then "GET" method will be used.\n        // Make value of this field explicit since\n        // user can override it through ajaxSetup method\n        type: type || "GET",\n        dataType: "html",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE \'Permission Denied\' errors\n        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\n        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"\n        // but they are ignored because response was set above.\n        // If it fails, this function gets "jqXHR", "status", "error"\n      }).always(callback && function (jqXHR, status) {\n        self.each(function () {\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n        });\n      });\n    }\n\n    return this;\n  };\n\n  jQuery.expr.pseudos.animated = function (elem) {\n    return jQuery.grep(jQuery.timers, function (fn) {\n      return elem === fn.elem;\n    }).length;\n  };\n\n  jQuery.offset = {\n    setOffset: function (elem, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = jQuery.css(elem, "position"),\n          curElem = jQuery(elem),\n          props = {}; // Set position first, in-case top/left are set even on static elem\n\n      if (position === "static") {\n        elem.style.position = "relative";\n      }\n\n      curOffset = curElem.offset();\n      curCSSTop = jQuery.css(elem, "top");\n      curCSSLeft = jQuery.css(elem, "left");\n      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (isFunction(options)) {\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n        options = options.call(elem, i, jQuery.extend({}, curOffset));\n      }\n\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n\n      if ("using" in options) {\n        options.using.call(elem, props);\n      } else {\n        if (typeof props.top === "number") {\n          props.top += "px";\n        }\n\n        if (typeof props.left === "number") {\n          props.left += "px";\n        }\n\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    // offset() relates an element\'s border box to the document origin\n    offset: function (options) {\n      // Preserve chaining for setter\n      if (arguments.length) {\n        return options === undefined ? this : this.each(function (i) {\n          jQuery.offset.setOffset(this, options, i);\n        });\n      }\n\n      var rect,\n          win,\n          elem = this[0];\n\n      if (!elem) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!elem.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = elem.getBoundingClientRect();\n      win = elem.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    // position() relates an element\'s margin box to its offset parent\'s padding box\n    // This corresponds to the behavior of CSS absolute positioning\n    position: function () {\n      if (!this[0]) {\n        return;\n      }\n\n      var offsetParent,\n          offset,\n          doc,\n          elem = this[0],\n          parentOffset = {\n        top: 0,\n        left: 0\n      }; // position:fixed elements are offset from the viewport, which itself always has zero offset\n\n      if (jQuery.css(elem, "position") === "fixed") {\n        // Assume position:fixed implies availability of getBoundingClientRect\n        offset = elem.getBoundingClientRect();\n      } else {\n        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element\n        // when a statically positioned element is identified\n\n        doc = elem.ownerDocument;\n        offsetParent = elem.offsetParent || doc.documentElement;\n\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.parentNode;\n        }\n\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n          // Incorporate borders into its offset, since they are outside its content origin\n          parentOffset = jQuery(offsetParent).offset();\n          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);\n          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);\n        }\n      } // Subtract parent offsets and element margins\n\n\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)\n      };\n    },\n    // This method will return documentElement in the following cases:\n    // 1) For the element inside the iframe without offsetParent, this method will return\n    //    documentElement of the parent window\n    // 2) For the hidden or detached element\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\n    //\n    // but those exceptions were never presented as a real life use-cases\n    // and might be considered as more preferable results.\n    //\n    // This logic, however, is not guaranteed and can change at any point in the future\n    offsetParent: function () {\n      return this.map(function () {\n        var offsetParent = this.offsetParent;\n\n        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.offsetParent;\n        }\n\n        return offsetParent || documentElement;\n      });\n    }\n  }); // Create scrollLeft and scrollTop methods\n\n  jQuery.each({\n    scrollLeft: "pageXOffset",\n    scrollTop: "pageYOffset"\n  }, function (method, prop) {\n    var top = "pageYOffset" === prop;\n\n    jQuery.fn[method] = function (val) {\n      return access(this, function (elem, method, val) {\n        // Coalesce documents and windows\n        var win;\n\n        if (isWindow(elem)) {\n          win = elem;\n        } else if (elem.nodeType === 9) {\n          win = elem.defaultView;\n        }\n\n        if (val === undefined) {\n          return win ? win[prop] : elem[method];\n        }\n\n        if (win) {\n          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length);\n    };\n  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49\n  // Add the top/left cssHooks using jQuery.fn.position\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\n  // rather than make the css module depend on the offset module, just check for it here\n\n  jQuery.each(["top", "left"], function (_i, prop) {\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n      if (computed) {\n        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset\n\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;\n      }\n    });\n  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\n  jQuery.each({\n    Height: "height",\n    Width: "width"\n  }, function (name, type) {\n    jQuery.each({\n      padding: "inner" + name,\n      content: type,\n      "": "outer" + name\n    }, function (defaultExtra, funcName) {\n      // Margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),\n            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");\n        return access(this, function (elem, type, value) {\n          var doc;\n\n          if (isWindow(elem)) {\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];\n          } // Get document width or height\n\n\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n            // whichever is greatest\n\n            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);\n          }\n\n          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) : // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable);\n      };\n    });\n  });\n  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n  jQuery.fn.extend({\n    bind: function (types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function (types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function (selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function (selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);\n    },\n    hover: function (fnOver, fnOut) {\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n    }\n  });\n  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  }); // Support: Android <=4.0 only\n  // Make sure we trim BOM and NBSP\n\n  var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g; // Bind a function to a context, optionally partially applying any\n  // arguments.\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n  // However, it is not slated for removal any time soon\n\n  jQuery.proxy = function (fn, context) {\n    var tmp, args, proxy;\n\n    if (typeof context === "string") {\n      tmp = fn[context];\n      context = fn;\n      fn = tmp;\n    } // Quick check to determine if target is callable, in the spec\n    // this throws a TypeError, but we will just return undefined.\n\n\n    if (!isFunction(fn)) {\n      return undefined;\n    } // Simulated bind\n\n\n    args = slice.call(arguments, 2);\n\n    proxy = function () {\n      return fn.apply(context || this, args.concat(slice.call(arguments)));\n    }; // Set the guid of unique handler to the same of original handler, so it can be removed\n\n\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n    return proxy;\n  };\n\n  jQuery.holdReady = function (hold) {\n    if (hold) {\n      jQuery.readyWait++;\n    } else {\n      jQuery.ready(true);\n    }\n  };\n\n  jQuery.isArray = Array.isArray;\n  jQuery.parseJSON = JSON.parse;\n  jQuery.nodeName = nodeName;\n  jQuery.isFunction = isFunction;\n  jQuery.isWindow = isWindow;\n  jQuery.camelCase = camelCase;\n  jQuery.type = toType;\n  jQuery.now = Date.now;\n\n  jQuery.isNumeric = function (obj) {\n    // As of jQuery 3.0, isNumeric is limited to\n    // strings and numbers (primitives or objects)\n    // that can be coerced to finite numbers (gh-2662)\n    var type = jQuery.type(obj);\n    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")\n    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")\n    // subtraction forces infinities to NaN\n    !isNaN(obj - parseFloat(obj));\n  };\n\n  jQuery.trim = function (text) {\n    return text == null ? "" : (text + "").replace(rtrim, "");\n  }; // Register as a named AMD module, since jQuery can be concatenated with other\n  // files that may use define, but not via a proper concatenation script that\n  // understands anonymous AMD modules. A named AMD is safest and most robust\n  // way to register. Lowercase jquery is used because AMD module names are\n  // derived from file names, and jQuery is normally delivered in a lowercase\n  // file name. Do this after creating the global so that if an AMD module wants\n  // to call noConflict to hide this version of jQuery, it will work.\n  // Note that for maximum portability, libraries that are not jQuery should\n  // declare themselves as anonymous modules, and avoid setting a global if an\n  // AMD loader is present. jQuery is a special case. For more information, see\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jQuery;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  var // Map over jQuery in case of overwrite\n  _jQuery = window.jQuery,\n      // Map over the $ in case of overwrite\n  _$ = window.$;\n\n  jQuery.noConflict = function (deep) {\n    if (window.$ === jQuery) {\n      window.$ = _$;\n    }\n\n    if (deep && window.jQuery === jQuery) {\n      window.jQuery = _jQuery;\n    }\n\n    return jQuery;\n  }; // Expose jQuery and $ identifiers, even in AMD\n  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n  // and CommonJS for browser emulators (#13566)\n\n\n  if (typeof noGlobal === "undefined") {\n    window.jQuery = window.$ = jQuery;\n  }\n\n  return jQuery;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzPzExNTciXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInNsaWNlIiwiZmxhdCIsImFycmF5IiwiY2FsbCIsImNvbmNhdCIsImFwcGx5IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwib2JqIiwibm9kZVR5cGUiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJ0eXBlIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwibm9kZSIsImRvYyIsImkiLCJ2YWwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInZlcnNpb24iLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJwcm90b3R5cGUiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsImxlbmd0aCIsInRvQXJyYXkiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImV2ZW4iLCJncmVwIiwiX2VsZW0iLCJvZGQiLCJsZW4iLCJqIiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsIm9wdGlvbnMiLCJuYW1lIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsImlzQXJyYXlMaWtlIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0ludmVyc2UiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwiX2kiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hOYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJqb2luIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwia2V5IiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJ0b2tlbnMiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwic2VsZiIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJoYXMiLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwic2libGluZyIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiY3JlYXRlT3B0aW9ucyIsIm9iamVjdCIsIl8iLCJmbGFnIiwiQ2FsbGJhY2tzIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNhdGNoIiwicmVhZHlXYWl0Iiwid2FpdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJzZXQiLCJkYXRhIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImdldERhdGEiLCJKU09OIiwicGFyc2UiLCJkYXRhQXR0ciIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaGlkZSIsInRvZ2dsZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImRpdiIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwibm9kZXMiLCJjcmVhdGVUZXh0Tm9kZSIsImh0bWxQcmVmaWx0ZXIiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50IiwiZXJyIiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsInQiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiY3JlYXRlIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImJ1dHRvbiIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJsZXZlcmFnZU5hdGl2ZSIsInRyaWdnZXIiLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwibm93IiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJmb2N1cyIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwib2xkIiwicmJveFN0eWxlIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsIndpZHRoIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxCb3hTdHlsZXMiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsInBhcnNlSW50IiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJ2ZW5kb3JQcm9wTmFtZSIsImNhcE5hbWUiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwiYm94U2l6aW5nTmVlZGVkIiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsIlR3ZWVuIiwiZWFzaW5nIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwiZGVmYXVsdFByZWZpbHRlciIsIm9wdHMiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcm9wRmlsdGVyIiwic3BlY2lhbEVhc2luZyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsImJpbmQiLCJjb21wbGV0ZSIsInRpbWVyIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJzIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJhamF4Q29udmVydCIsInJlc3BvbnNlIiwiaXNTdWNjZXNzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsInRocm93cyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsIm1vZGlmaWVkIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwidHJpbSIsImRlZmluZSIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQWFBLENBQUUsVUFBVUEsTUFBVixFQUFrQkMsT0FBbEIsRUFBNEI7QUFFN0I7O0FBRUEsTUFBSyxTQUE4QixPQUFPQyxNQUFNLENBQUNDLE9BQWQsS0FBMEIsUUFBN0QsRUFBd0U7QUFFdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUQsVUFBTSxDQUFDQyxPQUFQLEdBQWlCSCxNQUFNLENBQUNJLFFBQVAsR0FDaEJILE9BQU8sQ0FBRUQsTUFBRixFQUFVLElBQVYsQ0FEUyxHQUVoQixVQUFVSyxDQUFWLEVBQWM7QUFDYixVQUFLLENBQUNBLENBQUMsQ0FBQ0QsUUFBUixFQUFtQjtBQUNsQixjQUFNLElBQUlFLEtBQUosQ0FBVywwQ0FBWCxDQUFOO0FBQ0E7O0FBQ0QsYUFBT0wsT0FBTyxDQUFFSSxDQUFGLENBQWQ7QUFDQSxLQVBGO0FBUUEsR0FqQkQsTUFp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QUFYO0FBQ0E7O0FBRUQsUUFBSzVrQyxJQUFJLElBQUl4RixNQUFNLENBQUMrQyxNQUFQLEtBQWtCQSxNQUEvQixFQUF3QztBQUN2Qy9DLFlBQU0sQ0FBQytDLE1BQVAsR0FBZ0JvbkMsT0FBaEI7QUFDQTs7QUFFRCxXQUFPcG5DLE1BQVA7QUFDQSxHQVZELENBempWaUYsQ0Fxa1ZqRjtBQUNBO0FBQ0E7OztBQUNBLE1BQUssT0FBTzlDLFFBQVAsS0FBb0IsV0FBekIsRUFBdUM7QUFDdENELFVBQU0sQ0FBQytDLE1BQVAsR0FBZ0IvQyxNQUFNLENBQUNxcUMsQ0FBUCxHQUFXdG5DLE1BQTNCO0FBQ0E7O0FBS0QsU0FBT0EsTUFBUDtBQUNDLENBMW1WRCIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjUuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjAtMDUtMDRUMjI6NDlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNS4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy41XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIwLTAzLTE0XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweFwiO1xuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9IHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCApID4gMztcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0XG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiYgalF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggdHlwZW9mIHByb3BzLnRvcCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMudG9wICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGlmICggdHlwZW9mIHByb3BzLmxlZnQgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _firebase_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);\n/* harmony import */ var _firebase_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_firebase_auth__WEBPACK_IMPORTED_MODULE_0__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, \'__esModule\', {\n  value: true\n});\n\nvar tslib = __webpack_require__(1);\n\nvar util = __webpack_require__(5);\n\nvar component = __webpack_require__(12);\n\nvar logger$1 = __webpack_require__(13);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERRORS = (_a = {}, _a["no-app"\n/* NO_APP */\n] = "No Firebase App \'{$appName}\' has been created - " + \'call Firebase App.initializeApp()\', _a["bad-app-name"\n/* BAD_APP_NAME */\n] = "Illegal App name: \'{$appName}", _a["duplicate-app"\n/* DUPLICATE_APP */\n] = "Firebase App named \'{$appName}\' already exists", _a["app-deleted"\n/* APP_DELETED */\n] = "Firebase App named \'{$appName}\' already deleted", _a["invalid-app-argument"\n/* INVALID_APP_ARGUMENT */\n] = \'firebase.{$appName}() takes either no argument or a \' + \'Firebase App instance.\', _a["invalid-log-argument"\n/* INVALID_LOG_ARGUMENT */\n] = \'First argument to `onLog` must be null or a function.\', _a);\nvar ERROR_FACTORY = new util.ErrorFactory(\'app\', \'Firebase\', ERRORS);\nvar name$1 = "@firebase/app";\nvar version = "0.6.11";\nvar name$2 = "@firebase/analytics";\nvar name$3 = "@firebase/auth";\nvar name$4 = "@firebase/database";\nvar name$5 = "@firebase/functions";\nvar name$6 = "@firebase/installations";\nvar name$7 = "@firebase/messaging";\nvar name$8 = "@firebase/performance";\nvar name$9 = "@firebase/remote-config";\nvar name$a = "@firebase/storage";\nvar name$b = "@firebase/firestore";\nvar name$c = "firebase-wrapper";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar _a$1;\n\nvar DEFAULT_ENTRY_NAME = \'[DEFAULT]\';\nvar PLATFORM_LOG_STRING = (_a$1 = {}, _a$1[name$1] = \'fire-core\', _a$1[name$2] = \'fire-analytics\', _a$1[name$3] = \'fire-auth\', _a$1[name$4] = \'fire-rtdb\', _a$1[name$5] = \'fire-fn\', _a$1[name$6] = \'fire-iid\', _a$1[name$7] = \'fire-fcm\', _a$1[name$8] = \'fire-perf\', _a$1[name$9] = \'fire-rc\', _a$1[name$a] = \'fire-gcs\', _a$1[name$b] = \'fire-fst\', _a$1[\'fire-js\'] = \'fire-js\', _a$1[name$c] = \'fire-js-all\', _a$1);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar logger = new logger$1.Logger(\'@firebase/app\');\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n */\n\nvar FirebaseAppImpl =\n/** @class */\nfunction () {\n  function FirebaseAppImpl(options, config, firebase_) {\n    var e_1, _a;\n\n    var _this = this;\n\n    this.firebase_ = firebase_;\n    this.isDeleted_ = false;\n    this.name_ = config.name;\n    this.automaticDataCollectionEnabled_ = config.automaticDataCollectionEnabled || false;\n    this.options_ = util.deepCopy(options);\n    this.container = new component.ComponentContainer(config.name); // add itself to container\n\n    this._addComponent(new component.Component(\'app\', function () {\n      return _this;\n    }, "PUBLIC"\n    /* PUBLIC */\n    ));\n\n    try {\n      // populate ComponentContainer with existing components\n      for (var _b = tslib.__values(this.firebase_.INTERNAL.components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var component$1 = _c.value;\n\n        this._addComponent(component$1);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n\n  Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {\n    get: function () {\n      this.checkDestroyed_();\n      return this.automaticDataCollectionEnabled_;\n    },\n    set: function (val) {\n      this.checkDestroyed_();\n      this.automaticDataCollectionEnabled_ = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseAppImpl.prototype, "name", {\n    get: function () {\n      this.checkDestroyed_();\n      return this.name_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseAppImpl.prototype, "options", {\n    get: function () {\n      this.checkDestroyed_();\n      return this.options_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FirebaseAppImpl.prototype.delete = function () {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      _this.checkDestroyed_();\n\n      resolve();\n    }).then(function () {\n      _this.firebase_.INTERNAL.removeApp(_this.name_);\n\n      return Promise.all(_this.container.getProviders().map(function (provider) {\n        return provider.delete();\n      }));\n    }).then(function () {\n      _this.isDeleted_ = true;\n    });\n  };\n  /**\r\n   * Return a service instance associated with this app (creating it\r\n   * on demand), identified by the passed instanceIdentifier.\r\n   *\r\n   * NOTE: Currently storage and functions are the only ones that are leveraging this\r\n   * functionality. They invoke it by calling:\r\n   *\r\n   * ```javascript\r\n   * firebase.app().storage(\'STORAGE BUCKET ID\')\r\n   * ```\r\n   *\r\n   * The service name is passed to this already\r\n   * @internal\r\n   */\n\n\n  FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\n    if (instanceIdentifier === void 0) {\n      instanceIdentifier = DEFAULT_ENTRY_NAME;\n    }\n\n    this.checkDestroyed_(); // getImmediate will always succeed because _getService is only called for registered components.\n\n    return this.container.getProvider(name).getImmediate({\n      identifier: instanceIdentifier\n    });\n  };\n  /**\r\n   * Remove a service instance from the cache, so we will create a new instance for this service\r\n   * when people try to get this service again.\r\n   *\r\n   * NOTE: currently only firestore is using this functionality to support firestore shutdown.\r\n   *\r\n   * @param name The service name\r\n   * @param instanceIdentifier instance identifier in case multiple instances are allowed\r\n   * @internal\r\n   */\n\n\n  FirebaseAppImpl.prototype._removeServiceInstance = function (name, instanceIdentifier) {\n    if (instanceIdentifier === void 0) {\n      instanceIdentifier = DEFAULT_ENTRY_NAME;\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    this.container.getProvider(name).clearInstance(instanceIdentifier);\n  };\n  /**\r\n   * @param component the component being added to this app\'s container\r\n   */\n\n\n  FirebaseAppImpl.prototype._addComponent = function (component) {\n    try {\n      this.container.addComponent(component);\n    } catch (e) {\n      logger.debug("Component " + component.name + " failed to register with FirebaseApp " + this.name, e);\n    }\n  };\n\n  FirebaseAppImpl.prototype._addOrOverwriteComponent = function (component) {\n    this.container.addOrOverwriteComponent(component);\n  };\n  /**\r\n   * This function will throw an Error if the App has already been deleted -\r\n   * use before performing API actions on the App.\r\n   */\n\n\n  FirebaseAppImpl.prototype.checkDestroyed_ = function () {\n    if (this.isDeleted_) {\n      throw ERROR_FACTORY.create("app-deleted"\n      /* APP_DELETED */\n      , {\n        appName: this.name_\n      });\n    }\n  };\n\n  return FirebaseAppImpl;\n}(); // Prevent dead-code elimination of these methods w/o invalid property\n// copying.\n\n\nFirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log(\'dc\');\nvar version$1 = "7.20.0";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Because auth can\'t share code with other components, we attach the utility functions\r\n * in an internal namespace to share code.\r\n * This function return a firebase namespace object without\r\n * any utility functions, so it can be shared between the regular firebaseNamespace and\r\n * the lite version.\r\n */\n\nfunction createFirebaseNamespaceCore(firebaseAppImpl) {\n  var apps = {}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var components = new Map(); // A namespace is a plain JavaScript Object.\n\n  var namespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    // @ts-ignore\n    __esModule: true,\n    initializeApp: initializeApp,\n    // @ts-ignore\n    app: app,\n    registerVersion: registerVersion,\n    setLogLevel: logger$1.setLogLevel,\n    onLog: onLog,\n    // @ts-ignore\n    apps: null,\n    SDK_VERSION: version$1,\n    INTERNAL: {\n      registerComponent: registerComponent,\n      removeApp: removeApp,\n      components: components,\n      useAsService: useAsService\n    }\n  }; // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from \'firebase\';\n  //   which becomes: var firebase = require(\'firebase\').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from \'firebase\';\n  //   which becomes: var firebase = require(\'firebase\');\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  namespace[\'default\'] = namespace; // firebase.apps is a read-only getter.\n\n  Object.defineProperty(namespace, \'apps\', {\n    get: getApps\n  });\n  /**\r\n   * Called by App.delete() - but before any services associated with the App\r\n   * are deleted.\r\n   */\n\n  function removeApp(name) {\n    delete apps[name];\n  }\n  /**\r\n   * Get the App object for a given name (or DEFAULT).\r\n   */\n\n\n  function app(name) {\n    name = name || DEFAULT_ENTRY_NAME;\n\n    if (!util.contains(apps, name)) {\n      throw ERROR_FACTORY.create("no-app"\n      /* NO_APP */\n      , {\n        appName: name\n      });\n    }\n\n    return apps[name];\n  } // @ts-ignore\n\n\n  app[\'App\'] = firebaseAppImpl;\n\n  function initializeApp(options, rawConfig) {\n    if (rawConfig === void 0) {\n      rawConfig = {};\n    }\n\n    if (typeof rawConfig !== \'object\' || rawConfig === null) {\n      var name_1 = rawConfig;\n      rawConfig = {\n        name: name_1\n      };\n    }\n\n    var config = rawConfig;\n\n    if (config.name === undefined) {\n      config.name = DEFAULT_ENTRY_NAME;\n    }\n\n    var name = config.name;\n\n    if (typeof name !== \'string\' || !name) {\n      throw ERROR_FACTORY.create("bad-app-name"\n      /* BAD_APP_NAME */\n      , {\n        appName: String(name)\n      });\n    }\n\n    if (util.contains(apps, name)) {\n      throw ERROR_FACTORY.create("duplicate-app"\n      /* DUPLICATE_APP */\n      , {\n        appName: name\n      });\n    }\n\n    var app = new firebaseAppImpl(options, config, namespace);\n    apps[name] = app;\n    return app;\n  }\n  /*\r\n   * Return an array of all the non-deleted FirebaseApps.\r\n   */\n\n\n  function getApps() {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps).map(function (name) {\n      return apps[name];\n    });\n  }\n\n  function registerComponent(component) {\n    var e_1, _a;\n\n    var componentName = component.name;\n\n    if (components.has(componentName)) {\n      logger.debug("There were multiple attempts to register component " + componentName + ".");\n      return component.type === "PUBLIC"\n      /* PUBLIC */\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      namespace[componentName] : null;\n    }\n\n    components.set(componentName, component); // create service namespace for public components\n\n    if (component.type === "PUBLIC"\n    /* PUBLIC */\n    ) {\n        // The Service namespace is an accessor function ...\n        var serviceNamespace = function (appArg) {\n          if (appArg === void 0) {\n            appArg = app();\n          } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n          if (typeof appArg[componentName] !== \'function\') {\n            // Invalid argument.\n            // This happens in the following case: firebase.storage(\'gs:/\')\n            throw ERROR_FACTORY.create("invalid-app-argument"\n            /* INVALID_APP_ARGUMENT */\n            , {\n              appName: componentName\n            });\n          } // Forward service instance lookup to the FirebaseApp.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n          return appArg[componentName]();\n        }; // ... and a container for service-level properties.\n\n\n        if (component.serviceProps !== undefined) {\n          util.deepExtend(serviceNamespace, component.serviceProps);\n        } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n        namespace[componentName] = serviceNamespace; // Patch the FirebaseAppImpl prototype\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        firebaseAppImpl.prototype[componentName] = // TODO: The eslint disable can be removed and the \'ignoreRestArgs\'\n        // option added to the no-explicit-any rule when ESlint releases it.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          var serviceFxn = this._getService.bind(this, componentName);\n\n          return serviceFxn.apply(this, component.multipleInstances ? args : []);\n        };\n      }\n\n    try {\n      // add the component to existing app instances\n      for (var _b = tslib.__values(Object.keys(apps)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var appName = _c.value;\n\n        apps[appName]._addComponent(component);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return component.type === "PUBLIC"\n    /* PUBLIC */\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    namespace[componentName] : null;\n  }\n\n  function registerVersion(libraryKeyOrName, version, variant) {\n    var _a; // TODO: We can use this check to whitelist strings when/if we set up\n    // a good whitelist system.\n\n\n    var library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n\n    if (variant) {\n      library += "-" + variant;\n    }\n\n    var libraryMismatch = library.match(/\\s|\\//);\n    var versionMismatch = version.match(/\\s|\\//);\n\n    if (libraryMismatch || versionMismatch) {\n      var warning = ["Unable to register library \\"" + library + "\\" with version \\"" + version + "\\":"];\n\n      if (libraryMismatch) {\n        warning.push("library name \\"" + library + "\\" contains illegal characters (whitespace or \\"/\\")");\n      }\n\n      if (libraryMismatch && versionMismatch) {\n        warning.push(\'and\');\n      }\n\n      if (versionMismatch) {\n        warning.push("version name \\"" + version + "\\" contains illegal characters (whitespace or \\"/\\")");\n      }\n\n      logger.warn(warning.join(\' \'));\n      return;\n    }\n\n    registerComponent(new component.Component(library + "-version", function () {\n      return {\n        library: library,\n        version: version\n      };\n    }, "VERSION"\n    /* VERSION */\n    ));\n  }\n\n  function onLog(logCallback, options) {\n    if (logCallback !== null && typeof logCallback !== \'function\') {\n      throw ERROR_FACTORY.create("invalid-log-argument"\n      /* INVALID_LOG_ARGUMENT */\n      , {\n        appName: name\n      });\n    }\n\n    logger$1.setUserLogHandler(logCallback, options);\n  } // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n\n\n  function useAsService(app, name) {\n    if (name === \'serverAuth\') {\n      return null;\n    }\n\n    var useService = name;\n    return useService;\n  }\n\n  return namespace;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the \'firebase\' global.  It may be called multiple times\r\n * in unit tests.\r\n */\n\n\nfunction createFirebaseNamespace() {\n  var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);\n  namespace.INTERNAL = tslib.__assign(tslib.__assign({}, namespace.INTERNAL), {\n    createFirebaseNamespace: createFirebaseNamespace,\n    extendNamespace: extendNamespace,\n    createSubscribe: util.createSubscribe,\n    ErrorFactory: util.ErrorFactory,\n    deepExtend: util.deepExtend\n  });\n  /**\r\n   * Patch the top-level firebase namespace with additional properties.\r\n   *\r\n   * firebase.INTERNAL.extendNamespace()\r\n   */\n\n  function extendNamespace(props) {\n    util.deepExtend(namespace, props);\n  }\n\n  return namespace;\n}\n\nvar firebase = createFirebaseNamespace();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PlatformLoggerService =\n/** @class */\nfunction () {\n  function PlatformLoggerService(container) {\n    this.container = container;\n  } // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n\n\n  PlatformLoggerService.prototype.getPlatformInfoString = function () {\n    var providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\n    // version components.\n\n    return providers.map(function (provider) {\n      if (isVersionServiceProvider(provider)) {\n        var service = provider.getImmediate();\n        return service.library + "/" + service.version;\n      } else {\n        return null;\n      }\n    }).filter(function (logString) {\n      return logString;\n    }).join(\' \');\n  };\n\n  return PlatformLoggerService;\n}();\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<\'app-version\'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a \'app-version\'\r\n * provider.\r\n */\n\n\nfunction isVersionServiceProvider(provider) {\n  var component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === "VERSION"\n  /* VERSION */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerCoreComponents(firebase, variant) {\n  firebase.INTERNAL.registerComponent(new component.Component(\'platform-logger\', function (container) {\n    return new PlatformLoggerService(container);\n  }, "PRIVATE"\n  /* PRIVATE */\n  )); // Register `app` package.\n\n  firebase.registerVersion(name$1, version, variant); // Register platform SDK identifier (no version).\n\n  firebase.registerVersion(\'fire-js\', \'\');\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Firebase Lite detection test\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nif (util.isBrowser() && self.firebase !== undefined) {\n  logger.warn("\\n    Warning: Firebase is already defined in the global scope. Please make sure\\n    Firebase library is only loaded once.\\n  "); // eslint-disable-next-line\n\n  var sdkVersion = self.firebase.SDK_VERSION;\n\n  if (sdkVersion && sdkVersion.indexOf(\'LITE\') >= 0) {\n    logger.warn("\\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\\n    ");\n  }\n}\n\nvar initializeApp = firebase.initializeApp; // TODO: This disable can be removed and the \'ignoreRestArgs\' option added to\n// the no-explicit-any rule when ESlint releases it.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfirebase.initializeApp = function () {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  } // Environment check before initializing app\n  // Do the check in initializeApp, so people have a chance to disable it by setting logLevel\n  // in @firebase/logger\n\n\n  if (util.isNode()) {\n    logger.warn("\\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\\n      run in a Node environment.  If running in a Node environment, make sure you\\n      are using the bundle specified by the \\"main\\" field in package.json.\\n      \\n      If you are using Webpack, you can specify \\"main\\" as the first item in\\n      \\"resolve.mainFields\\":\\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\\n      \\n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify \\"main\\"\\n      as the first item in \\"mainFields\\", e.g. [\'main\', \'module\'].\\n      https://github.com/rollup/rollup-plugin-node-resolve\\n      ");\n  }\n\n  return initializeApp.apply(undefined, args);\n};\n\nvar firebase$1 = firebase;\nregisterCoreComponents(firebase$1);\nexports.default = firebase$1;\nexports.firebase = firebase$1;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar tslib = __webpack_require__(1);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\n\n\nvar CONSTANTS = {\n  /**\r\n   * @define {boolean} Whether this is the client Node.js SDK.\r\n   */\n  NODE_CLIENT: false,\n\n  /**\r\n   * @define {boolean} Whether this is the Admin Node.js SDK.\r\n   */\n  NODE_ADMIN: false,\n\n  /**\r\n   * Firebase SDK Version\r\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws an error if the provided assertion is falsy\r\n */\n\nvar assert = function (assertion, message) {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n/**\r\n * Returns an Error object suitable for throwing.\r\n */\n\n\nvar assertionError = function (message) {\n  return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar stringToByteArray = function (str) {\n  // TODO(user): Use native implementations if/when available\n  var out = [];\n  var p = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = c >> 6 | 192;\n      out[p++] = c & 63 | 128;\n    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = c >> 18 | 240;\n      out[p++] = c >> 12 & 63 | 128;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    } else {\n      out[p++] = c >> 12 | 224;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    }\n  }\n\n  return out;\n};\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param bytes Array of numbers representing characters.\r\n * @return Stringification of the array.\r\n */\n\n\nvar byteArrayToString = function (bytes) {\n  // TODO(user): Use native implementations if/when available\n  var out = [];\n  var pos = 0,\n      c = 0;\n\n  while (pos < bytes.length) {\n    var c1 = bytes[pos++];\n\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      var c2 = bytes[pos++];\n      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      var c2 = bytes[pos++];\n      var c3 = bytes[pos++];\n      var c4 = bytes[pos++];\n      var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      var c2 = bytes[pos++];\n      var c3 = bytes[pos++];\n      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n    }\n  }\n\n  return out.join('');\n}; // We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\n\n\nvar base64 = {\n  /**\r\n   * Maps bytes to characters.\r\n   */\n  byteToCharMap_: null,\n\n  /**\r\n   * Maps characters to bytes.\r\n   */\n  charToByteMap_: null,\n\n  /**\r\n   * Maps bytes to websafe characters.\r\n   * @private\r\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\r\n   * Maps websafe characters to bytes.\r\n   * @private\r\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\r\n   * Our default alphabet, shared between\r\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n   */\n  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\r\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\r\n   * Our websafe alphabet.\r\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\r\n   * Whether this browser supports the atob and btoa functions. This extension\r\n   * started at Mozilla but is now implemented by many browsers. We use the\r\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n   * but still allowing the standard per-browser compilations.\r\n   *\r\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\r\n   * Base64-encode an array of bytes.\r\n   *\r\n   * @param input An array of bytes (numbers with\r\n   *     value in [0, 255]) to encode.\r\n   * @param webSafe Boolean indicating we should use the\r\n   *     alternative alphabet.\r\n   * @return The base64 encoded string.\r\n   */\n  encodeByteArray: function (input, webSafe) {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n    var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;\n    var output = [];\n\n    for (var i = 0; i < input.length; i += 3) {\n      var byte1 = input[i];\n      var haveByte2 = i + 1 < input.length;\n      var byte2 = haveByte2 ? input[i + 1] : 0;\n      var haveByte3 = i + 2 < input.length;\n      var byte3 = haveByte3 ? input[i + 2] : 0;\n      var outByte1 = byte1 >> 2;\n      var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;\n      var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;\n      var outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\n    }\n\n    return output.join('');\n  },\n\n  /**\r\n   * Base64-encode a string.\r\n   *\r\n   * @param input A string to encode.\r\n   * @param webSafe If true, we should use the\r\n   *     alternative alphabet.\r\n   * @return The base64 encoded string.\r\n   */\n  encodeString: function (input, webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\r\n   * Base64-decode a string.\r\n   *\r\n   * @param input to decode.\r\n   * @param webSafe True if we should use the\r\n   *     alternative alphabet.\r\n   * @return string representing the decoded value.\r\n   */\n  decodeString: function (input, webSafe) {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\r\n   * Base64-decode a string.\r\n   *\r\n   * In base-64 decoding, groups of four characters are converted into three\r\n   * bytes.  If the encoder did not apply padding, the input length may not\r\n   * be a multiple of 4.\r\n   *\r\n   * In this case, the last group will have fewer than 4 characters, and\r\n   * padding will be inferred.  If the group has one or two characters, it decodes\r\n   * to one byte.  If the group has three characters, it decodes to two bytes.\r\n   *\r\n   * @param input Input to decode.\r\n   * @param webSafe True if we should use the web-safe alphabet.\r\n   * @return bytes representing the decoded value.\r\n   */\n  decodeStringToByteArray: function (input, webSafe) {\n    this.init_();\n    var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;\n    var output = [];\n\n    for (var i = 0; i < input.length;) {\n      var byte1 = charToByteMap[input.charAt(i++)];\n      var haveByte2 = i < input.length;\n      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n      var haveByte3 = i < input.length;\n      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n      var haveByte4 = i < input.length;\n      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      var outByte1 = byte1 << 2 | byte2 >> 4;\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          var outByte3 = byte3 << 6 & 0xc0 | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Lazy static initialization function. Called before\r\n   * accessing any of the static map variables.\r\n   * @private\r\n   */\n  init_: function () {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {}; // We want quick mappings back and forth, so we precompute two maps.\n\n      for (var i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i; // Be forgiving when decoding and correctly decode both encodings.\n\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n/**\r\n * URL-safe base64 encoding\r\n */\n\nvar base64Encode = function (str) {\n  var utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param str To be decoded\r\n * @return Decoded result, if possible\r\n */\n\n\nvar base64Decode = function (str) {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n\n  return null;\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\n\n\nfunction deepCopy(value) {\n  return deepExtend(undefined, value);\n}\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n */\n\n\nfunction deepExtend(target, source) {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      var dateValue = source;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n\n      break;\n\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (var prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n\n    target[prop] = deepExtend(target[prop], source[prop]);\n  }\n\n  return target;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Deferred =\n/** @class */\nfunction () {\n  function Deferred() {\n    var _this = this;\n\n    this.reject = function () {};\n\n    this.resolve = function () {};\n\n    this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n  }\n  /**\r\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n   */\n\n\n  Deferred.prototype.wrapCallback = function (callback) {\n    var _this = this;\n\n    return function (error, value) {\n      if (error) {\n        _this.reject(error);\n      } else {\n        _this.resolve(value);\n      }\n\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        _this.promise.catch(function () {}); // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n\n\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  };\n\n  return Deferred;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return user agent string\r\n */\n\n\nfunction getUA() {\n  if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\r\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\r\n * wait for a callback.\r\n */\n\n\nfunction isMobileCordova() {\n  return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window\n  // just to deal with this case would probably be a bad idea.\n  !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());\n}\n/**\r\n * Detect Node.js.\r\n *\r\n * @return true if Node.js environment is detected.\r\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\n\n\nfunction isNode() {\n  try {\n    return Object.prototype.toString.call(global.process) === '[object process]';\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * Detect Browser Environment\r\n */\n\n\nfunction isBrowser() {\n  return typeof self === 'object' && self.self === self;\n}\n\nfunction isBrowserExtension() {\n  var runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n/**\r\n * Detect React Native.\r\n *\r\n * @return true if ReactNative environment is detected.\r\n */\n\n\nfunction isReactNative() {\n  return typeof navigator === 'object' && navigator['product'] === 'ReactNative';\n}\n/** Detects Electron apps. */\n\n\nfunction isElectron() {\n  return getUA().indexOf('Electron/') >= 0;\n}\n/** Detects Internet Explorer. */\n\n\nfunction isIE() {\n  var ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n/** Detects Universal Windows Platform apps. */\n\n\nfunction isUWP() {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n/**\r\n * Detect whether the current SDK build is the Node version.\r\n *\r\n * @return true if it's the Node SDK build.\r\n */\n\n\nfunction isNodeSdk() {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n/** Returns true if we are running in Safari. */\n\n\nfunction isSafari() {\n  return !isNode() && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n}\n/**\r\n * This method checks if indexedDB is supported by current browser/service worker context\r\n * @return true if indexedDB is supported by current browser/service worker context\r\n */\n\n\nfunction isIndexedDBAvailable() {\n  return 'indexedDB' in self && indexedDB != null;\n}\n/**\r\n * This method validates browser context for indexedDB by opening a dummy indexedDB database and reject\r\n * if errors occur during the database open operation.\r\n */\n\n\nfunction validateIndexedDBOpenable() {\n  return new Promise(function (resolve, reject) {\n    try {\n      var preExist_1 = true;\n      var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';\n      var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);\n\n      request_1.onsuccess = function () {\n        request_1.result.close(); // delete database only when it doesn't pre-exist\n\n        if (!preExist_1) {\n          window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);\n        }\n\n        resolve(true);\n      };\n\n      request_1.onupgradeneeded = function () {\n        preExist_1 = false;\n      };\n\n      request_1.onerror = function () {\n        var _a;\n\n        reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n/**\r\n *\r\n * This method checks whether cookie is enabled within current browser\r\n * @return true if cookie is enabled within current browser\r\n */\n\n\nfunction areCookiesEnabled() {\n  if (!navigator || !navigator.cookieEnabled) {\n    return false;\n  }\n\n  return true;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ERROR_NAME = 'FirebaseError'; // Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\n\nvar FirebaseError =\n/** @class */\nfunction (_super) {\n  tslib.__extends(FirebaseError, _super);\n\n  function FirebaseError(code, message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.code = code;\n    _this.name = ERROR_NAME; // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n    Object.setPrototypeOf(_this, FirebaseError.prototype); // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_this, ErrorFactory.prototype.create);\n    }\n\n    return _this;\n  }\n\n  return FirebaseError;\n}(Error);\n\nvar ErrorFactory =\n/** @class */\nfunction () {\n  function ErrorFactory(service, serviceName, errors) {\n    this.service = service;\n    this.serviceName = serviceName;\n    this.errors = errors;\n  }\n\n  ErrorFactory.prototype.create = function (code) {\n    var data = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      data[_i - 1] = arguments[_i];\n    }\n\n    var customData = data[0] || {};\n    var fullCode = this.service + \"/\" + code;\n    var template = this.errors[code];\n    var message = template ? replaceTemplate(template, customData) : 'Error'; // Service Name: Error message (service/code).\n\n    var fullMessage = this.serviceName + \": \" + message + \" (\" + fullCode + \").\";\n    var error = new FirebaseError(fullCode, fullMessage); // Keys with an underscore at the end of their name are not included in\n    // error.data for some reason.\n    // TODO: Replace with Object.entries when lib is updated to es2017.\n\n    for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {\n      var key = _b[_a];\n\n      if (key.slice(-1) !== '_') {\n        if (key in error) {\n          console.warn(\"Overwriting FirebaseError base field \\\"\" + key + \"\\\" can cause unexpected behavior.\");\n        }\n\n        error[key] = customData[key];\n      }\n    }\n\n    return error;\n  };\n\n  return ErrorFactory;\n}();\n\nfunction replaceTemplate(template, data) {\n  return template.replace(PATTERN, function (_, key) {\n    var value = data[key];\n    return value != null ? String(value) : \"<\" + key + \"?>\";\n  });\n}\n\nvar PATTERN = /\\{\\$([^}]+)}/g;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\n\nfunction jsonEval(str) {\n  return JSON.parse(str);\n}\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\n\n\nfunction stringify(data) {\n  return JSON.stringify(data);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\n\n\nvar decode = function (token) {\n  var header = {},\n      claims = {},\n      data = {},\n      signature = '';\n\n  try {\n    var parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '');\n    claims = jsonEval(base64Decode(parts[1]) || '');\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header: header,\n    claims: claims,\n    data: data,\n    signature: signature\n  };\n};\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\n\n\nvar isValidTimestamp = function (token) {\n  var claims = decode(token).claims;\n  var now = Math.floor(new Date().getTime() / 1000);\n  var validSince = 0,\n      validUntil = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'];\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'];\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'];\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;\n};\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\n\n\nvar issuedAtTime = function (token) {\n  var claims = decode(token).claims;\n\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'];\n  }\n\n  return null;\n};\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\n\n\nvar isValidFormat = function (token) {\n  var decoded = decode(token),\n      claims = decoded.claims;\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n */\n\n\nvar isAdmin = function (token) {\n  var claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction contains(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction safeGet(obj, key) {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nfunction isEmpty(obj) {\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction map(obj, fn, contextObj) {\n  var res = {};\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n\n  return res;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\r\n * params object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n */\n\n\nfunction querystring(querystringParams) {\n  var params = [];\n\n  var _loop_1 = function (key, value) {\n    if (Array.isArray(value)) {\n      value.forEach(function (arrayVal) {\n        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  };\n\n  for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {\n    var _b = _a[_i],\n        key = _b[0],\n        value = _b[1];\n\n    _loop_1(key, value);\n  }\n\n  return params.length ? '&' + params.join('&') : '';\n}\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\r\n * (e.g. {arg: 'val', arg2: 'val2'})\r\n */\n\n\nfunction querystringDecode(querystring) {\n  var obj = {};\n  var tokens = querystring.replace(/^\\?/, '').split('&');\n  tokens.forEach(function (token) {\n    if (token) {\n      var key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\n\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\n\n\nvar Sha1 =\n/** @class */\nfunction () {\n  function Sha1() {\n    /**\r\n     * Holds the previous values of accumulated variables a-e in the compress_\r\n     * function.\r\n     * @private\r\n     */\n    this.chain_ = [];\n    /**\r\n     * A buffer holding the partially computed hash result.\r\n     * @private\r\n     */\n\n    this.buf_ = [];\n    /**\r\n     * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n     * as the message schedule in the docs.\r\n     * @private\r\n     */\n\n    this.W_ = [];\n    /**\r\n     * Contains data needed to pad messages less than 64 bytes.\r\n     * @private\r\n     */\n\n    this.pad_ = [];\n    /**\r\n     * @private {number}\r\n     */\n\n    this.inbuf_ = 0;\n    /**\r\n     * @private {number}\r\n     */\n\n    this.total_ = 0;\n    this.blockSize = 512 / 8;\n    this.pad_[0] = 128;\n\n    for (var i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  Sha1.prototype.reset = function () {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  };\n  /**\r\n   * Internal compress helper function.\r\n   * @param buf Block to compress.\r\n   * @param offset Offset of the block in the buffer.\r\n   * @private\r\n   */\n\n\n  Sha1.prototype.compress_ = function (buf, offset) {\n    if (!offset) {\n      offset = 0;\n    }\n\n    var W = this.W_; // get 16 big endian words\n\n    if (typeof buf === 'string') {\n      for (var i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (var i = 0; i < 16; i++) {\n        W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];\n        offset += 4;\n      }\n    } // expand to 80 words\n\n\n    for (var i = 16; i < 80; i++) {\n      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = (t << 1 | t >>> 31) & 0xffffffff;\n    }\n\n    var a = this.chain_[0];\n    var b = this.chain_[1];\n    var c = this.chain_[2];\n    var d = this.chain_[3];\n    var e = this.chain_[4];\n    var f, k; // TODO(user): Try to unroll this loop to speed up the computation.\n\n    for (var i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ b & (c ^ d);\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = b & c | d & (b | c);\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;\n      e = d;\n      d = c;\n      c = (b << 30 | b >>> 2) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = this.chain_[0] + a & 0xffffffff;\n    this.chain_[1] = this.chain_[1] + b & 0xffffffff;\n    this.chain_[2] = this.chain_[2] + c & 0xffffffff;\n    this.chain_[3] = this.chain_[3] + d & 0xffffffff;\n    this.chain_[4] = this.chain_[4] + e & 0xffffffff;\n  };\n\n  Sha1.prototype.update = function (bytes, length) {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    var lengthMinusBlock = length - this.blockSize;\n    var n = 0; // Using local instead of member variables gives ~5% speedup on Firefox 16.\n\n    var buf = this.buf_;\n    var inbuf = this.inbuf_; // The outer while loop should execute at most twice.\n\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.\n\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.\n\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  };\n  /** @override */\n\n\n  Sha1.prototype.digest = function () {\n    var digest = [];\n    var totalBits = this.total_ * 8; // Add pad 0x80 0x00*.\n\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    } // Add # bits.\n\n\n    for (var i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n    var n = 0;\n\n    for (var i = 0; i < 5; i++) {\n      for (var j = 24; j >= 0; j -= 8) {\n        digest[n] = this.chain_[i] >> j & 255;\n        ++n;\n      }\n    }\n\n    return digest;\n  };\n\n  return Sha1;\n}();\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\n\n\nfunction createSubscribe(executor, onNoObservers) {\n  var proxy = new ObserverProxy(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\n\n\nvar ObserverProxy =\n/** @class */\nfunction () {\n  /**\r\n   * @param executor Function which can make calls to a single Observer\r\n   *     as a proxy.\r\n   * @param onNoObservers Callback when count of Observers goes to zero.\r\n   */\n  function ObserverProxy(executor, onNoObservers) {\n    var _this = this;\n\n    this.observers = [];\n    this.unsubscribes = [];\n    this.observerCount = 0; // Micro-task scheduling by calling task.then().\n\n    this.task = Promise.resolve();\n    this.finalized = false;\n    this.onNoObservers = onNoObservers; // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n\n    this.task.then(function () {\n      executor(_this);\n    }).catch(function (e) {\n      _this.error(e);\n    });\n  }\n\n  ObserverProxy.prototype.next = function (value) {\n    this.forEachObserver(function (observer) {\n      observer.next(value);\n    });\n  };\n\n  ObserverProxy.prototype.error = function (error) {\n    this.forEachObserver(function (observer) {\n      observer.error(error);\n    });\n    this.close(error);\n  };\n\n  ObserverProxy.prototype.complete = function () {\n    this.forEachObserver(function (observer) {\n      observer.complete();\n    });\n    this.close();\n  };\n  /**\r\n   * Subscribe function that can be used to add an Observer to the fan-out list.\r\n   *\r\n   * - We require that no event is sent to a subscriber sychronously to their\r\n   *   call to subscribe().\r\n   */\n\n\n  ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\n    var _this = this;\n\n    var observer;\n\n    if (nextOrObserver === undefined && error === undefined && complete === undefined) {\n      throw new Error('Missing Observer.');\n    } // Assemble an Observer object when passed as callback functions.\n\n\n    if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {\n      observer = nextOrObserver;\n    } else {\n      observer = {\n        next: nextOrObserver,\n        error: error,\n        complete: complete\n      };\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop;\n    }\n\n    if (observer.error === undefined) {\n      observer.error = noop;\n    }\n\n    if (observer.complete === undefined) {\n      observer.complete = noop;\n    }\n\n    var unsub = this.unsubscribeOne.bind(this, this.observers.length); // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(function () {\n        try {\n          if (_this.finalError) {\n            observer.error(_this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {// nothing\n        }\n\n        return;\n      });\n    }\n\n    this.observers.push(observer);\n    return unsub;\n  }; // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n\n\n  ObserverProxy.prototype.unsubscribeOne = function (i) {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n    this.observerCount -= 1;\n\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  };\n\n  ObserverProxy.prototype.forEachObserver = function (fn) {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    } // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n\n\n    for (var i = 0; i < this.observers.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }; // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n\n\n  ObserverProxy.prototype.sendOne = function (i, fn) {\n    var _this = this; // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n    this.task.then(function () {\n      if (_this.observers !== undefined && _this.observers[i] !== undefined) {\n        try {\n          fn(_this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  };\n\n  ObserverProxy.prototype.close = function (err) {\n    var _this = this;\n\n    if (this.finalized) {\n      return;\n    }\n\n    this.finalized = true;\n\n    if (err !== undefined) {\n      this.finalError = err;\n    } // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n    this.task.then(function () {\n      _this.observers = undefined;\n      _this.onNoObservers = undefined;\n    });\n  };\n\n  return ObserverProxy;\n}();\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(fn, onError) {\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    Promise.resolve(true).then(function () {\n      fn.apply(void 0, args);\n    }).catch(function (error) {\n      if (onError) {\n        onError(error);\n      }\n    });\n  };\n}\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\n\n\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n    var method = methods_1[_i];\n\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop() {// do nothing\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param fnName The function name\r\n * @param minCount The minimum number of arguments to allow for the function call\r\n * @param maxCount The maximum number of argument to allow for the function call\r\n * @param argCount The actual number of arguments provided.\r\n */\n\n\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\n  var argError;\n\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n\n  if (argError) {\n    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';\n    throw new Error(error);\n  }\n};\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param fnName The function name\r\n * @param argumentNumber The index of the argument\r\n * @param optional Whether or not the argument is optional\r\n * @return The prefix to add to the error thrown for validation.\r\n */\n\n\nfunction errorPrefix(fnName, argumentNumber, optional) {\n  var argName = '';\n\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n\n    default:\n      throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\n  }\n\n  var error = fnName + ' failed: ';\n  error += argName + ' argument ';\n  return error;\n}\n/**\r\n * @param fnName\r\n * @param argumentNumber\r\n * @param namespace\r\n * @param optional\r\n */\n\n\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\n  if (optional && !namespace) {\n    return;\n  }\n\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');\n  }\n}\n\nfunction validateCallback(fnName, argumentNumber, // eslint-disable-next-line @typescript-eslint/ban-types\ncallback, optional) {\n  if (optional && !callback) {\n    return;\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');\n  }\n}\n\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\n  if (optional && !context) {\n    return;\n  }\n\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\n\n\nvar stringToByteArray$1 = function (str) {\n  var out = [];\n  var p = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i); // Is this the lead surrogate in a surrogate pair?\n\n    if (c >= 0xd800 && c <= 0xdbff) {\n      var high = c - 0xd800; // the high 10 bits.\n\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = c >> 6 | 192;\n      out[p++] = c & 63 | 128;\n    } else if (c < 65536) {\n      out[p++] = c >> 12 | 224;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    } else {\n      out[p++] = c >> 18 | 240;\n      out[p++] = c >> 12 & 63 | 128;\n      out[p++] = c >> 6 & 63 | 128;\n      out[p++] = c & 63 | 128;\n    }\n  }\n\n  return out;\n};\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\n\n\nvar stringLength = function (str) {\n  var p = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n\n  return p;\n};\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The amount of milliseconds to exponentially increase.\r\n */\n\n\nvar DEFAULT_INTERVAL_MILLIS = 1000;\n/**\r\n * The factor to backoff by.\r\n * Should be a number greater than 1.\r\n */\n\nvar DEFAULT_BACKOFF_FACTOR = 2;\n/**\r\n * The maximum milliseconds to increase to.\r\n *\r\n * <p>Visible for testing\r\n */\n\nvar MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\r\n * The percentage of backoff time to randomize by.\r\n * See\r\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\r\n * for context.\r\n *\r\n * <p>Visible for testing\r\n */\n\nvar RANDOM_FACTOR = 0.5;\n/**\r\n * Based on the backoff method from\r\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\r\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\r\n */\n\nfunction calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {\n  if (intervalMillis === void 0) {\n    intervalMillis = DEFAULT_INTERVAL_MILLIS;\n  }\n\n  if (backoffFactor === void 0) {\n    backoffFactor = DEFAULT_BACKOFF_FACTOR;\n  } // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n\n\n  var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount); // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n\n  var randomWait = Math.round( // A fraction of the backoff value to add/subtract.\n  // Deviation: changes multiplication order to improve readability.\n  RANDOM_FACTOR * currBaseValue * ( // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n  // if we add or subtract.\n  Math.random() - 0.5) * 2); // Limits backoff to max to avoid effectively permanent backoff.\n\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n\nexports.CONSTANTS = CONSTANTS;\nexports.Deferred = Deferred;\nexports.ErrorFactory = ErrorFactory;\nexports.FirebaseError = FirebaseError;\nexports.MAX_VALUE_MILLIS = MAX_VALUE_MILLIS;\nexports.RANDOM_FACTOR = RANDOM_FACTOR;\nexports.Sha1 = Sha1;\nexports.areCookiesEnabled = areCookiesEnabled;\nexports.assert = assert;\nexports.assertionError = assertionError;\nexports.async = async;\nexports.base64 = base64;\nexports.base64Decode = base64Decode;\nexports.base64Encode = base64Encode;\nexports.calculateBackoffMillis = calculateBackoffMillis;\nexports.contains = contains;\nexports.createSubscribe = createSubscribe;\nexports.decode = decode;\nexports.deepCopy = deepCopy;\nexports.deepExtend = deepExtend;\nexports.errorPrefix = errorPrefix;\nexports.getUA = getUA;\nexports.isAdmin = isAdmin;\nexports.isBrowser = isBrowser;\nexports.isBrowserExtension = isBrowserExtension;\nexports.isElectron = isElectron;\nexports.isEmpty = isEmpty;\nexports.isIE = isIE;\nexports.isIndexedDBAvailable = isIndexedDBAvailable;\nexports.isMobileCordova = isMobileCordova;\nexports.isNode = isNode;\nexports.isNodeSdk = isNodeSdk;\nexports.isReactNative = isReactNative;\nexports.isSafari = isSafari;\nexports.isUWP = isUWP;\nexports.isValidFormat = isValidFormat;\nexports.isValidTimestamp = isValidTimestamp;\nexports.issuedAtTime = issuedAtTime;\nexports.jsonEval = jsonEval;\nexports.map = map;\nexports.querystring = querystring;\nexports.querystringDecode = querystringDecode;\nexports.safeGet = safeGet;\nexports.stringLength = stringLength;\nexports.stringToByteArray = stringToByteArray$1;\nexports.stringify = stringify;\nexports.validateArgCount = validateArgCount;\nexports.validateCallback = validateCallback;\nexports.validateContextObject = validateContextObject;\nexports.validateIndexedDBOpenable = validateIndexedDBOpenable;\nexports.validateNamespace = validateNamespace;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")},function(module,exports){eval('var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function("return this")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === "object") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLENBQUosQyxDQUVBOztBQUNBQSxDQUFDLEdBQUksWUFBVztBQUNmLFNBQU8sSUFBUDtBQUNBLENBRkcsRUFBSjs7QUFJQSxJQUFJO0FBQ0g7QUFDQUEsR0FBQyxHQUFHQSxDQUFDLElBQUksSUFBSUMsUUFBSixDQUFhLGFBQWIsR0FBVDtBQUNBLENBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDWDtBQUNBLE1BQUksT0FBT0MsTUFBUCxLQUFrQixRQUF0QixFQUFnQ0gsQ0FBQyxHQUFHRyxNQUFKO0FBQ2hDLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLENBQWpCIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n')},function(module){eval('module.exports = JSON.parse("{\\"firebaseKeys\\":{\\"apiKey\\":\\"AIzaSyBtg9BK9CEVlWb1-EeikDjMDFSDjPG76LI\\",\\"authDomain\\":\\"pinterest-6c6db.firebaseapp.com\\",\\"databaseURL\\":\\"https://pinterest-6c6db.firebaseio.com\\",\\"projectId\\":\\"pinterest-6c6db\\",\\"storageBucket\\":\\"pinterest-6c6db.appspot.com\\",\\"messagingSenderId\\":\\"396539053213\\",\\"appId\\":\\"1:396539053213:web:e1fc9360bc170cc1318074\\",\\"measurementId\\":\\"G-SPFTCVS039\\"}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI3LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(firebase_app__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);\n/* harmony import */ var _components_auth_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);\n/* harmony import */ var _components_navBar_navBar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);\n\n\n\n\n\nvar checkLoginStatus = function checkLoginStatus() {\n  firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.auth().onAuthStateChanged(function (user) {\n    if (user) {\n      // const currentUser = userData.setCurrentUser(user);\n      _components_navBar_navBar__WEBPACK_IMPORTED_MODULE_3__[/* default */ \"a\"].pinNavbar(); // viewHelper.viewListener('cows-link');\n    } else {\n      _components_auth_auth__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].loginButton();\n      $('#nav').html('');\n    }\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  checkLoginStatus: checkLoginStatus\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdHMvaGVscGVycy9kYXRhL2F1dGhEYXRhLmpzP2NlNDMiXSwibmFtZXMiOlsiY2hlY2tMb2dpblN0YXR1cyIsImZpcmViYXNlIiwibmF2QmFyIiwiYXV0aCIsIiQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTs7QUFFQSxJQUFNQSxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLEdBQU07QUFDN0JDLHFEQUFRLENBQVJBLDBCQUFtQyxnQkFBVTtBQUMzQyxjQUFVO0FBQ1I7QUFDQUMsK0VBQU0sQ0FGRSxTQUVSQSxHQUZRLENBR1I7QUFIRixXQUlPO0FBQ0xDLDJFQUFJLENBQUpBO0FBQ0FDLE9BQUMsQ0FBREEsTUFBQyxDQUFEQTtBQUNEO0FBUkhIO0FBREY7O0FBWWU7QUFBRUQsa0JBQWdCLEVBQWhCQTtBQUFGLENBQWYsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2FwcCc7XHJcbmltcG9ydCAnZmlyZWJhc2UvYXV0aCc7XHJcblxyXG5pbXBvcnQgYXV0aCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2F1dGgvYXV0aCc7XHJcbmltcG9ydCBuYXZCYXIgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9uYXZCYXIvbmF2QmFyJztcclxuXHJcbmNvbnN0IGNoZWNrTG9naW5TdGF0dXMgPSAoKSA9PiB7XHJcbiAgZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZCgodXNlcikgPT4ge1xyXG4gICAgaWYgKHVzZXIpIHtcclxuICAgICAgLy8gY29uc3QgY3VycmVudFVzZXIgPSB1c2VyRGF0YS5zZXRDdXJyZW50VXNlcih1c2VyKTtcclxuICAgICAgbmF2QmFyLnBpbk5hdmJhcigpO1xyXG4gICAgICAvLyB2aWV3SGVscGVyLnZpZXdMaXN0ZW5lcignY293cy1saW5rJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhdXRoLmxvZ2luQnV0dG9uKCk7XHJcbiAgICAgICQoJyNuYXYnKS5odG1sKCcnKTtcclxuICAgIH1cclxuICB9KTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgeyBjaGVja0xvZ2luU3RhdHVzIH07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(firebase_app__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);\n\n\n\nvar signMeIn = function signMeIn() {\n  var provider = new firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.auth.GoogleAuthProvider();\n  firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.auth().signInWithPopup(provider);\n};\n\nvar loginButton = function loginButton() {\n  var domString = "<div id=\\"auth\\">\\n    <span style=\\"font-size: 5em; color: Tomato;\\"><i class=\\"fab fa-pinterest\\"></i></span>\\n    <h4>Welcome to Pinterest!</h4>\\n    <button id=\\"google-auth\\" class=\\"btn btn-primary btn-lg\\">\\n      <i class=\\"fab fa-google\\"></i></i>Google Login\\n    </button>\\n  </div>";\n  $(\'#app\').html(domString);\n  $(\'#google-auth\').on(\'click\', signMeIn);\n};\n\n/* harmony default export */ __webpack_exports__["a"] = ({\n  loginButton: loginButton\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdHMvY29tcG9uZW50cy9hdXRoL2F1dGguanM/NWQzYyJdLCJuYW1lcyI6WyJzaWduTWVJbiIsInByb3ZpZGVyIiwiZmlyZWJhc2UiLCJsb2dpbkJ1dHRvbiIsImRvbVN0cmluZyIsIiQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUEsSUFBTUEsUUFBUSxHQUFHLFNBQVhBLFFBQVcsR0FBTTtBQUNyQixNQUFNQyxRQUFRLEdBQUcsSUFBSUMsbURBQVEsQ0FBUkEsS0FBckIsa0JBQWlCLEVBQWpCO0FBRUFBLHFEQUFRLENBQVJBO0FBSEY7O0FBTUEsSUFBTUMsV0FBVyxHQUFHLFNBQWRBLFdBQWMsR0FBTTtBQUN4QixNQUFNQyxTQUFTLEdBQWY7QUFRQUMsR0FBQyxDQUFEQSxNQUFDLENBQURBO0FBQ0FBLEdBQUMsQ0FBREEsY0FBQyxDQUFEQTtBQVZGOztBQVllO0FBQUVGLGFBQVcsRUFBWEE7QUFBRixDQUFmLEUiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnO1xyXG5pbXBvcnQgJ2ZpcmViYXNlL2F1dGgnO1xyXG5cclxuY29uc3Qgc2lnbk1lSW4gPSAoKSA9PiB7XHJcbiAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZmlyZWJhc2UuYXV0aC5Hb29nbGVBdXRoUHJvdmlkZXIoKTtcclxuXHJcbiAgZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhQb3B1cChwcm92aWRlcik7XHJcbn07XHJcblxyXG5jb25zdCBsb2dpbkJ1dHRvbiA9ICgpID0+IHtcclxuICBjb25zdCBkb21TdHJpbmcgPSBgPGRpdiBpZD1cImF1dGhcIj5cclxuICAgIDxzcGFuIHN0eWxlPVwiZm9udC1zaXplOiA1ZW07IGNvbG9yOiBUb21hdG87XCI+PGkgY2xhc3M9XCJmYWIgZmEtcGludGVyZXN0XCI+PC9pPjwvc3Bhbj5cclxuICAgIDxoND5XZWxjb21lIHRvIFBpbnRlcmVzdCE8L2g0PlxyXG4gICAgPGJ1dHRvbiBpZD1cImdvb2dsZS1hdXRoXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuLWxnXCI+XHJcbiAgICAgIDxpIGNsYXNzPVwiZmFiIGZhLWdvb2dsZVwiPjwvaT48L2k+R29vZ2xlIExvZ2luXHJcbiAgICA8L2J1dHRvbj5cclxuICA8L2Rpdj5gO1xyXG5cclxuICAkKCcjYXBwJykuaHRtbChkb21TdHJpbmcpO1xyXG4gICQoJyNnb29nbGUtYXV0aCcpLm9uKCdjbGljaycsIHNpZ25NZUluKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgeyBsb2dpbkJ1dHRvbiB9O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(firebase_app__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);\n\n\n\nvar logoutEvent = function logoutEvent() {\n  $(\'#navbar-logout-button\').on(\'click\', function (e) {\n    e.preventDefault(); // NOTE FOR STUDENTS\n    // Remove session storage if they log out in the same session and in case another user logs in, we want the API check to happen.\n\n    window.sessionStorage.removeItem(\'ua\');\n    firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.auth().signOut();\n    window.location.href = \'/\';\n  });\n};\n\nvar pinNavbar = function pinNavbar() {\n  $(\'#nav\').html("<nav class=\\"navbar navbar-expand-lg navbar-light bg-light\\">\\n      <a class=\\"navbar-brand\\" href=\\"#\\"><i class=\\"fab fa-pinterest\\"></i>Pinterest</a>\\n      <button class=\\"navbar-toggler\\" type=\\"button\\" \\n      data-toggle=\\"collapse\\" data-target=\\"#navbarSupportedContent\\" aria-controls=\\"navbarSupportedContent\\" aria-expanded=\\"false\\" aria-label=\\"Toggle navigation\\">\\n        <span class=\\"navbar-toggler-icon\\"></span>\\n      </button>\\n      <div class=\\"collapse navbar-collapse\\" id=\\"navbarSupportedContent\\">\\n      <ul class=\\"navbar-nav mr-auto\\">\\n      <li class=\\"nav-item mx-3\\"  id=\\"boards-link\\">\\n        <a class=\\"nav-link\\" href=\\"#\\"><i class=\\"fas fa-paw\\"></i> Boards</a>\\n      </li>\\n      <li class=\\"nav-item mx-3\\" id=\\"pins-link\\">\\n        <a class=\\"nav-link\\" href=\\"#\\"><i class=\\"fas fa-thumbtack\\"></i>Pins</a>\\n      </li>\\n      <li class=\\"nav-item mx-3\\" id=\\"add-pin-link\\">\\n        <a class=\\"nav-link\\" href=\\"#\\"><i class=\\"fas fa-plus-circle\\"></i> Add A Pin</a>\\n      </li>\\n    </ul>\\n        <ul class=\\"navbar-nav ml-auto\\">\\n          <li class=\\"user-info-nav\\">\\n            <h5>Welcome, Sassy!</h5>\\n          </li>\\n          <li class=\\"nav-item\\">\\n            <button class=\\"nav-link btn btn-danger p-2\\" id=\\"navbar-logout-button\\">Logout</button>\\n          </li>\\n        </ul>\\n      </div>\\n    </nav>");\n  logoutEvent();\n};\n\n/* harmony default export */ __webpack_exports__["a"] = ({\n  pinNavbar: pinNavbar\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdHMvY29tcG9uZW50cy9uYXZCYXIvbmF2QmFyLmpzPzE5YzMiXSwibmFtZXMiOlsibG9nb3V0RXZlbnQiLCIkIiwiZSIsIndpbmRvdyIsImZpcmViYXNlIiwicGluTmF2YmFyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBLElBQU1BLFdBQVcsR0FBRyxTQUFkQSxXQUFjLEdBQU07QUFDeEJDLEdBQUMsQ0FBREEsdUJBQUMsQ0FBREEsYUFBdUMsYUFBTztBQUM1Q0MsS0FBQyxDQUQyQyxjQUM1Q0EsR0FENEMsQ0FHNUM7QUFDQTs7QUFDQUMsVUFBTSxDQUFOQTtBQUNBQyx1REFBUSxDQUFSQTtBQUNBRCxVQUFNLENBQU5BO0FBUEZGO0FBREY7O0FBWUEsSUFBTUksU0FBUyxHQUFHLFNBQVpBLFNBQVksR0FBTTtBQUN0QkosR0FBQyxDQUFEQSxNQUFDLENBQURBO0FBK0JBRCxhQUFXO0FBaENiOztBQW1DZTtBQUFFSyxXQUFTLEVBQVRBO0FBQUYsQ0FBZixFIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZpcmViYXNlIGZyb20gJ2ZpcmViYXNlL2FwcCc7XHJcbmltcG9ydCAnZmlyZWJhc2UvYXV0aCc7XHJcblxyXG5jb25zdCBsb2dvdXRFdmVudCA9ICgpID0+IHtcclxuICAkKCcjbmF2YmFyLWxvZ291dC1idXR0b24nKS5vbignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIC8vIE5PVEUgRk9SIFNUVURFTlRTXHJcbiAgICAvLyBSZW1vdmUgc2Vzc2lvbiBzdG9yYWdlIGlmIHRoZXkgbG9nIG91dCBpbiB0aGUgc2FtZSBzZXNzaW9uIGFuZCBpbiBjYXNlIGFub3RoZXIgdXNlciBsb2dzIGluLCB3ZSB3YW50IHRoZSBBUEkgY2hlY2sgdG8gaGFwcGVuLlxyXG4gICAgd2luZG93LnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ3VhJyk7XHJcbiAgICBmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpO1xyXG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLyc7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBwaW5OYXZiYXIgPSAoKSA9PiB7XHJcbiAgJCgnI25hdicpLmh0bWwoXHJcbiAgICBgPG5hdiBjbGFzcz1cIm5hdmJhciBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1saWdodCBiZy1saWdodFwiPlxyXG4gICAgICA8YSBjbGFzcz1cIm5hdmJhci1icmFuZFwiIGhyZWY9XCIjXCI+PGkgY2xhc3M9XCJmYWIgZmEtcGludGVyZXN0XCI+PC9pPlBpbnRlcmVzdDwvYT5cclxuICAgICAgPGJ1dHRvbiBjbGFzcz1cIm5hdmJhci10b2dnbGVyXCIgdHlwZT1cImJ1dHRvblwiIFxyXG4gICAgICBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS10YXJnZXQ9XCIjbmF2YmFyU3VwcG9ydGVkQ29udGVudFwiIGFyaWEtY29udHJvbHM9XCJuYXZiYXJTdXBwb3J0ZWRDb250ZW50XCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuYXZpZ2F0aW9uXCI+XHJcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJuYXZiYXItdG9nZ2xlci1pY29uXCI+PC9zcGFuPlxyXG4gICAgICA8L2J1dHRvbj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZVwiIGlkPVwibmF2YmFyU3VwcG9ydGVkQ29udGVudFwiPlxyXG4gICAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2IG1yLWF1dG9cIj5cclxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW0gbXgtM1wiICBpZD1cImJvYXJkcy1saW5rXCI+XHJcbiAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGlua1wiIGhyZWY9XCIjXCI+PGkgY2xhc3M9XCJmYXMgZmEtcGF3XCI+PC9pPiBCb2FyZHM8L2E+XHJcbiAgICAgIDwvbGk+XHJcbiAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtIG14LTNcIiBpZD1cInBpbnMtbGlua1wiPlxyXG4gICAgICAgIDxhIGNsYXNzPVwibmF2LWxpbmtcIiBocmVmPVwiI1wiPjxpIGNsYXNzPVwiZmFzIGZhLXRodW1idGFja1wiPjwvaT5QaW5zPC9hPlxyXG4gICAgICA8L2xpPlxyXG4gICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbSBteC0zXCIgaWQ9XCJhZGQtcGluLWxpbmtcIj5cclxuICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgaHJlZj1cIiNcIj48aSBjbGFzcz1cImZhcyBmYS1wbHVzLWNpcmNsZVwiPjwvaT4gQWRkIEEgUGluPC9hPlxyXG4gICAgICA8L2xpPlxyXG4gICAgPC91bD5cclxuICAgICAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2IG1sLWF1dG9cIj5cclxuICAgICAgICAgIDxsaSBjbGFzcz1cInVzZXItaW5mby1uYXZcIj5cclxuICAgICAgICAgICAgPGg1PldlbGNvbWUsIFNhc3N5ITwvaDU+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm5hdi1saW5rIGJ0biBidG4tZGFuZ2VyIHAtMlwiIGlkPVwibmF2YmFyLWxvZ291dC1idXR0b25cIj5Mb2dvdXQ8L2J1dHRvbj5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L25hdj5gXHJcbiAgKTtcclxuXHJcbiAgbG9nb3V0RXZlbnQoKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHsgcGluTmF2YmFyIH07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(firebase_app__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _helpers_apiKeys_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\nvar _helpers_apiKeys_json__WEBPACK_IMPORTED_MODULE_1___namespace = /*#__PURE__*/__webpack_require__.t(7, 1);\n/* harmony import */ var _helpers_data_authData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);\n/* harmony import */ var _styles_main_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(15);\n/* harmony import */ var _styles_main_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_main_scss__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nvar init = function init() {\n  firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.initializeApp(_helpers_apiKeys_json__WEBPACK_IMPORTED_MODULE_1__.firebaseKeys);\n  _helpers_data_authData__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].checkLoginStatus();\n};\n\ninit();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvamF2YXNjcmlwdHMvbWFpbi5qcz8yN2ZhIl0sIm5hbWVzIjpbImluaXQiLCJmaXJlYmFzZSIsImFwaUtleXMiLCJhdXRoRGF0YSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQU1BLElBQUksR0FBRyxTQUFQQSxJQUFPLEdBQU07QUFDakJDLHFEQUFRLENBQVJBLGNBQXVCQyxrREFBTyxDQUE5QkQ7QUFDQUUsd0VBQVEsQ0FBUkE7QUFGRjs7QUFLQUgsSUFBSSIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaXJlYmFzZSBmcm9tICdmaXJlYmFzZS9hcHAnO1xyXG5pbXBvcnQgYXBpS2V5cyBmcm9tICcuL2hlbHBlcnMvYXBpS2V5cy5qc29uJztcclxuaW1wb3J0IGF1dGhEYXRhIGZyb20gJy4vaGVscGVycy9kYXRhL2F1dGhEYXRhJztcclxuaW1wb3J0ICcuLi9zdHlsZXMvbWFpbi5zY3NzJztcclxuXHJcbmNvbnN0IGluaXQgPSAoKSA9PiB7XHJcbiAgZmlyZWJhc2UuaW5pdGlhbGl6ZUFwcChhcGlLZXlzLmZpcmViYXNlS2V5cyk7XHJcbiAgYXV0aERhdGEuY2hlY2tMb2dpblN0YXR1cygpO1xyXG59O1xyXG5cclxuaW5pdCgpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, \'__esModule\', {\n  value: true\n});\n\nvar tslib = __webpack_require__(1);\n\nvar util = __webpack_require__(5);\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nvar Component =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n\n    this.serviceProps = {};\n    this.instantiationMode = "LAZY"\n    /* LAZY */\n    ;\n  }\n\n  Component.prototype.setInstantiationMode = function (mode) {\n    this.instantiationMode = mode;\n    return this;\n  };\n\n  Component.prototype.setMultipleInstances = function (multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  };\n\n  Component.prototype.setServiceProps = function (props) {\n    this.serviceProps = props;\n    return this;\n  };\n\n  return Component;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_ENTRY_NAME = \'[DEFAULT]\';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provider for instance for service name T, e.g. \'auth\', \'auth-internal\'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\n\nvar Provider =\n/** @class */\nfunction () {\n  function Provider(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n\n\n  Provider.prototype.get = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    } // if multipleInstances is not supported, use the default name\n\n\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      var deferred = new util.Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred); // If the service instance is available, resolve the promise with it immediately\n\n      try {\n        var instance = this.getOrInitializeService(normalizedIdentifier);\n\n        if (instance) {\n          deferred.resolve(instance);\n        }\n      } catch (e) {// when the instance factory throws an exception during get(), it should not cause\n        // a fatal error. We just return the unresolved promise in this case.\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  };\n\n  Provider.prototype.getImmediate = function (options) {\n    var _a = tslib.__assign({\n      identifier: DEFAULT_ENTRY_NAME,\n      optional: false\n    }, options),\n        identifier = _a.identifier,\n        optional = _a.optional; // if multipleInstances is not supported, use the default name\n\n\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    try {\n      var instance = this.getOrInitializeService(normalizedIdentifier);\n\n      if (!instance) {\n        if (optional) {\n          return null;\n        }\n\n        throw Error("Service " + this.name + " is not available");\n      }\n\n      return instance;\n    } catch (e) {\n      if (optional) {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  Provider.prototype.getComponent = function () {\n    return this.component;\n  };\n\n  Provider.prototype.setComponent = function (component) {\n    var e_1, _a;\n\n    if (component.name !== this.name) {\n      throw Error("Mismatching Component " + component.name + " for Provider " + this.name + ".");\n    }\n\n    if (this.component) {\n      throw Error("Component for " + this.name + " has already been provided");\n    }\n\n    this.component = component; // if the service is eager, initialize the default instance\n\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService(DEFAULT_ENTRY_NAME);\n      } catch (e) {// when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    try {\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = tslib.__read(_c.value, 2),\n            instanceIdentifier = _d[0],\n            instanceDeferred = _d[1];\n\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          var instance = this.getOrInitializeService(normalizedIdentifier);\n          instanceDeferred.resolve(instance);\n        } catch (e) {// when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  Provider.prototype.clearInstance = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  }; // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n\n\n  Provider.prototype.delete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var services;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            services = Array.from(this.instances.values());\n            return [4\n            /*yield*/\n            , Promise.all(tslib.__spread(services.filter(function (service) {\n              return \'INTERNAL\' in service;\n            }) // legacy services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service.INTERNAL.delete();\n            }), services.filter(function (service) {\n              return \'_delete\' in service;\n            }) // modularized services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service._delete();\n            })))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Provider.prototype.isComponentSet = function () {\n    return this.component != null;\n  };\n\n  Provider.prototype.getOrInitializeService = function (identifier) {\n    var instance = this.instances.get(identifier);\n\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));\n      this.instances.set(identifier, instance);\n    }\n\n    return instance || null;\n  };\n\n  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  };\n\n  return Provider;\n}(); // undefined should be passed to the service factory for the default instance\n\n\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component) {\n  return component.instantiationMode === "EAGER"\n  /* EAGER */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nvar ComponentContainer =\n/** @class */\nfunction () {\n  function ComponentContainer(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n\n\n  ComponentContainer.prototype.addComponent = function (component) {\n    var provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      throw new Error("Component " + component.name + " has already been registered with " + this.name);\n    }\n\n    provider.setComponent(component);\n  };\n\n  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\n    var provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  };\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n\n\n  ComponentContainer.prototype.getProvider = function (name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    } // create a Provider for a service that hasn\'t registered with Firebase\n\n\n    var provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  };\n\n  ComponentContainer.prototype.getProviders = function () {\n    return Array.from(this.providers.values());\n  };\n\n  return ComponentContainer;\n}();\n\nexports.Component = Component;\nexports.ComponentContainer = ComponentContainer;\nexports.Provider = Provider;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogLevel", function() { return LogLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLogLevel", function() { return setLogLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUserLogHandler", function() { return setUserLogHandler; });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the "License");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an "AS IS" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n/**\r\n * A container for all of the Logger instances\r\n */\n\n\nvar instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";\n  LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";\n  LogLevel[LogLevel["INFO"] = 2] = "INFO";\n  LogLevel[LogLevel["WARN"] = 3] = "WARN";\n  LogLevel[LogLevel["ERROR"] = 4] = "ERROR";\n  LogLevel[LogLevel["SILENT"] = 5] = "SILENT";\n})(LogLevel || (LogLevel = {}));\n\nvar levelStringToEnum = {\n  \'debug\': LogLevel.DEBUG,\n  \'verbose\': LogLevel.VERBOSE,\n  \'info\': LogLevel.INFO,\n  \'warn\': LogLevel.WARN,\n  \'error\': LogLevel.ERROR,\n  \'silent\': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\n\nvar defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\n\nvar ConsoleMethod = (_a = {}, _a[LogLevel.DEBUG] = \'log\', _a[LogLevel.VERBOSE] = \'log\', _a[LogLevel.INFO] = \'info\', _a[LogLevel.WARN] = \'warn\', _a[LogLevel.ERROR] = \'error\', _a);\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\n\nvar defaultLogHandler = function (instance, logType) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  if (logType < instance.logLevel) {\n    return;\n  }\n\n  var now = new Date().toISOString();\n  var method = ConsoleMethod[logType];\n\n  if (method) {\n    console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));\n  } else {\n    throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");\n  }\n};\n\nvar Logger =\n/** @class */\nfunction () {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase\'s logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  function Logger(name) {\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n\n    instances.push(this);\n  }\n\n  Object.defineProperty(Logger.prototype, "logLevel", {\n    get: function () {\n      return this._logLevel;\n    },\n    set: function (val) {\n      if (!(val in LogLevel)) {\n        throw new TypeError("Invalid value \\"" + val + "\\" assigned to `logLevel`");\n      }\n\n      this._logLevel = val;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Workaround for setter/getter having to be the same type.\n\n  Logger.prototype.setLogLevel = function (val) {\n    this._logLevel = typeof val === \'string\' ? levelStringToEnum[val] : val;\n  };\n\n  Object.defineProperty(Logger.prototype, "logHandler", {\n    get: function () {\n      return this._logHandler;\n    },\n    set: function (val) {\n      if (typeof val !== \'function\') {\n        throw new TypeError(\'Value assigned to `logHandler` must be a function\');\n      }\n\n      this._logHandler = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Logger.prototype, "userLogHandler", {\n    get: function () {\n      return this._userLogHandler;\n    },\n    set: function (val) {\n      this._userLogHandler = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * The functions below are all based on the `console` interface\r\n   */\n\n  Logger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));\n\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));\n  };\n\n  Logger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));\n\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));\n  };\n\n  Logger.prototype.info = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));\n\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));\n  };\n\n  Logger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));\n\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));\n  };\n\n  Logger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));\n\n    this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));\n  };\n\n  return Logger;\n}();\n\nfunction setLogLevel(level) {\n  instances.forEach(function (inst) {\n    inst.setLogLevel(level);\n  });\n}\n\nfunction setUserLogHandler(logCallback, options) {\n  var _loop_1 = function (instance) {\n    var customLogLevel = null;\n\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = function (instance, level) {\n        var args = [];\n\n        for (var _i = 2; _i < arguments.length; _i++) {\n          args[_i - 2] = arguments[_i];\n        }\n\n        var message = args.map(function (arg) {\n          if (arg == null) {\n            return null;\n          } else if (typeof arg === \'string\') {\n            return arg;\n          } else if (typeof arg === \'number\' || typeof arg === \'boolean\') {\n            return arg.toString();\n          } else if (arg instanceof Error) {\n            return arg.message;\n          } else {\n            try {\n              return JSON.stringify(arg);\n            } catch (ignored) {\n              return null;\n            }\n          }\n        }).filter(function (arg) {\n          return arg;\n        }).join(\' \');\n\n        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase(),\n            message: message,\n            args: args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  };\n\n  for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {\n    var instance = instances_1[_i];\n\n    _loop_1(instance);\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {(function () {\n  var firebase = __webpack_require__(4).default;\n  /*\n  Copyright The Closure Library Authors.\n  SPDX-License-Identifier: Apache-2.0\n  */\n\n\n  var k,\n      aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {\n    a != Array.prototype && a != Object.prototype && (a[b] = c.value);\n  };\n\n  function ba(a) {\n    a = ["object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global, a];\n\n    for (var b = 0; b < a.length; ++b) {\n      var c = a[b];\n      if (c && c.Math == Math) return c;\n    }\n\n    return globalThis;\n  }\n\n  var ca = ba(this);\n\n  function da(a, b) {\n    if (b) {\n      var c = ca;\n      a = a.split(".");\n\n      for (var d = 0; d < a.length - 1; d++) {\n        var e = a[d];\n        e in c || (c[e] = {});\n        c = c[e];\n      }\n\n      a = a[a.length - 1];\n      d = c[a];\n      b = b(d);\n      b != d && null != b && aa(c, a, {\n        configurable: !0,\n        writable: !0,\n        value: b\n      });\n    }\n  }\n\n  function ea(a) {\n    var b = 0;\n    return function () {\n      return b < a.length ? {\n        done: !1,\n        value: a[b++]\n      } : {\n        done: !0\n      };\n    };\n  }\n\n  function fa(a) {\n    var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];\n    return b ? b.call(a) : {\n      next: ea(a)\n    };\n  }\n\n  da("Promise", function (a) {\n    function b(g) {\n      this.b = 0;\n      this.c = void 0;\n      this.a = [];\n      var h = this.f();\n\n      try {\n        g(h.resolve, h.reject);\n      } catch (m) {\n        h.reject(m);\n      }\n    }\n\n    function c() {\n      this.a = null;\n    }\n\n    function d(g) {\n      return g instanceof b ? g : new b(function (h) {\n        h(g);\n      });\n    }\n\n    if (a) return a;\n\n    c.prototype.b = function (g) {\n      if (null == this.a) {\n        this.a = [];\n        var h = this;\n        this.c(function () {\n          h.g();\n        });\n      }\n\n      this.a.push(g);\n    };\n\n    var e = ca.setTimeout;\n\n    c.prototype.c = function (g) {\n      e(g, 0);\n    };\n\n    c.prototype.g = function () {\n      for (; this.a && this.a.length;) {\n        var g = this.a;\n        this.a = [];\n\n        for (var h = 0; h < g.length; ++h) {\n          var m = g[h];\n          g[h] = null;\n\n          try {\n            m();\n          } catch (p) {\n            this.f(p);\n          }\n        }\n      }\n\n      this.a = null;\n    };\n\n    c.prototype.f = function (g) {\n      this.c(function () {\n        throw g;\n      });\n    };\n\n    b.prototype.f = function () {\n      function g(p) {\n        return function (v) {\n          m || (m = !0, p.call(h, v));\n        };\n      }\n\n      var h = this,\n          m = !1;\n      return {\n        resolve: g(this.m),\n        reject: g(this.g)\n      };\n    };\n\n    b.prototype.m = function (g) {\n      if (g === this) this.g(new TypeError("A Promise cannot resolve to itself"));else if (g instanceof b) this.s(g);else {\n        a: switch (typeof g) {\n          case "object":\n            var h = null != g;\n            break a;\n\n          case "function":\n            h = !0;\n            break a;\n\n          default:\n            h = !1;\n        }\n\n        h ? this.u(g) : this.h(g);\n      }\n    };\n\n    b.prototype.u = function (g) {\n      var h = void 0;\n\n      try {\n        h = g.then;\n      } catch (m) {\n        this.g(m);\n        return;\n      }\n\n      "function" == typeof h ? this.w(h, g) : this.h(g);\n    };\n\n    b.prototype.g = function (g) {\n      this.i(2, g);\n    };\n\n    b.prototype.h = function (g) {\n      this.i(1, g);\n    };\n\n    b.prototype.i = function (g, h) {\n      if (0 != this.b) throw Error("Cannot settle(" + g + ", " + h + "): Promise already settled in state" + this.b);\n      this.b = g;\n      this.c = h;\n      this.l();\n    };\n\n    b.prototype.l = function () {\n      if (null != this.a) {\n        for (var g = 0; g < this.a.length; ++g) f.b(this.a[g]);\n\n        this.a = null;\n      }\n    };\n\n    var f = new c();\n\n    b.prototype.s = function (g) {\n      var h = this.f();\n      g.Oa(h.resolve, h.reject);\n    };\n\n    b.prototype.w = function (g, h) {\n      var m = this.f();\n\n      try {\n        g.call(h, m.resolve, m.reject);\n      } catch (p) {\n        m.reject(p);\n      }\n    };\n\n    b.prototype.then = function (g, h) {\n      function m(A, Q) {\n        return "function" == typeof A ? function (wa) {\n          try {\n            p(A(wa));\n          } catch (ud) {\n            v(ud);\n          }\n        } : Q;\n      }\n\n      var p,\n          v,\n          C = new b(function (A, Q) {\n        p = A;\n        v = Q;\n      });\n      this.Oa(m(g, p), m(h, v));\n      return C;\n    };\n\n    b.prototype.catch = function (g) {\n      return this.then(void 0, g);\n    };\n\n    b.prototype.Oa = function (g, h) {\n      function m() {\n        switch (p.b) {\n          case 1:\n            g(p.c);\n            break;\n\n          case 2:\n            h(p.c);\n            break;\n\n          default:\n            throw Error("Unexpected state: " + p.b);\n        }\n      }\n\n      var p = this;\n      null == this.a ? f.b(m) : this.a.push(m);\n    };\n\n    b.resolve = d;\n\n    b.reject = function (g) {\n      return new b(function (h, m) {\n        m(g);\n      });\n    };\n\n    b.race = function (g) {\n      return new b(function (h, m) {\n        for (var p = fa(g), v = p.next(); !v.done; v = p.next()) d(v.value).Oa(h, m);\n      });\n    };\n\n    b.all = function (g) {\n      var h = fa(g),\n          m = h.next();\n      return m.done ? d([]) : new b(function (p, v) {\n        function C(wa) {\n          return function (ud) {\n            A[wa] = ud;\n            Q--;\n            0 == Q && p(A);\n          };\n        }\n\n        var A = [],\n            Q = 0;\n\n        do A.push(void 0), Q++, d(m.value).Oa(C(A.length - 1), v), m = h.next(); while (!m.done);\n      });\n    };\n\n    return b;\n  });\n  var ha = ha || {},\n      l = this || self,\n      ia = /^[\\w+/_-]+[=]{0,2}$/,\n      ja = null;\n\n  function ka() {}\n\n  function la(a) {\n    var b = typeof a;\n    if ("object" == b) {\n      if (a) {\n        if (a instanceof Array) return "array";\n        if (a instanceof Object) return b;\n        var c = Object.prototype.toString.call(a);\n        if ("[object Window]" == c) return "object";\n        if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";\n        if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";\n      } else return "null";\n    } else if ("function" == b && "undefined" == typeof a.call) return "object";\n    return b;\n  }\n\n  function ma(a) {\n    var b = la(a);\n    return "array" == b || "object" == b && "number" == typeof a.length;\n  }\n\n  function na(a) {\n    return "function" == la(a);\n  }\n\n  function n(a) {\n    var b = typeof a;\n    return "object" == b && null != a || "function" == b;\n  }\n\n  function oa(a) {\n    return Object.prototype.hasOwnProperty.call(a, pa) && a[pa] || (a[pa] = ++qa);\n  }\n\n  var pa = "closure_uid_" + (1E9 * Math.random() >>> 0),\n      qa = 0;\n\n  function ra(a, b, c) {\n    return a.call.apply(a.bind, arguments);\n  }\n\n  function sa(a, b, c) {\n    if (!a) throw Error();\n\n    if (2 < arguments.length) {\n      var d = Array.prototype.slice.call(arguments, 2);\n      return function () {\n        var e = Array.prototype.slice.call(arguments);\n        Array.prototype.unshift.apply(e, d);\n        return a.apply(b, e);\n      };\n    }\n\n    return function () {\n      return a.apply(b, arguments);\n    };\n  }\n\n  function q(a, b, c) {\n    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q = ra : q = sa;\n    return q.apply(null, arguments);\n  }\n\n  function ta(a, b) {\n    var c = Array.prototype.slice.call(arguments, 1);\n    return function () {\n      var d = c.slice();\n      d.push.apply(d, arguments);\n      return a.apply(this, d);\n    };\n  }\n\n  var ua = Date.now || function () {\n    return +new Date();\n  };\n\n  function r(a, b) {\n    function c() {}\n\n    c.prototype = b.prototype;\n    a.Za = b.prototype;\n    a.prototype = new c();\n    a.prototype.constructor = a;\n  }\n\n  ;\n  /*\n  Copyright 2017 Google Inc.\n  Licensed under the Apache License, Version 2.0 (the "License");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an "AS IS" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  */\n\n  function t(a, b, c) {\n    this.code = va + a;\n    this.message = b || xa[a] || "";\n    this.a = c || null;\n  }\n\n  r(t, Error);\n\n  t.prototype.v = function () {\n    var a = {\n      code: this.code,\n      message: this.message\n    };\n    this.a && (a.serverResponse = this.a);\n    return a;\n  };\n\n  t.prototype.toJSON = function () {\n    return this.v();\n  };\n\n  function ya(a) {\n    var b = a && a.code;\n    return b ? new t(b.substring(va.length), a.message, a.serverResponse) : null;\n  }\n\n  var va = "auth/",\n      xa = {\n    "admin-restricted-operation": "This operation is restricted to administrators only.",\n    "argument-error": "",\n    "app-not-authorized": "This app, identified by the domain where it\'s hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",\n    "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",\n    "captcha-check-failed": "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",\n    "code-expired": "The SMS code has expired. Please re-send the verification code to try again.",\n    "cordova-not-ready": "Cordova framework is not ready.",\n    "cors-unsupported": "This browser is not supported.",\n    "credential-already-in-use": "This credential is already associated with a different user account.",\n    "custom-token-mismatch": "The custom token corresponds to a different audience.",\n    "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",\n    "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",\n    "email-change-needs-verification": "Multi-factor users must always have a verified email.",\n    "email-already-in-use": "The email address is already in use by another account.",\n    "expired-action-code": "The action code has expired. ",\n    "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.",\n    "internal-error": "An internal error has occurred.",\n    "invalid-app-credential": "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",\n    "invalid-app-id": "The mobile app identifier is not registed for the current project.",\n    "invalid-user-token": "This user\'s credential isn\'t valid for this project. This can happen if the user\'s token has been tampered with, or if the user isn\'t for the project associated with this API key.",\n    "invalid-auth-event": "An internal error has occurred.",\n    "invalid-verification-code": "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",\n    "invalid-continue-uri": "The continue URL provided in the request is invalid.",\n    "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",\n    "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",\n    "invalid-dynamic-link-domain": "The provided dynamic link domain is not configured or authorized for the current project.",\n    "invalid-email": "The email address is badly formatted.",\n    "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",\n    "invalid-cert-hash": "The SHA-1 certificate hash provided is invalid.",\n    "invalid-credential": "The supplied auth credential is malformed or has expired.",\n    "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",\n    "invalid-multi-factor-session": "The request does not contain a valid proof of first factor successful sign-in.",\n    "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",\n    "invalid-oauth-client-id": "The OAuth client ID provided is either invalid or does not match the specified API key.",\n    "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",\n    "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",\n    "wrong-password": "The password is invalid or the user does not have a password.",\n    "invalid-persistence-type": "The specified persistence type is invalid. It can only be local, session or none.",\n    "invalid-phone-number": "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",\n    "invalid-provider-id": "The specified provider ID is invalid.",\n    "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.",\n    "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",\n    "invalid-verification-id": "The verification ID used to create the phone auth credential is invalid.",\n    "invalid-tenant-id": "The Auth instance\'s tenant ID is invalid.",\n    "multi-factor-info-not-found": "The user does not have a second factor matching the identifier provided.",\n    "multi-factor-auth-required": "Proof of ownership of a second factor is required to complete sign-in.",\n    "missing-android-pkg-name": "An Android Package Name must be provided if the Android App is required to be installed.",\n    "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",\n    "missing-app-credential": "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",\n    "missing-verification-code": "The phone auth credential was created with an empty SMS verification code.",\n    "missing-continue-uri": "A continue URL must be provided in the request.",\n    "missing-iframe-start": "An internal error has occurred.",\n    "missing-ios-bundle-id": "An iOS Bundle ID must be provided if an App Store ID is provided.",\n    "missing-multi-factor-info": "No second factor identifier is provided.",\n    "missing-multi-factor-session": "The request is missing proof of first factor successful sign-in.",\n    "missing-or-invalid-nonce": "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",\n    "missing-phone-number": "To send verification codes, provide a phone number for the recipient.",\n    "missing-verification-id": "The phone auth credential was created with an empty verification ID.",\n    "app-deleted": "This instance of FirebaseApp has been deleted.",\n    "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",\n    "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.",\n    "no-auth-event": "An internal error has occurred.",\n    "no-such-provider": "User was not linked to an account with the given provider.",\n    "null-user": "A null user object was provided as the argument for an operation which requires a non-null user object.",\n    "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",\n    "operation-not-supported-in-this-environment": \'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.\',\n    "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.",\n    "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",\n    "provider-already-linked": "User can only be linked to one identity for the given provider.",\n    "quota-exceeded": "The project\'s quota for this operation has been exceeded.",\n    "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.",\n    "redirect-operation-pending": "A redirect sign-in operation is already pending.",\n    "rejected-credential": "The request contains malformed or mismatching credentials.",\n    "second-factor-already-in-use": "The second factor is already enrolled on this account.",\n    "maximum-second-factor-count-exceeded": "The maximum allowed number of second factors on a user has been exceeded.",\n    "tenant-id-mismatch": "The provided tenant ID does not match the Auth instance\'s tenant ID",\n    timeout: "The operation has timed out.",\n    "user-token-expired": "The user\'s credential is no longer valid. The user must sign in again.",\n    "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",\n    "unauthorized-continue-uri": "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",\n    "unsupported-first-factor": "Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.",\n    "unsupported-persistence-type": "The current environment does not support the specified persistence type.",\n    "unsupported-tenant-operation": "This operation is not supported in a multi-tenant context.",\n    "unverified-email": "The operation requires a verified email.",\n    "user-cancelled": "The user did not grant your application the permissions it requested.",\n    "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.",\n    "user-disabled": "The user account has been disabled by an administrator.",\n    "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",\n    "user-signed-out": "",\n    "weak-password": "The password must be 6 characters long or more.",\n    "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled."\n  };\n  var za = {\n    hd: {\n      Ra: "https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",\n      Xa: "https://staging-securetoken.sandbox.googleapis.com/v1/token",\n      Ua: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/",\n      id: "b"\n    },\n    pd: {\n      Ra: "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",\n      Xa: "https://securetoken.googleapis.com/v1/token",\n      Ua: "https://identitytoolkit.googleapis.com/v2/",\n      id: "p"\n    },\n    rd: {\n      Ra: "https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",\n      Xa: "https://staging-securetoken.sandbox.googleapis.com/v1/token",\n      Ua: "https://staging-identitytoolkit.sandbox.googleapis.com/v2/",\n      id: "s"\n    },\n    sd: {\n      Ra: "https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",\n      Xa: "https://test-securetoken.sandbox.googleapis.com/v1/token",\n      Ua: "https://test-identitytoolkit.sandbox.googleapis.com/v2/",\n      id: "t"\n    }\n  };\n\n  function Aa(a) {\n    for (var b in za) if (za[b].id === a) return a = za[b], {\n      firebaseEndpoint: a.Ra,\n      secureTokenEndpoint: a.Xa,\n      identityPlatformEndpoint: a.Ua\n    };\n\n    return null;\n  }\n\n  var Ba;\n  Ba = Aa("__EID__") ? "__EID__" : void 0;\n\n  function Ca(a) {\n    if (!a) return !1;\n\n    try {\n      return !!a.$goog_Thenable;\n    } catch (b) {\n      return !1;\n    }\n  }\n\n  ;\n\n  function u(a) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, u);else {\n      var b = Error().stack;\n      b && (this.stack = b);\n    }\n    a && (this.message = String(a));\n  }\n\n  r(u, Error);\n  u.prototype.name = "CustomError";\n\n  function Da(a, b) {\n    a = a.split("%s");\n\n    for (var c = "", d = a.length - 1, e = 0; e < d; e++) c += a[e] + (e < b.length ? b[e] : "%s");\n\n    u.call(this, c + a[d]);\n  }\n\n  r(Da, u);\n  Da.prototype.name = "AssertionError";\n\n  function Ea(a, b) {\n    throw new Da("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));\n  }\n\n  ;\n\n  function Fa(a, b) {\n    this.c = a;\n    this.f = b;\n    this.b = 0;\n    this.a = null;\n  }\n\n  Fa.prototype.get = function () {\n    if (0 < this.b) {\n      this.b--;\n      var a = this.a;\n      this.a = a.next;\n      a.next = null;\n    } else a = this.c();\n\n    return a;\n  };\n\n  function Ga(a, b) {\n    a.f(b);\n    100 > a.b && (a.b++, b.next = a.a, a.a = b);\n  }\n\n  ;\n\n  function Ha() {\n    this.b = this.a = null;\n  }\n\n  var Ja = new Fa(function () {\n    return new Ia();\n  }, function (a) {\n    a.reset();\n  });\n\n  Ha.prototype.add = function (a, b) {\n    var c = Ja.get();\n    c.set(a, b);\n    this.b ? this.b.next = c : this.a = c;\n    this.b = c;\n  };\n\n  function Ka() {\n    var a = La,\n        b = null;\n    a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);\n    return b;\n  }\n\n  function Ia() {\n    this.next = this.b = this.a = null;\n  }\n\n  Ia.prototype.set = function (a, b) {\n    this.a = a;\n    this.b = b;\n    this.next = null;\n  };\n\n  Ia.prototype.reset = function () {\n    this.next = this.b = this.a = null;\n  };\n\n  var Ma = Array.prototype.indexOf ? function (a, b) {\n    return Array.prototype.indexOf.call(a, b, void 0);\n  } : function (a, b) {\n    if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);\n\n    for (var c = 0; c < a.length; c++) if (c in a && a[c] === b) return c;\n\n    return -1;\n  },\n      w = Array.prototype.forEach ? function (a, b, c) {\n    Array.prototype.forEach.call(a, b, c);\n  } : function (a, b, c) {\n    for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);\n  };\n\n  function Na(a, b) {\n    for (var c = "string" === typeof a ? a.split("") : a, d = a.length - 1; 0 <= d; --d) d in c && b.call(void 0, c[d], d, a);\n  }\n\n  var Oa = Array.prototype.filter ? function (a, b) {\n    return Array.prototype.filter.call(a, b, void 0);\n  } : function (a, b) {\n    for (var c = a.length, d = [], e = 0, f = "string" === typeof a ? a.split("") : a, g = 0; g < c; g++) if (g in f) {\n      var h = f[g];\n      b.call(void 0, h, g, a) && (d[e++] = h);\n    }\n\n    return d;\n  },\n      Pa = Array.prototype.map ? function (a, b) {\n    return Array.prototype.map.call(a, b, void 0);\n  } : function (a, b) {\n    for (var c = a.length, d = Array(c), e = "string" === typeof a ? a.split("") : a, f = 0; f < c; f++) f in e && (d[f] = b.call(void 0, e[f], f, a));\n\n    return d;\n  },\n      Qa = Array.prototype.some ? function (a, b) {\n    return Array.prototype.some.call(a, b, void 0);\n  } : function (a, b) {\n    for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) return !0;\n\n    return !1;\n  };\n\n  function Ra(a) {\n    a: {\n      var b = Sa;\n\n      for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) {\n        b = e;\n        break a;\n      }\n\n      b = -1;\n    }\n\n    return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];\n  }\n\n  function Ta(a, b) {\n    return 0 <= Ma(a, b);\n  }\n\n  function Ua(a, b) {\n    b = Ma(a, b);\n    var c;\n    (c = 0 <= b) && Array.prototype.splice.call(a, b, 1);\n    return c;\n  }\n\n  function Va(a, b) {\n    var c = 0;\n    Na(a, function (d, e) {\n      b.call(void 0, d, e, a) && 1 == Array.prototype.splice.call(a, e, 1).length && c++;\n    });\n  }\n\n  function Wa(a) {\n    return Array.prototype.concat.apply([], arguments);\n  }\n\n  function Xa(a) {\n    var b = a.length;\n\n    if (0 < b) {\n      for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];\n\n      return c;\n    }\n\n    return [];\n  }\n\n  ;\n  var Ya = String.prototype.trim ? function (a) {\n    return a.trim();\n  } : function (a) {\n    return /^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(a)[1];\n  },\n      Za = /&/g,\n      $a = /</g,\n      ab = />/g,\n      bb = /"/g,\n      cb = /\'/g,\n      db = /\\x00/g,\n      eb = /[\\x00&<>"\']/;\n\n  function x(a, b) {\n    return -1 != a.indexOf(b);\n  }\n\n  function fb(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }\n\n  ;\n  var gb;\n\n  a: {\n    var hb = l.navigator;\n\n    if (hb) {\n      var ib = hb.userAgent;\n\n      if (ib) {\n        gb = ib;\n        break a;\n      }\n    }\n\n    gb = "";\n  }\n\n  function y(a) {\n    return x(gb, a);\n  }\n\n  ;\n\n  function jb(a, b) {\n    for (var c in a) b.call(void 0, a[c], c, a);\n  }\n\n  function kb(a) {\n    for (var b in a) return !1;\n\n    return !0;\n  }\n\n  function lb(a) {\n    var b = {},\n        c;\n\n    for (c in a) b[c] = a[c];\n\n    return b;\n  }\n\n  var mb = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");\n\n  function z(a, b) {\n    for (var c, d, e = 1; e < arguments.length; e++) {\n      d = arguments[e];\n\n      for (c in d) a[c] = d[c];\n\n      for (var f = 0; f < mb.length; f++) c = mb[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);\n    }\n  }\n\n  ;\n\n  function nb(a, b) {\n    a: {\n      try {\n        var c = a && a.ownerDocument,\n            d = c && (c.defaultView || c.parentWindow);\n        d = d || l;\n\n        if (d.Element && d.Location) {\n          var e = d;\n          break a;\n        }\n      } catch (g) {}\n\n      e = null;\n    }\n\n    if (e && "undefined" != typeof e[b] && (!a || !(a instanceof e[b]) && (a instanceof e.Location || a instanceof e.Element))) {\n      if (n(a)) try {\n        var f = a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a);\n      } catch (g) {\n        f = "<object could not be stringified>";\n      } else f = void 0 === a ? "undefined" : null === a ? "null" : typeof a;\n      Ea("Argument is not a %s (or a non-Element, non-Location mock); got: %s", b, f);\n    }\n  }\n\n  ;\n\n  function ob(a, b) {\n    this.a = a === pb && b || "";\n    this.b = qb;\n  }\n\n  ob.prototype.ra = !0;\n\n  ob.prototype.qa = function () {\n    return this.a;\n  };\n\n  ob.prototype.toString = function () {\n    return "Const{" + this.a + "}";\n  };\n\n  function rb(a) {\n    if (a instanceof ob && a.constructor === ob && a.b === qb) return a.a;\n    Ea("expected object of type Const, got \'" + a + "\'");\n    return "type_error:Const";\n  }\n\n  var qb = {},\n      pb = {},\n      sb = new ob(pb, "");\n\n  function tb(a, b) {\n    this.a = a === ub && b || "";\n    this.b = vb;\n  }\n\n  tb.prototype.ra = !0;\n\n  tb.prototype.qa = function () {\n    return this.a.toString();\n  };\n\n  tb.prototype.toString = function () {\n    return "TrustedResourceUrl{" + this.a + "}";\n  };\n\n  function wb(a) {\n    if (a instanceof tb && a.constructor === tb && a.b === vb) return a.a;\n    Ea("expected object of type TrustedResourceUrl, got \'" + a + "\' of type " + la(a));\n    return "type_error:TrustedResourceUrl";\n  }\n\n  function xb(a, b) {\n    var c = rb(a);\n    if (!yb.test(c)) throw Error("Invalid TrustedResourceUrl format: " + c);\n    a = c.replace(zb, function (d, e) {\n      if (!Object.prototype.hasOwnProperty.call(b, e)) throw Error(\'Found marker, "\' + e + \'", in format string, "\' + c + \'", but no valid label mapping found in args: \' + JSON.stringify(b));\n      d = b[e];\n      return d instanceof ob ? rb(d) : encodeURIComponent(String(d));\n    });\n    return new tb(ub, a);\n  }\n\n  var zb = /%{(\\w+)}/g,\n      yb = /^((https:)?\\/\\/[0-9a-z.:[\\]-]+\\/|\\/[^/\\\\]|[^:/\\\\%]+\\/|[^:/\\\\%]*[?#]|about:blank#)/i,\n      vb = {},\n      ub = {};\n\n  function Ab(a, b) {\n    this.a = a === Bb && b || "";\n    this.b = Cb;\n  }\n\n  Ab.prototype.ra = !0;\n\n  Ab.prototype.qa = function () {\n    return this.a.toString();\n  };\n\n  Ab.prototype.toString = function () {\n    return "SafeUrl{" + this.a + "}";\n  };\n\n  function Db(a) {\n    if (a instanceof Ab && a.constructor === Ab && a.b === Cb) return a.a;\n    Ea("expected object of type SafeUrl, got \'" + a + "\' of type " + la(a));\n    return "type_error:SafeUrl";\n  }\n\n  var Eb = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;\n\n  function Fb(a) {\n    if (a instanceof Ab) return a;\n    a = "object" == typeof a && a.ra ? a.qa() : String(a);\n    Eb.test(a) || (a = "about:invalid#zClosurez");\n    return new Ab(Bb, a);\n  }\n\n  var Cb = {},\n      Bb = {};\n\n  function Gb() {\n    this.a = "";\n    this.b = Hb;\n  }\n\n  Gb.prototype.ra = !0;\n\n  Gb.prototype.qa = function () {\n    return this.a.toString();\n  };\n\n  Gb.prototype.toString = function () {\n    return "SafeHtml{" + this.a + "}";\n  };\n\n  function Ib(a) {\n    if (a instanceof Gb && a.constructor === Gb && a.b === Hb) return a.a;\n    Ea("expected object of type SafeHtml, got \'" + a + "\' of type " + la(a));\n    return "type_error:SafeHtml";\n  }\n\n  var Hb = {};\n\n  function Jb(a) {\n    var b = new Gb();\n    b.a = a;\n    return b;\n  }\n\n  Jb("<!DOCTYPE html>");\n  var Kb = Jb("");\n  Jb("<br>");\n\n  function Lb(a) {\n    var b = new tb(ub, rb(sb));\n    nb(a, "HTMLIFrameElement");\n    a.src = wb(b).toString();\n  }\n\n  function Mb(a, b) {\n    nb(a, "HTMLScriptElement");\n    a.src = wb(b);\n    if (null === ja) b: {\n      b = l.document;\n\n      if ((b = b.querySelector && b.querySelector("script[nonce]")) && (b = b.nonce || b.getAttribute("nonce")) && ia.test(b)) {\n        ja = b;\n        break b;\n      }\n\n      ja = "";\n    }\n    b = ja;\n    b && a.setAttribute("nonce", b);\n  }\n\n  ;\n\n  function Nb(a, b) {\n    for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) d += c.shift() + e.shift();\n\n    return d + c.join("%s");\n  }\n\n  function Ob(a) {\n    eb.test(a) && (-1 != a.indexOf("&") && (a = a.replace(Za, "&amp;")), -1 != a.indexOf("<") && (a = a.replace($a, "&lt;")), -1 != a.indexOf(">") && (a = a.replace(ab, "&gt;")), -1 != a.indexOf(\'"\') && (a = a.replace(bb, "&quot;")), -1 != a.indexOf("\'") && (a = a.replace(cb, "&#39;")), -1 != a.indexOf("\\x00") && (a = a.replace(db, "&#0;")));\n    return a;\n  }\n\n  ;\n\n  function Pb(a) {\n    Pb[" "](a);\n    return a;\n  }\n\n  Pb[" "] = ka;\n\n  function Qb(a, b) {\n    var c = Rb;\n    return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);\n  }\n\n  ;\n  var Sb = y("Opera"),\n      Tb = y("Trident") || y("MSIE"),\n      Ub = y("Edge"),\n      Vb = Ub || Tb,\n      Wb = y("Gecko") && !(x(gb.toLowerCase(), "webkit") && !y("Edge")) && !(y("Trident") || y("MSIE")) && !y("Edge"),\n      Xb = x(gb.toLowerCase(), "webkit") && !y("Edge");\n\n  function Yb() {\n    var a = l.document;\n    return a ? a.documentMode : void 0;\n  }\n\n  var Zb;\n\n  a: {\n    var $b = "",\n        ac = function () {\n      var a = gb;\n      if (Wb) return /rv:([^\\);]+)(\\)|;)/.exec(a);\n      if (Ub) return /Edge\\/([\\d\\.]+)/.exec(a);\n      if (Tb) return /\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);\n      if (Xb) return /WebKit\\/(\\S+)/.exec(a);\n      if (Sb) return /(?:Version)[ \\/]?(\\S+)/.exec(a);\n    }();\n\n    ac && ($b = ac ? ac[1] : "");\n\n    if (Tb) {\n      var bc = Yb();\n\n      if (null != bc && bc > parseFloat($b)) {\n        Zb = String(bc);\n        break a;\n      }\n    }\n\n    Zb = $b;\n  }\n\n  var Rb = {};\n\n  function cc(a) {\n    return Qb(a, function () {\n      for (var b = 0, c = Ya(String(Zb)).split("."), d = Ya(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {\n        var g = c[f] || "",\n            h = d[f] || "";\n\n        do {\n          g = /(\\d*)(\\D*)(.*)/.exec(g) || ["", "", "", ""];\n          h = /(\\d*)(\\D*)(.*)/.exec(h) || ["", "", "", ""];\n          if (0 == g[0].length && 0 == h[0].length) break;\n          b = fb(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || fb(0 == g[2].length, 0 == h[2].length) || fb(g[2], h[2]);\n          g = g[3];\n          h = h[3];\n        } while (0 == b);\n      }\n\n      return 0 <= b;\n    });\n  }\n\n  var dc;\n  dc = l.document && Tb ? Yb() : void 0;\n\n  try {\n    new self.OffscreenCanvas(0, 0).getContext("2d");\n  } catch (a) {}\n\n  var ec = !Tb || 9 <= Number(dc);\n\n  function fc(a) {\n    var b = document;\n    return "string" === typeof a ? b.getElementById(a) : a;\n  }\n\n  function gc(a, b) {\n    jb(b, function (c, d) {\n      c && "object" == typeof c && c.ra && (c = c.qa());\n      "style" == d ? a.style.cssText = c : "class" == d ? a.className = c : "for" == d ? a.htmlFor = c : hc.hasOwnProperty(d) ? a.setAttribute(hc[d], c) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, c) : a[d] = c;\n    });\n  }\n\n  var hc = {\n    cellpadding: "cellPadding",\n    cellspacing: "cellSpacing",\n    colspan: "colSpan",\n    frameborder: "frameBorder",\n    height: "height",\n    maxlength: "maxLength",\n    nonce: "nonce",\n    role: "role",\n    rowspan: "rowSpan",\n    type: "type",\n    usemap: "useMap",\n    valign: "vAlign",\n    width: "width"\n  };\n\n  function ic(a, b, c) {\n    var d = arguments,\n        e = document,\n        f = String(d[0]),\n        g = d[1];\n\n    if (!ec && g && (g.name || g.type)) {\n      f = ["<", f];\n      g.name && f.push(\' name="\', Ob(g.name), \'"\');\n\n      if (g.type) {\n        f.push(\' type="\', Ob(g.type), \'"\');\n        var h = {};\n        z(h, g);\n        delete h.type;\n        g = h;\n      }\n\n      f.push(">");\n      f = f.join("");\n    }\n\n    f = jc(e, f);\n    g && ("string" === typeof g ? f.className = g : Array.isArray(g) ? f.className = g.join(" ") : gc(f, g));\n    2 < d.length && kc(e, f, d);\n    return f;\n  }\n\n  function kc(a, b, c) {\n    function d(g) {\n      g && b.appendChild("string" === typeof g ? a.createTextNode(g) : g);\n    }\n\n    for (var e = 2; e < c.length; e++) {\n      var f = c[e];\n      !ma(f) || n(f) && 0 < f.nodeType ? d(f) : w(lc(f) ? Xa(f) : f, d);\n    }\n  }\n\n  function jc(a, b) {\n    b = String(b);\n    "application/xhtml+xml" === a.contentType && (b = b.toLowerCase());\n    return a.createElement(b);\n  }\n\n  function lc(a) {\n    if (a && "number" == typeof a.length) {\n      if (n(a)) return "function" == typeof a.item || "string" == typeof a.item;\n      if (na(a)) return "function" == typeof a.item;\n    }\n\n    return !1;\n  }\n\n  ;\n\n  function mc(a) {\n    l.setTimeout(function () {\n      throw a;\n    }, 0);\n  }\n\n  var nc;\n\n  function oc() {\n    var a = l.MessageChannel;\n    "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !y("Presto") && (a = function () {\n      var e = jc(document, "IFRAME");\n      e.style.display = "none";\n      Lb(e);\n      document.documentElement.appendChild(e);\n      var f = e.contentWindow;\n      e = f.document;\n      e.open();\n      e.write(Ib(Kb));\n      e.close();\n      var g = "callImmediate" + Math.random(),\n          h = "file:" == f.location.protocol ? "*" : f.location.protocol + "//" + f.location.host;\n      e = q(function (m) {\n        if (("*" == h || m.origin == h) && m.data == g) this.port1.onmessage();\n      }, this);\n      f.addEventListener("message", e, !1);\n      this.port1 = {};\n      this.port2 = {\n        postMessage: function () {\n          f.postMessage(g, h);\n        }\n      };\n    });\n\n    if ("undefined" !== typeof a && !y("Trident") && !y("MSIE")) {\n      var b = new a(),\n          c = {},\n          d = c;\n\n      b.port1.onmessage = function () {\n        if (void 0 !== c.next) {\n          c = c.next;\n          var e = c.Db;\n          c.Db = null;\n          e();\n        }\n      };\n\n      return function (e) {\n        d.next = {\n          Db: e\n        };\n        d = d.next;\n        b.port2.postMessage(0);\n      };\n    }\n\n    return function (e) {\n      l.setTimeout(e, 0);\n    };\n  }\n\n  ;\n\n  function pc(a, b) {\n    qc || rc();\n    sc || (qc(), sc = !0);\n    La.add(a, b);\n  }\n\n  var qc;\n\n  function rc() {\n    if (l.Promise && l.Promise.resolve) {\n      var a = l.Promise.resolve(void 0);\n\n      qc = function () {\n        a.then(tc);\n      };\n    } else qc = function () {\n      var b = tc;\n      !na(l.setImmediate) || l.Window && l.Window.prototype && !y("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (nc || (nc = oc()), nc(b)) : l.setImmediate(b);\n    };\n  }\n\n  var sc = !1,\n      La = new Ha();\n\n  function tc() {\n    for (var a; a = Ka();) {\n      try {\n        a.a.call(a.b);\n      } catch (b) {\n        mc(b);\n      }\n\n      Ga(Ja, a);\n    }\n\n    sc = !1;\n  }\n\n  ;\n\n  function B(a, b) {\n    this.a = uc;\n    this.i = void 0;\n    this.f = this.b = this.c = null;\n    this.g = this.h = !1;\n    if (a != ka) try {\n      var c = this;\n      a.call(b, function (d) {\n        vc(c, wc, d);\n      }, function (d) {\n        if (!(d instanceof xc)) try {\n          if (d instanceof Error) throw d;\n          throw Error("Promise rejected.");\n        } catch (e) {}\n        vc(c, yc, d);\n      });\n    } catch (d) {\n      vc(this, yc, d);\n    }\n  }\n\n  var uc = 0,\n      wc = 2,\n      yc = 3;\n\n  function zc() {\n    this.next = this.f = this.b = this.g = this.a = null;\n    this.c = !1;\n  }\n\n  zc.prototype.reset = function () {\n    this.f = this.b = this.g = this.a = null;\n    this.c = !1;\n  };\n\n  var Ac = new Fa(function () {\n    return new zc();\n  }, function (a) {\n    a.reset();\n  });\n\n  function Bc(a, b, c) {\n    var d = Ac.get();\n    d.g = a;\n    d.b = b;\n    d.f = c;\n    return d;\n  }\n\n  function D(a) {\n    if (a instanceof B) return a;\n    var b = new B(ka);\n    vc(b, wc, a);\n    return b;\n  }\n\n  function E(a) {\n    return new B(function (b, c) {\n      c(a);\n    });\n  }\n\n  function Cc(a, b, c) {\n    Dc(a, b, c, null) || pc(ta(b, a));\n  }\n\n  function Ec(a) {\n    return new B(function (b, c) {\n      var d = a.length,\n          e = [];\n      if (d) for (var f = function (p, v) {\n        d--;\n        e[p] = v;\n        0 == d && b(e);\n      }, g = function (p) {\n        c(p);\n      }, h = 0, m; h < a.length; h++) m = a[h], Cc(m, ta(f, h), g);else b(e);\n    });\n  }\n\n  function Fc(a) {\n    return new B(function (b) {\n      var c = a.length,\n          d = [];\n      if (c) for (var e = function (h, m, p) {\n        c--;\n        d[h] = m ? {\n          Mb: !0,\n          value: p\n        } : {\n          Mb: !1,\n          reason: p\n        };\n        0 == c && b(d);\n      }, f = 0, g; f < a.length; f++) g = a[f], Cc(g, ta(e, f, !0), ta(e, f, !1));else b(d);\n    });\n  }\n\n  B.prototype.then = function (a, b, c) {\n    return Gc(this, na(a) ? a : null, na(b) ? b : null, c);\n  };\n\n  B.prototype.$goog_Thenable = !0;\n  k = B.prototype;\n\n  k.ma = function (a, b) {\n    a = Bc(a, a, b);\n    a.c = !0;\n    Hc(this, a);\n    return this;\n  };\n\n  k.o = function (a, b) {\n    return Gc(this, null, a, b);\n  };\n\n  k.cancel = function (a) {\n    if (this.a == uc) {\n      var b = new xc(a);\n      pc(function () {\n        Ic(this, b);\n      }, this);\n    }\n  };\n\n  function Ic(a, b) {\n    if (a.a == uc) if (a.c) {\n      var c = a.c;\n\n      if (c.b) {\n        for (var d = 0, e = null, f = null, g = c.b; g && (g.c || (d++, g.a == a && (e = g), !(e && 1 < d))); g = g.next) e || (f = g);\n\n        e && (c.a == uc && 1 == d ? Ic(c, b) : (f ? (d = f, d.next == c.f && (c.f = d), d.next = d.next.next) : Jc(c), Kc(c, e, yc, b)));\n      }\n\n      a.c = null;\n    } else vc(a, yc, b);\n  }\n\n  function Hc(a, b) {\n    a.b || a.a != wc && a.a != yc || Lc(a);\n    a.f ? a.f.next = b : a.b = b;\n    a.f = b;\n  }\n\n  function Gc(a, b, c, d) {\n    var e = Bc(null, null, null);\n    e.a = new B(function (f, g) {\n      e.g = b ? function (h) {\n        try {\n          var m = b.call(d, h);\n          f(m);\n        } catch (p) {\n          g(p);\n        }\n      } : f;\n      e.b = c ? function (h) {\n        try {\n          var m = c.call(d, h);\n          void 0 === m && h instanceof xc ? g(h) : f(m);\n        } catch (p) {\n          g(p);\n        }\n      } : g;\n    });\n    e.a.c = a;\n    Hc(a, e);\n    return e.a;\n  }\n\n  k.Yc = function (a) {\n    this.a = uc;\n    vc(this, wc, a);\n  };\n\n  k.Zc = function (a) {\n    this.a = uc;\n    vc(this, yc, a);\n  };\n\n  function vc(a, b, c) {\n    a.a == uc && (a === c && (b = yc, c = new TypeError("Promise cannot resolve to itself")), a.a = 1, Dc(c, a.Yc, a.Zc, a) || (a.i = c, a.a = b, a.c = null, Lc(a), b != yc || c instanceof xc || Mc(a, c)));\n  }\n\n  function Dc(a, b, c, d) {\n    if (a instanceof B) return Hc(a, Bc(b || ka, c || null, d)), !0;\n    if (Ca(a)) return a.then(b, c, d), !0;\n    if (n(a)) try {\n      var e = a.then;\n      if (na(e)) return Nc(a, e, b, c, d), !0;\n    } catch (f) {\n      return c.call(d, f), !0;\n    }\n    return !1;\n  }\n\n  function Nc(a, b, c, d, e) {\n    function f(m) {\n      h || (h = !0, d.call(e, m));\n    }\n\n    function g(m) {\n      h || (h = !0, c.call(e, m));\n    }\n\n    var h = !1;\n\n    try {\n      b.call(a, g, f);\n    } catch (m) {\n      f(m);\n    }\n  }\n\n  function Lc(a) {\n    a.h || (a.h = !0, pc(a.ec, a));\n  }\n\n  function Jc(a) {\n    var b = null;\n    a.b && (b = a.b, a.b = b.next, b.next = null);\n    a.b || (a.f = null);\n    return b;\n  }\n\n  k.ec = function () {\n    for (var a; a = Jc(this);) Kc(this, a, this.a, this.i);\n\n    this.h = !1;\n  };\n\n  function Kc(a, b, c, d) {\n    if (c == yc && b.b && !b.c) for (; a && a.g; a = a.c) a.g = !1;\n    if (b.a) b.a.c = null, Oc(b, c, d);else try {\n      b.c ? b.g.call(b.f) : Oc(b, c, d);\n    } catch (e) {\n      Pc.call(null, e);\n    }\n    Ga(Ac, b);\n  }\n\n  function Oc(a, b, c) {\n    b == wc ? a.g.call(a.f, c) : a.b && a.b.call(a.f, c);\n  }\n\n  function Mc(a, b) {\n    a.g = !0;\n    pc(function () {\n      a.g && Pc.call(null, b);\n    });\n  }\n\n  var Pc = mc;\n\n  function xc(a) {\n    u.call(this, a);\n  }\n\n  r(xc, u);\n  xc.prototype.name = "cancel";\n\n  function Qc() {\n    0 != Rc && (Sc[oa(this)] = this);\n    this.wa = this.wa;\n    this.na = this.na;\n  }\n\n  var Rc = 0,\n      Sc = {};\n  Qc.prototype.wa = !1;\n\n  function Tc(a) {\n    if (!a.wa && (a.wa = !0, a.Ba(), 0 != Rc)) {\n      var b = oa(a);\n      if (0 != Rc && a.na && 0 < a.na.length) throw Error(a + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass\' method.");\n      delete Sc[b];\n    }\n  }\n\n  Qc.prototype.Ba = function () {\n    if (this.na) for (; this.na.length;) this.na.shift()();\n  };\n\n  var Uc = Object.freeze || function (a) {\n    return a;\n  };\n\n  var Vc = !Tb || 9 <= Number(dc),\n      Wc = Tb && !cc("9"),\n      Xc = function () {\n    if (!l.addEventListener || !Object.defineProperty) return !1;\n    var a = !1,\n        b = Object.defineProperty({}, "passive", {\n      get: function () {\n        a = !0;\n      }\n    });\n\n    try {\n      l.addEventListener("test", ka, b), l.removeEventListener("test", ka, b);\n    } catch (c) {}\n\n    return a;\n  }();\n\n  function F(a, b) {\n    this.type = a;\n    this.b = this.target = b;\n    this.defaultPrevented = !1;\n  }\n\n  F.prototype.preventDefault = function () {\n    this.defaultPrevented = !0;\n  };\n\n  function Yc(a, b) {\n    F.call(this, a ? a.type : "");\n    this.relatedTarget = this.b = this.target = null;\n    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;\n    this.key = "";\n    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;\n    this.pointerId = 0;\n    this.pointerType = "";\n    this.a = null;\n\n    if (a) {\n      var c = this.type = a.type,\n          d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;\n      this.target = a.target || a.srcElement;\n      this.b = b;\n\n      if (b = a.relatedTarget) {\n        if (Wb) {\n          a: {\n            try {\n              Pb(b.nodeName);\n              var e = !0;\n              break a;\n            } catch (f) {}\n\n            e = !1;\n          }\n\n          e || (b = null);\n        }\n      } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);\n\n      this.relatedTarget = b;\n      d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);\n      this.button = a.button;\n      this.key = a.key || "";\n      this.ctrlKey = a.ctrlKey;\n      this.altKey = a.altKey;\n      this.shiftKey = a.shiftKey;\n      this.metaKey = a.metaKey;\n      this.pointerId = a.pointerId || 0;\n      this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Zc[a.pointerType] || "";\n      this.a = a;\n      a.defaultPrevented && this.preventDefault();\n    }\n  }\n\n  r(Yc, F);\n  var Zc = Uc({\n    2: "touch",\n    3: "pen",\n    4: "mouse"\n  });\n\n  Yc.prototype.preventDefault = function () {\n    Yc.Za.preventDefault.call(this);\n    var a = this.a;\n    if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, Wc) try {\n      if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;\n    } catch (b) {}\n  };\n\n  Yc.prototype.f = function () {\n    return this.a;\n  };\n\n  var $c = "closure_listenable_" + (1E6 * Math.random() | 0),\n      ad = 0;\n\n  function bd(a, b, c, d, e) {\n    this.listener = a;\n    this.proxy = null;\n    this.src = b;\n    this.type = c;\n    this.capture = !!d;\n    this.Ta = e;\n    this.key = ++ad;\n    this.ua = this.Na = !1;\n  }\n\n  function cd(a) {\n    a.ua = !0;\n    a.listener = null;\n    a.proxy = null;\n    a.src = null;\n    a.Ta = null;\n  }\n\n  ;\n\n  function dd(a) {\n    this.src = a;\n    this.a = {};\n    this.b = 0;\n  }\n\n  dd.prototype.add = function (a, b, c, d, e) {\n    var f = a.toString();\n    a = this.a[f];\n    a || (a = this.a[f] = [], this.b++);\n    var g = ed(a, b, d, e);\n    -1 < g ? (b = a[g], c || (b.Na = !1)) : (b = new bd(b, this.src, f, !!d, e), b.Na = c, a.push(b));\n    return b;\n  };\n\n  function fd(a, b) {\n    var c = b.type;\n    c in a.a && Ua(a.a[c], b) && (cd(b), 0 == a.a[c].length && (delete a.a[c], a.b--));\n  }\n\n  function ed(a, b, c, d) {\n    for (var e = 0; e < a.length; ++e) {\n      var f = a[e];\n      if (!f.ua && f.listener == b && f.capture == !!c && f.Ta == d) return e;\n    }\n\n    return -1;\n  }\n\n  ;\n  var gd = "closure_lm_" + (1E6 * Math.random() | 0),\n      hd = {},\n      id = 0;\n\n  function jd(a, b, c, d, e) {\n    if (d && d.once) kd(a, b, c, d, e);else if (Array.isArray(b)) for (var f = 0; f < b.length; f++) jd(a, b[f], c, d, e);else c = ld(c), a && a[$c] ? md(a, b, c, n(d) ? !!d.capture : !!d, e) : nd(a, b, c, !1, d, e);\n  }\n\n  function nd(a, b, c, d, e, f) {\n    if (!b) throw Error("Invalid event type");\n    var g = n(e) ? !!e.capture : !!e,\n        h = od(a);\n    h || (a[gd] = h = new dd(a));\n    c = h.add(b, c, d, g, f);\n\n    if (!c.proxy) {\n      d = pd();\n      c.proxy = d;\n      d.src = a;\n      d.listener = c;\n      if (a.addEventListener) Xc || (e = g), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(qd(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");\n      id++;\n    }\n  }\n\n  function pd() {\n    var a = rd,\n        b = Vc ? function (c) {\n      return a.call(b.src, b.listener, c);\n    } : function (c) {\n      c = a.call(b.src, b.listener, c);\n      if (!c) return c;\n    };\n    return b;\n  }\n\n  function kd(a, b, c, d, e) {\n    if (Array.isArray(b)) for (var f = 0; f < b.length; f++) kd(a, b[f], c, d, e);else c = ld(c), a && a[$c] ? sd(a, b, c, n(d) ? !!d.capture : !!d, e) : nd(a, b, c, !0, d, e);\n  }\n\n  function td(a, b, c, d, e) {\n    if (Array.isArray(b)) for (var f = 0; f < b.length; f++) td(a, b[f], c, d, e);else (d = n(d) ? !!d.capture : !!d, c = ld(c), a && a[$c]) ? (a = a.u, b = String(b).toString(), b in a.a && (f = a.a[b], c = ed(f, c, d, e), -1 < c && (cd(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = od(a)) && (b = a.a[b.toString()], a = -1, b && (a = ed(b, c, d, e)), (c = -1 < a ? b[a] : null) && vd(c));\n  }\n\n  function vd(a) {\n    if ("number" !== typeof a && a && !a.ua) {\n      var b = a.src;\n      if (b && b[$c]) fd(b.u, a);else {\n        var c = a.type,\n            d = a.proxy;\n        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(qd(c), d) : b.addListener && b.removeListener && b.removeListener(d);\n        id--;\n        (c = od(b)) ? (fd(c, a), 0 == c.b && (c.src = null, b[gd] = null)) : cd(a);\n      }\n    }\n  }\n\n  function qd(a) {\n    return a in hd ? hd[a] : hd[a] = "on" + a;\n  }\n\n  function wd(a, b, c, d) {\n    var e = !0;\n    if (a = od(a)) if (b = a.a[b.toString()]) for (b = b.concat(), a = 0; a < b.length; a++) {\n      var f = b[a];\n      f && f.capture == c && !f.ua && (f = xd(f, d), e = e && !1 !== f);\n    }\n    return e;\n  }\n\n  function xd(a, b) {\n    var c = a.listener,\n        d = a.Ta || a.src;\n    a.Na && vd(a);\n    return c.call(d, b);\n  }\n\n  function rd(a, b) {\n    if (a.ua) return !0;\n\n    if (!Vc) {\n      if (!b) a: {\n        b = ["window", "event"];\n\n        for (var c = l, d = 0; d < b.length; d++) if (c = c[b[d]], null == c) {\n          b = null;\n          break a;\n        }\n\n        b = c;\n      }\n      d = b;\n      b = new Yc(d, this);\n      c = !0;\n\n      if (!(0 > d.keyCode || void 0 != d.returnValue)) {\n        a: {\n          var e = !1;\n          if (0 == d.keyCode) try {\n            d.keyCode = -1;\n            break a;\n          } catch (g) {\n            e = !0;\n          }\n          if (e || void 0 == d.returnValue) d.returnValue = !0;\n        }\n\n        d = [];\n\n        for (e = b.b; e; e = e.parentNode) d.push(e);\n\n        a = a.type;\n\n        for (e = d.length - 1; 0 <= e; e--) {\n          b.b = d[e];\n          var f = wd(d[e], a, !0, b);\n          c = c && f;\n        }\n\n        for (e = 0; e < d.length; e++) b.b = d[e], f = wd(d[e], a, !1, b), c = c && f;\n      }\n\n      return c;\n    }\n\n    return xd(a, new Yc(b, this));\n  }\n\n  function od(a) {\n    a = a[gd];\n    return a instanceof dd ? a : null;\n  }\n\n  var yd = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);\n\n  function ld(a) {\n    if (na(a)) return a;\n    a[yd] || (a[yd] = function (b) {\n      return a.handleEvent(b);\n    });\n    return a[yd];\n  }\n\n  ;\n\n  function G() {\n    Qc.call(this);\n    this.u = new dd(this);\n    this.Yb = this;\n    this.eb = null;\n  }\n\n  r(G, Qc);\n  G.prototype[$c] = !0;\n\n  G.prototype.addEventListener = function (a, b, c, d) {\n    jd(this, a, b, c, d);\n  };\n\n  G.prototype.removeEventListener = function (a, b, c, d) {\n    td(this, a, b, c, d);\n  };\n\n  G.prototype.dispatchEvent = function (a) {\n    var b,\n        c = this.eb;\n    if (c) for (b = []; c; c = c.eb) b.push(c);\n    c = this.Yb;\n    var d = a.type || a;\n    if ("string" === typeof a) a = new F(a, c);else if (a instanceof F) a.target = a.target || c;else {\n      var e = a;\n      a = new F(d, c);\n      z(a, e);\n    }\n    e = !0;\n    if (b) for (var f = b.length - 1; 0 <= f; f--) {\n      var g = a.b = b[f];\n      e = zd(g, d, !0, a) && e;\n    }\n    g = a.b = c;\n    e = zd(g, d, !0, a) && e;\n    e = zd(g, d, !1, a) && e;\n    if (b) for (f = 0; f < b.length; f++) g = a.b = b[f], e = zd(g, d, !1, a) && e;\n    return e;\n  };\n\n  G.prototype.Ba = function () {\n    G.Za.Ba.call(this);\n\n    if (this.u) {\n      var a = this.u,\n          b = 0,\n          c;\n\n      for (c in a.a) {\n        for (var d = a.a[c], e = 0; e < d.length; e++) ++b, cd(d[e]);\n\n        delete a.a[c];\n        a.b--;\n      }\n    }\n\n    this.eb = null;\n  };\n\n  function md(a, b, c, d, e) {\n    a.u.add(String(b), c, !1, d, e);\n  }\n\n  function sd(a, b, c, d, e) {\n    a.u.add(String(b), c, !0, d, e);\n  }\n\n  function zd(a, b, c, d) {\n    b = a.u.a[String(b)];\n    if (!b) return !0;\n    b = b.concat();\n\n    for (var e = !0, f = 0; f < b.length; ++f) {\n      var g = b[f];\n\n      if (g && !g.ua && g.capture == c) {\n        var h = g.listener,\n            m = g.Ta || g.src;\n        g.Na && fd(a.u, g);\n        e = !1 !== h.call(m, d) && e;\n      }\n    }\n\n    return e && !d.defaultPrevented;\n  }\n\n  ;\n\n  function Ad(a, b, c) {\n    if (na(a)) c && (a = q(a, c));else if (a && "function" == typeof a.handleEvent) a = q(a.handleEvent, a);else throw Error("Invalid listener argument");\n    return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);\n  }\n\n  function Bd(a) {\n    var b = null;\n    return new B(function (c, d) {\n      b = Ad(function () {\n        c(void 0);\n      }, a);\n      -1 == b && d(Error("Failed to schedule timer."));\n    }).o(function (c) {\n      l.clearTimeout(b);\n      throw c;\n    });\n  }\n\n  ;\n\n  function Cd(a) {\n    if (a.V && "function" == typeof a.V) return a.V();\n    if ("string" === typeof a) return a.split("");\n\n    if (ma(a)) {\n      for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);\n\n      return b;\n    }\n\n    b = [];\n    c = 0;\n\n    for (d in a) b[c++] = a[d];\n\n    return b;\n  }\n\n  function Dd(a) {\n    if (a.X && "function" == typeof a.X) return a.X();\n\n    if (!a.V || "function" != typeof a.V) {\n      if (ma(a) || "string" === typeof a) {\n        var b = [];\n        a = a.length;\n\n        for (var c = 0; c < a; c++) b.push(c);\n\n        return b;\n      }\n\n      b = [];\n      c = 0;\n\n      for (var d in a) b[c++] = d;\n\n      return b;\n    }\n  }\n\n  function Ed(a, b) {\n    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (ma(a) || "string" === typeof a) w(a, b, void 0);else for (var c = Dd(a), d = Cd(a), e = d.length, f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);\n  }\n\n  ;\n\n  function Fd(a, b) {\n    this.b = {};\n    this.a = [];\n    this.c = 0;\n    var c = arguments.length;\n\n    if (1 < c) {\n      if (c % 2) throw Error("Uneven number of arguments");\n\n      for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);\n    } else if (a) if (a instanceof Fd) for (c = a.X(), d = 0; d < c.length; d++) this.set(c[d], a.get(c[d]));else for (d in a) this.set(d, a[d]);\n  }\n\n  k = Fd.prototype;\n\n  k.V = function () {\n    Gd(this);\n\n    for (var a = [], b = 0; b < this.a.length; b++) a.push(this.b[this.a[b]]);\n\n    return a;\n  };\n\n  k.X = function () {\n    Gd(this);\n    return this.a.concat();\n  };\n\n  k.clear = function () {\n    this.b = {};\n    this.c = this.a.length = 0;\n  };\n\n  function Gd(a) {\n    if (a.c != a.a.length) {\n      for (var b = 0, c = 0; b < a.a.length;) {\n        var d = a.a[b];\n        Hd(a.b, d) && (a.a[c++] = d);\n        b++;\n      }\n\n      a.a.length = c;\n    }\n\n    if (a.c != a.a.length) {\n      var e = {};\n\n      for (c = b = 0; b < a.a.length;) d = a.a[b], Hd(e, d) || (a.a[c++] = d, e[d] = 1), b++;\n\n      a.a.length = c;\n    }\n  }\n\n  k.get = function (a, b) {\n    return Hd(this.b, a) ? this.b[a] : b;\n  };\n\n  k.set = function (a, b) {\n    Hd(this.b, a) || (this.c++, this.a.push(a));\n    this.b[a] = b;\n  };\n\n  k.forEach = function (a, b) {\n    for (var c = this.X(), d = 0; d < c.length; d++) {\n      var e = c[d],\n          f = this.get(e);\n      a.call(b, f, e, this);\n    }\n  };\n\n  function Hd(a, b) {\n    return Object.prototype.hasOwnProperty.call(a, b);\n  }\n\n  ;\n  var Id = /^(?:([^:/?#.]+):)?(?:\\/\\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/\\\\#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$/;\n\n  function Jd(a, b) {\n    if (a) {\n      a = a.split("&");\n\n      for (var c = 0; c < a.length; c++) {\n        var d = a[c].indexOf("="),\n            e = null;\n\n        if (0 <= d) {\n          var f = a[c].substring(0, d);\n          e = a[c].substring(d + 1);\n        } else f = a[c];\n\n        b(f, e ? decodeURIComponent(e.replace(/\\+/g, " ")) : "");\n      }\n    }\n  }\n\n  ;\n\n  function Kd(a, b) {\n    this.b = this.i = this.f = "";\n    this.l = null;\n    this.g = this.c = "";\n    this.h = !1;\n    var c;\n    a instanceof Kd ? (this.h = void 0 !== b ? b : a.h, Ld(this, a.f), this.i = a.i, this.b = a.b, Md(this, a.l), this.c = a.c, Nd(this, Od(a.a)), this.g = a.g) : a && (c = String(a).match(Id)) ? (this.h = !!b, Ld(this, c[1] || "", !0), this.i = Pd(c[2] || ""), this.b = Pd(c[3] || "", !0), Md(this, c[4]), this.c = Pd(c[5] || "", !0), Nd(this, c[6] || "", !0), this.g = Pd(c[7] || "")) : (this.h = !!b, this.a = new Qd(null, this.h));\n  }\n\n  Kd.prototype.toString = function () {\n    var a = [],\n        b = this.f;\n    b && a.push(Rd(b, Sd, !0), ":");\n    var c = this.b;\n    if (c || "file" == b) a.push("//"), (b = this.i) && a.push(Rd(b, Sd, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.l, null != c && a.push(":", String(c));\n    if (c = this.c) this.b && "/" != c.charAt(0) && a.push("/"), a.push(Rd(c, "/" == c.charAt(0) ? Td : Ud, !0));\n    (c = this.a.toString()) && a.push("?", c);\n    (c = this.g) && a.push("#", Rd(c, Vd));\n    return a.join("");\n  };\n\n  Kd.prototype.resolve = function (a) {\n    var b = new Kd(this),\n        c = !!a.f;\n    c ? Ld(b, a.f) : c = !!a.i;\n    c ? b.i = a.i : c = !!a.b;\n    c ? b.b = a.b : c = null != a.l;\n    var d = a.c;\n    if (c) Md(b, a.l);else if (c = !!a.c) {\n      if ("/" != d.charAt(0)) if (this.b && !this.c) d = "/" + d;else {\n        var e = b.c.lastIndexOf("/");\n        -1 != e && (d = b.c.substr(0, e + 1) + d);\n      }\n      e = d;\n      if (".." == e || "." == e) d = "";else if (x(e, "./") || x(e, "/.")) {\n        d = 0 == e.lastIndexOf("/", 0);\n        e = e.split("/");\n\n        for (var f = [], g = 0; g < e.length;) {\n          var h = e[g++];\n          "." == h ? d && g == e.length && f.push("") : ".." == h ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(h), d = !0);\n        }\n\n        d = f.join("/");\n      } else d = e;\n    }\n    c ? b.c = d : c = "" !== a.a.toString();\n    c ? Nd(b, Od(a.a)) : c = !!a.g;\n    c && (b.g = a.g);\n    return b;\n  };\n\n  function Ld(a, b, c) {\n    a.f = c ? Pd(b, !0) : b;\n    a.f && (a.f = a.f.replace(/:$/, ""));\n  }\n\n  function Md(a, b) {\n    if (b) {\n      b = Number(b);\n      if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);\n      a.l = b;\n    } else a.l = null;\n  }\n\n  function Nd(a, b, c) {\n    b instanceof Qd ? (a.a = b, Wd(a.a, a.h)) : (c || (b = Rd(b, Xd)), a.a = new Qd(b, a.h));\n  }\n\n  function H(a, b, c) {\n    a.a.set(b, c);\n  }\n\n  function Yd(a, b) {\n    return a.a.get(b);\n  }\n\n  function Zd(a) {\n    return a instanceof Kd ? new Kd(a) : new Kd(a, void 0);\n  }\n\n  function $d(a, b) {\n    var c = new Kd(null, void 0);\n    Ld(c, "https");\n    a && (c.b = a);\n    b && (c.c = b);\n    return c;\n  }\n\n  function Pd(a, b) {\n    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";\n  }\n\n  function Rd(a, b, c) {\n    return "string" === typeof a ? (a = encodeURI(a).replace(b, ae), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;\n  }\n\n  function ae(a) {\n    a = a.charCodeAt(0);\n    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);\n  }\n\n  var Sd = /[#\\/\\?@]/g,\n      Ud = /[#\\?:]/g,\n      Td = /[#\\?]/g,\n      Xd = /[#\\?@]/g,\n      Vd = /#/g;\n\n  function Qd(a, b) {\n    this.b = this.a = null;\n    this.c = a || null;\n    this.f = !!b;\n  }\n\n  function be(a) {\n    a.a || (a.a = new Fd(), a.b = 0, a.c && Jd(a.c, function (b, c) {\n      a.add(decodeURIComponent(b.replace(/\\+/g, " ")), c);\n    }));\n  }\n\n  function ce(a) {\n    var b = Dd(a);\n    if ("undefined" == typeof b) throw Error("Keys are undefined");\n    var c = new Qd(null, void 0);\n    a = Cd(a);\n\n    for (var d = 0; d < b.length; d++) {\n      var e = b[d],\n          f = a[d];\n      Array.isArray(f) ? de(c, e, f) : c.add(e, f);\n    }\n\n    return c;\n  }\n\n  k = Qd.prototype;\n\n  k.add = function (a, b) {\n    be(this);\n    this.c = null;\n    a = ee(this, a);\n    var c = this.a.get(a);\n    c || this.a.set(a, c = []);\n    c.push(b);\n    this.b += 1;\n    return this;\n  };\n\n  function fe(a, b) {\n    be(a);\n    b = ee(a, b);\n    Hd(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, Hd(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Gd(a)));\n  }\n\n  k.clear = function () {\n    this.a = this.c = null;\n    this.b = 0;\n  };\n\n  function ge(a, b) {\n    be(a);\n    b = ee(a, b);\n    return Hd(a.a.b, b);\n  }\n\n  k.forEach = function (a, b) {\n    be(this);\n    this.a.forEach(function (c, d) {\n      w(c, function (e) {\n        a.call(b, e, d, this);\n      }, this);\n    }, this);\n  };\n\n  k.X = function () {\n    be(this);\n\n    for (var a = this.a.V(), b = this.a.X(), c = [], d = 0; d < b.length; d++) for (var e = a[d], f = 0; f < e.length; f++) c.push(b[d]);\n\n    return c;\n  };\n\n  k.V = function (a) {\n    be(this);\n    var b = [];\n    if ("string" === typeof a) ge(this, a) && (b = Wa(b, this.a.get(ee(this, a))));else {\n      a = this.a.V();\n\n      for (var c = 0; c < a.length; c++) b = Wa(b, a[c]);\n    }\n    return b;\n  };\n\n  k.set = function (a, b) {\n    be(this);\n    this.c = null;\n    a = ee(this, a);\n    ge(this, a) && (this.b -= this.a.get(a).length);\n    this.a.set(a, [b]);\n    this.b += 1;\n    return this;\n  };\n\n  k.get = function (a, b) {\n    if (!a) return b;\n    a = this.V(a);\n    return 0 < a.length ? String(a[0]) : b;\n  };\n\n  function de(a, b, c) {\n    fe(a, b);\n    0 < c.length && (a.c = null, a.a.set(ee(a, b), Xa(c)), a.b += c.length);\n  }\n\n  k.toString = function () {\n    if (this.c) return this.c;\n    if (!this.a) return "";\n\n    for (var a = [], b = this.a.X(), c = 0; c < b.length; c++) {\n      var d = b[c],\n          e = encodeURIComponent(String(d));\n      d = this.V(d);\n\n      for (var f = 0; f < d.length; f++) {\n        var g = e;\n        "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));\n        a.push(g);\n      }\n    }\n\n    return this.c = a.join("&");\n  };\n\n  function Od(a) {\n    var b = new Qd();\n    b.c = a.c;\n    a.a && (b.a = new Fd(a.a), b.b = a.b);\n    return b;\n  }\n\n  function ee(a, b) {\n    b = String(b);\n    a.f && (b = b.toLowerCase());\n    return b;\n  }\n\n  function Wd(a, b) {\n    b && !a.f && (be(a), a.c = null, a.a.forEach(function (c, d) {\n      var e = d.toLowerCase();\n      d != e && (fe(this, d), de(this, e, c));\n    }, a));\n    a.f = b;\n  }\n\n  ;\n\n  function he(a) {\n    var b = [];\n    ie(new je(), a, b);\n    return b.join("");\n  }\n\n  function je() {}\n\n  function ie(a, b, c) {\n    if (null == b) c.push("null");else {\n      if ("object" == typeof b) {\n        if (Array.isArray(b)) {\n          var d = b;\n          b = d.length;\n          c.push("[");\n\n          for (var e = "", f = 0; f < b; f++) c.push(e), ie(a, d[f], c), e = ",";\n\n          c.push("]");\n          return;\n        }\n\n        if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();else {\n          c.push("{");\n          e = "";\n\n          for (d in b) Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), ke(d, c), c.push(":"), ie(a, f, c), e = ","));\n\n          c.push("}");\n          return;\n        }\n      }\n\n      switch (typeof b) {\n        case "string":\n          ke(b, c);\n          break;\n\n        case "number":\n          c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");\n          break;\n\n        case "boolean":\n          c.push(String(b));\n          break;\n\n        case "function":\n          c.push("null");\n          break;\n\n        default:\n          throw Error("Unknown type: " + typeof b);\n      }\n    }\n  }\n\n  var le = {\n    \'"\': \'\\\\"\',\n    "\\\\": "\\\\\\\\",\n    "/": "\\\\/",\n    "\\b": "\\\\b",\n    "\\f": "\\\\f",\n    "\\n": "\\\\n",\n    "\\r": "\\\\r",\n    "\\t": "\\\\t",\n    "\\x0B": "\\\\u000b"\n  },\n      me = /\\uffff/.test("\\uffff") ? /[\\\\"\\x00-\\x1f\\x7f-\\uffff]/g : /[\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\n\n  function ke(a, b) {\n    b.push(\'"\', a.replace(me, function (c) {\n      var d = le[c];\n      d || (d = "\\\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1), le[c] = d);\n      return d;\n    }), \'"\');\n  }\n\n  ;\n\n  function ne() {\n    var a = I();\n    return Tb && !!dc && 11 == dc || /Edge\\/\\d+/.test(a);\n  }\n\n  function oe() {\n    return l.window && l.window.location.href || self && self.location && self.location.href || "";\n  }\n\n  function pe(a, b) {\n    b = b || l.window;\n    var c = "about:blank";\n    a && (c = Db(Fb(a)));\n    b.location.href = c;\n  }\n\n  function qe(a, b) {\n    var c = [],\n        d;\n\n    for (d in a) d in b ? typeof a[d] != typeof b[d] ? c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < qe(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);\n\n    for (d in b) d in a || c.push(d);\n\n    return c;\n  }\n\n  function re() {\n    var a = I();\n    a = se(a) != te ? null : (a = a.match(/\\sChrome\\/(\\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;\n    return a && 30 > a ? !1 : !Tb || !dc || 9 < dc;\n  }\n\n  function ue(a) {\n    a = (a || I()).toLowerCase();\n    return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? !0 : !1;\n  }\n\n  function ve(a) {\n    a = a || l.window;\n\n    try {\n      a.close();\n    } catch (b) {}\n  }\n\n  function we(a, b, c) {\n    var d = Math.floor(1E9 * Math.random()).toString();\n    b = b || 500;\n    c = c || 600;\n    var e = (window.screen.availHeight - c) / 2,\n        f = (window.screen.availWidth - b) / 2;\n    b = {\n      width: b,\n      height: c,\n      top: 0 < e ? e : 0,\n      left: 0 < f ? f : 0,\n      location: !0,\n      resizable: !0,\n      statusbar: !0,\n      toolbar: !1\n    };\n    c = I().toLowerCase();\n    d && (b.target = d, x(c, "crios/") && (b.target = "_blank"));\n    se(I()) == xe && (a = a || "http://localhost", b.scrollbars = !0);\n    c = a || "";\n    (a = b) || (a = {});\n    d = window;\n    b = c instanceof Ab ? c : Fb("undefined" != typeof c.href ? c.href : String(c));\n    c = a.target || c.target;\n    e = [];\n\n    for (g in a) switch (g) {\n      case "width":\n      case "height":\n      case "top":\n      case "left":\n        e.push(g + "=" + a[g]);\n        break;\n\n      case "target":\n      case "noopener":\n      case "noreferrer":\n        break;\n\n      default:\n        e.push(g + "=" + (a[g] ? 1 : 0));\n    }\n\n    var g = e.join(",");\n    if ((y("iPhone") && !y("iPod") && !y("iPad") || y("iPad") || y("iPod")) && d.navigator && d.navigator.standalone && c && "_self" != c) g = jc(document, "A"), nb(g, "HTMLAnchorElement"), b instanceof Ab || b instanceof Ab || (b = "object" == typeof b && b.ra ? b.qa() : String(b), Eb.test(b) || (b = "about:invalid#zClosurez"), b = new Ab(Bb, b)), g.href = Db(b), g.setAttribute("target", c), a.noreferrer && g.setAttribute("rel", "noreferrer"), a = document.createEvent("MouseEvent"), a.initMouseEvent("click", !0, !0, d, 1), g.dispatchEvent(a), g = {};else if (a.noreferrer) {\n      if (g = d.open("", c, g), a = Db(b), g && (Vb && x(a, ";") && (a = "\'" + a.replace(/\'/g, "%27") + "\'"), g.opener = null, a = Jb(\'<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=\' + Ob(a) + \'">\'), d = g.document)) d.write(Ib(a)), d.close();\n    } else (g = d.open(Db(b), c, g)) && a.noopener && (g.opener = null);\n    if (g) try {\n      g.focus();\n    } catch (h) {}\n    return g;\n  }\n\n  function ye(a) {\n    return new B(function (b) {\n      function c() {\n        Bd(2E3).then(function () {\n          if (!a || a.closed) b();else return c();\n        });\n      }\n\n      return c();\n    });\n  }\n\n  var ze = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/,\n      Ae = /^[^@]+@[^@]+$/;\n\n  function Be() {\n    var a = null;\n    return new B(function (b) {\n      "complete" == l.document.readyState ? b() : (a = function () {\n        b();\n      }, kd(window, "load", a));\n    }).o(function (b) {\n      td(window, "load", a);\n      throw b;\n    });\n  }\n\n  function Ce() {\n    return De(void 0) ? Be().then(function () {\n      return new B(function (a, b) {\n        var c = l.document,\n            d = setTimeout(function () {\n          b(Error("Cordova framework is not ready."));\n        }, 1E3);\n        c.addEventListener("deviceready", function () {\n          clearTimeout(d);\n          a();\n        }, !1);\n      });\n    }) : E(Error("Cordova must run in an Android or iOS file scheme."));\n  }\n\n  function De(a) {\n    a = a || I();\n    return !("file:" !== Ee() && "ionic:" !== Ee() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));\n  }\n\n  function Fe() {\n    var a = l.window;\n\n    try {\n      return !(!a || a == a.top);\n    } catch (b) {\n      return !1;\n    }\n  }\n\n  function Ge() {\n    return "undefined" !== typeof l.WorkerGlobalScope && "function" === typeof l.importScripts;\n  }\n\n  function He() {\n    return firebase.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : firebase.INTERNAL.hasOwnProperty("node") ? "Node" : Ge() ? "Worker" : "Browser";\n  }\n\n  function Ie() {\n    var a = He();\n    return "ReactNative" === a || "Node" === a;\n  }\n\n  function Je() {\n    for (var a = 50, b = []; 0 < a;) b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;\n\n    return b.join("");\n  }\n\n  var xe = "Firefox",\n      te = "Chrome";\n\n  function se(a) {\n    var b = a.toLowerCase();\n    if (x(b, "opera/") || x(b, "opr/") || x(b, "opios/")) return "Opera";\n    if (x(b, "iemobile")) return "IEMobile";\n    if (x(b, "msie") || x(b, "trident/")) return "IE";\n    if (x(b, "edge/")) return "Edge";\n    if (x(b, "firefox/")) return xe;\n    if (x(b, "silk/")) return "Silk";\n    if (x(b, "blackberry")) return "Blackberry";\n    if (x(b, "webos")) return "Webos";\n    if (!x(b, "safari/") || x(b, "chrome/") || x(b, "crios/") || x(b, "android")) {\n      if (!x(b, "chrome/") && !x(b, "crios/") || x(b, "edge/")) {\n        if (x(b, "android")) return "Android";\n        if ((a = a.match(/([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/)) && 2 == a.length) return a[1];\n      } else return te;\n    } else return "Safari";\n    return "Other";\n  }\n\n  var Ke = {\n    jd: "FirebaseCore-web",\n    ld: "FirebaseUI-web"\n  };\n\n  function Le(a, b) {\n    b = b || [];\n    var c = [],\n        d = {},\n        e;\n\n    for (e in Ke) d[Ke[e]] = !0;\n\n    for (e = 0; e < b.length; e++) "undefined" !== typeof d[b[e]] && (delete d[b[e]], c.push(b[e]));\n\n    c.sort();\n    b = c;\n    b.length || (b = ["FirebaseCore-web"]);\n    c = He();\n    "Browser" === c ? (d = I(), c = se(d)) : "Worker" === c && (d = I(), c = se(d) + "-" + c);\n    return c + "/JsCore/" + a + "/" + b.join(",");\n  }\n\n  function I() {\n    return l.navigator && l.navigator.userAgent || "";\n  }\n\n  function J(a, b) {\n    a = a.split(".");\n    b = b || l;\n\n    for (var c = 0; c < a.length && "object" == typeof b && null != b; c++) b = b[a[c]];\n\n    c != a.length && (b = void 0);\n    return b;\n  }\n\n  function Me() {\n    try {\n      var a = l.localStorage,\n          b = Ne();\n      if (a) return a.setItem(b, "1"), a.removeItem(b), ne() ? !!l.indexedDB : !0;\n    } catch (c) {\n      return Ge() && !!l.indexedDB;\n    }\n\n    return !1;\n  }\n\n  function Oe() {\n    return (Pe() || "chrome-extension:" === Ee() || De()) && !Ie() && Me() && !Ge();\n  }\n\n  function Pe() {\n    return "http:" === Ee() || "https:" === Ee();\n  }\n\n  function Ee() {\n    return l.location && l.location.protocol || null;\n  }\n\n  function Qe(a) {\n    a = a || I();\n    return ue(a) || se(a) == xe ? !1 : !0;\n  }\n\n  function Re(a) {\n    return "undefined" === typeof a ? null : he(a);\n  }\n\n  function Se(a) {\n    var b = {},\n        c;\n\n    for (c in a) a.hasOwnProperty(c) && null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);\n\n    return b;\n  }\n\n  function Te(a) {\n    if (null !== a) return JSON.parse(a);\n  }\n\n  function Ne(a) {\n    return a ? a : Math.floor(1E9 * Math.random()).toString();\n  }\n\n  function Ue(a) {\n    a = a || I();\n    return "Safari" == se(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0;\n  }\n\n  function Ve() {\n    var a = l.___jsl;\n    if (a && a.H) for (var b in a.H) if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for (var c = 0; c < a.CP.length; c++) a.CP[c] = null;\n  }\n\n  function We(a, b) {\n    if (a > b) throw Error("Short delay should be less than long delay!");\n    this.a = a;\n    this.c = b;\n    a = I();\n    b = He();\n    this.b = ue(a) || "ReactNative" === b;\n  }\n\n  We.prototype.get = function () {\n    var a = l.navigator;\n    return (a && "boolean" === typeof a.onLine && (Pe() || "chrome-extension:" === Ee() || "undefined" !== typeof a.connection) ? a.onLine : 1) ? this.b ? this.c : this.a : Math.min(5E3, this.a);\n  };\n\n  function Xe() {\n    var a = l.document;\n    return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : !0;\n  }\n\n  function Ye() {\n    var a = l.document,\n        b = null;\n    return Xe() || !a ? D() : new B(function (c) {\n      b = function () {\n        Xe() && (a.removeEventListener("visibilitychange", b, !1), c());\n      };\n\n      a.addEventListener("visibilitychange", b, !1);\n    }).o(function (c) {\n      a.removeEventListener("visibilitychange", b, !1);\n      throw c;\n    });\n  }\n\n  function Ze(a) {\n    try {\n      var b = new Date(parseInt(a, 10));\n      if (!isNaN(b.getTime()) && !/[^0-9]/.test(a)) return b.toUTCString();\n    } catch (c) {}\n\n    return null;\n  }\n\n  function $e() {\n    return !(!J("fireauth.oauthhelper", l) && !J("fireauth.iframe", l));\n  }\n\n  function af() {\n    var a = l.navigator;\n    return a && a.serviceWorker && a.serviceWorker.controller || null;\n  }\n\n  function bf() {\n    var a = l.navigator;\n    return a && a.serviceWorker ? D().then(function () {\n      return a.serviceWorker.ready;\n    }).then(function (b) {\n      return b.active || null;\n    }).o(function () {\n      return null;\n    }) : D(null);\n  }\n\n  ;\n  var cf = {};\n\n  function df(a) {\n    cf[a] || (cf[a] = !0, "undefined" !== typeof console && "function" === typeof console.warn && console.warn(a));\n  }\n\n  ;\n  var ef;\n\n  try {\n    var ff = {};\n    Object.defineProperty(ff, "abcd", {\n      configurable: !0,\n      enumerable: !0,\n      value: 1\n    });\n    Object.defineProperty(ff, "abcd", {\n      configurable: !0,\n      enumerable: !0,\n      value: 2\n    });\n    ef = 2 == ff.abcd;\n  } catch (a) {\n    ef = !1;\n  }\n\n  function K(a, b, c) {\n    ef ? Object.defineProperty(a, b, {\n      configurable: !0,\n      enumerable: !0,\n      value: c\n    }) : a[b] = c;\n  }\n\n  function L(a, b) {\n    if (b) for (var c in b) b.hasOwnProperty(c) && K(a, c, b[c]);\n  }\n\n  function gf(a) {\n    var b = {};\n    L(b, a);\n    return b;\n  }\n\n  function hf(a) {\n    var b = {},\n        c;\n\n    for (c in a) a.hasOwnProperty(c) && (b[c] = a[c]);\n\n    return b;\n  }\n\n  function jf(a, b) {\n    if (!b || !b.length) return !0;\n    if (!a) return !1;\n\n    for (var c = 0; c < b.length; c++) {\n      var d = a[b[c]];\n      if (void 0 === d || null === d || "" === d) return !1;\n    }\n\n    return !0;\n  }\n\n  function kf(a) {\n    var b = a;\n\n    if ("object" == typeof a && null != a) {\n      b = "length" in a ? [] : {};\n\n      for (var c in a) K(b, c, kf(a[c]));\n    }\n\n    return b;\n  }\n\n  ;\n  /*\n  Copyright 2019 Google Inc.\n  Licensed under the Apache License, Version 2.0 (the "License");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an "AS IS" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  */\n\n  function lf(a) {\n    var b = a && (a[mf] ? "phone" : null);\n\n    if (b && a && a[nf]) {\n      K(this, "uid", a[nf]);\n      K(this, "displayName", a[of] || null);\n      var c = null;\n      a[pf] && (c = new Date(a[pf]).toUTCString());\n      K(this, "enrollmentTime", c);\n      K(this, "factorId", b);\n    } else throw new t("internal-error", "Internal assert: invalid MultiFactorInfo object");\n  }\n\n  lf.prototype.v = function () {\n    return {\n      uid: this.uid,\n      displayName: this.displayName,\n      factorId: this.factorId,\n      enrollmentTime: this.enrollmentTime\n    };\n  };\n\n  function qf(a) {\n    try {\n      var b = new rf(a);\n    } catch (c) {\n      b = null;\n    }\n\n    return b;\n  }\n\n  var of = "displayName",\n      pf = "enrolledAt",\n      nf = "mfaEnrollmentId",\n      mf = "phoneInfo";\n\n  function rf(a) {\n    lf.call(this, a);\n    K(this, "phoneNumber", a[mf]);\n  }\n\n  r(rf, lf);\n\n  rf.prototype.v = function () {\n    var a = rf.Za.v.call(this);\n    a.phoneNumber = this.phoneNumber;\n    return a;\n  };\n\n  function sf(a) {\n    var b = {},\n        c = a[tf],\n        d = a[uf],\n        e = a[vf];\n    a = qf(a[wf]);\n    if (!e || e != xf && e != yf && !c || e == yf && !d || e == zf && !a) throw Error("Invalid checkActionCode response!");\n    e == yf ? (b[Af] = c || null, b[Bf] = c || null, b[Cf] = d) : (b[Af] = d || null, b[Bf] = d || null, b[Cf] = c || null);\n    b[Df] = a || null;\n    K(this, Ef, e);\n    K(this, Ff, kf(b));\n  }\n\n  var zf = "REVERT_SECOND_FACTOR_ADDITION",\n      xf = "EMAIL_SIGNIN",\n      yf = "VERIFY_AND_CHANGE_EMAIL",\n      tf = "email",\n      wf = "mfaInfo",\n      uf = "newEmail",\n      vf = "requestType",\n      Cf = "email",\n      Af = "fromEmail",\n      Df = "multiFactorInfo",\n      Bf = "previousEmail",\n      Ff = "data",\n      Ef = "operation";\n\n  function Gf(a) {\n    a = Zd(a);\n    var b = Yd(a, Hf) || null,\n        c = Yd(a, If) || null,\n        d = Yd(a, Jf) || null;\n    d = d ? Kf[d] || null : null;\n    if (!b || !c || !d) throw new t("argument-error", Hf + ", " + If + "and " + Jf + " are required in a valid action code URL.");\n    L(this, {\n      apiKey: b,\n      operation: d,\n      code: c,\n      continueUrl: Yd(a, Lf) || null,\n      languageCode: Yd(a, Mf) || null,\n      tenantId: Yd(a, Nf) || null\n    });\n  }\n\n  var Hf = "apiKey",\n      If = "oobCode",\n      Lf = "continueUrl",\n      Mf = "languageCode",\n      Jf = "mode",\n      Nf = "tenantId",\n      Kf = {\n    recoverEmail: "RECOVER_EMAIL",\n    resetPassword: "PASSWORD_RESET",\n    revertSecondFactorAddition: zf,\n    signIn: xf,\n    verifyAndChangeEmail: yf,\n    verifyEmail: "VERIFY_EMAIL"\n  };\n\n  function Of(a) {\n    try {\n      return new Gf(a);\n    } catch (b) {\n      return null;\n    }\n  }\n\n  ;\n\n  function Pf(a) {\n    var b = a[Qf];\n    if ("undefined" === typeof b) throw new t("missing-continue-uri");\n    if ("string" !== typeof b || "string" === typeof b && !b.length) throw new t("invalid-continue-uri");\n    this.h = b;\n    this.b = this.a = null;\n    this.g = !1;\n    var c = a[Rf];\n\n    if (c && "object" === typeof c) {\n      b = c[Sf];\n      var d = c[Tf];\n      c = c[Uf];\n\n      if ("string" === typeof b && b.length) {\n        this.a = b;\n        if ("undefined" !== typeof d && "boolean" !== typeof d) throw new t("argument-error", Tf + " property must be a boolean when specified.");\n        this.g = !!d;\n        if ("undefined" !== typeof c && ("string" !== typeof c || "string" === typeof c && !c.length)) throw new t("argument-error", Uf + " property must be a non empty string when specified.");\n        this.b = c || null;\n      } else {\n        if ("undefined" !== typeof b) throw new t("argument-error", Sf + " property must be a non empty string when specified.");\n        if ("undefined" !== typeof d || "undefined" !== typeof c) throw new t("missing-android-pkg-name");\n      }\n    } else if ("undefined" !== typeof c) throw new t("argument-error", Rf + " property must be a non null object when specified.");\n\n    this.f = null;\n    if ((b = a[Vf]) && "object" === typeof b) {\n      if (b = b[Wf], "string" === typeof b && b.length) this.f = b;else {\n        if ("undefined" !== typeof b) throw new t("argument-error", Wf + " property must be a non empty string when specified.");\n      }\n    } else if ("undefined" !== typeof b) throw new t("argument-error", Vf + " property must be a non null object when specified.");\n    b = a[Xf];\n    if ("undefined" !== typeof b && "boolean" !== typeof b) throw new t("argument-error", Xf + " property must be a boolean when specified.");\n    this.c = !!b;\n    a = a[Yf];\n    if ("undefined" !== typeof a && ("string" !== typeof a || "string" === typeof a && !a.length)) throw new t("argument-error", Yf + " property must be a non empty string when specified.");\n    this.i = a || null;\n  }\n\n  var Rf = "android",\n      Yf = "dynamicLinkDomain",\n      Xf = "handleCodeInApp",\n      Vf = "iOS",\n      Qf = "url",\n      Tf = "installApp",\n      Uf = "minimumVersion",\n      Sf = "packageName",\n      Wf = "bundleId";\n\n  function Zf(a) {\n    var b = {};\n    b.continueUrl = a.h;\n    b.canHandleCodeInApp = a.c;\n    if (b.androidPackageName = a.a) b.androidMinimumVersion = a.b, b.androidInstallApp = a.g;\n    b.iOSBundleId = a.f;\n    b.dynamicLinkDomain = a.i;\n\n    for (var c in b) null === b[c] && delete b[c];\n\n    return b;\n  }\n\n  ;\n\n  function $f(a) {\n    return Pa(a, function (b) {\n      b = b.toString(16);\n      return 1 < b.length ? b : "0" + b;\n    }).join("");\n  }\n\n  ;\n  var ag = null;\n\n  function bg(a) {\n    var b = "";\n    cg(a, function (c) {\n      b += String.fromCharCode(c);\n    });\n    return b;\n  }\n\n  function cg(a, b) {\n    function c(m) {\n      for (; d < a.length;) {\n        var p = a.charAt(d++),\n            v = ag[p];\n        if (null != v) return v;\n        if (!/^[\\s\\xa0]*$/.test(p)) throw Error("Unknown base64 encoding at char: " + p);\n      }\n\n      return m;\n    }\n\n    dg();\n\n    for (var d = 0;;) {\n      var e = c(-1),\n          f = c(0),\n          g = c(64),\n          h = c(64);\n      if (64 === h && -1 === e) break;\n      b(e << 2 | f >> 4);\n      64 != g && (b(f << 4 & 240 | g >> 2), 64 != h && b(g << 6 & 192 | h));\n    }\n  }\n\n  function dg() {\n    if (!ag) {\n      ag = {};\n\n      for (var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), b = ["+/=", "+/", "-_=", "-_.", "-_"], c = 0; 5 > c; c++) for (var d = a.concat(b[c].split("")), e = 0; e < d.length; e++) {\n        var f = d[e];\n        void 0 === ag[f] && (ag[f] = e);\n      }\n    }\n  }\n\n  ;\n\n  function eg(a) {\n    var b = fg(a);\n    if (!(b && b.sub && b.iss && b.aud && b.exp)) throw Error("Invalid JWT");\n    this.g = a;\n    this.c = b.exp;\n    this.h = b.sub;\n    ua();\n    this.a = b.provider_id || b.firebase && b.firebase.sign_in_provider || null;\n    this.f = b.firebase && b.firebase.tenant || null;\n    this.b = !!b.is_anonymous || "anonymous" == this.a;\n  }\n\n  eg.prototype.S = function () {\n    return this.f;\n  };\n\n  eg.prototype.i = function () {\n    return this.b;\n  };\n\n  eg.prototype.toString = function () {\n    return this.g;\n  };\n\n  function gg(a) {\n    try {\n      return new eg(a);\n    } catch (b) {\n      return null;\n    }\n  }\n\n  function fg(a) {\n    if (!a) return null;\n    a = a.split(".");\n    if (3 != a.length) return null;\n    a = a[1];\n\n    for (var b = (4 - a.length % 4) % 4, c = 0; c < b; c++) a += ".";\n\n    try {\n      return JSON.parse(bg(a));\n    } catch (d) {}\n\n    return null;\n  }\n\n  ;\n  var hg = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),\n      ig = ["client_id", "response_type", "scope", "redirect_uri", "state"],\n      jg = {\n    kd: {\n      Ha: "locale",\n      ta: 700,\n      sa: 600,\n      ea: "facebook.com",\n      Va: ig\n    },\n    md: {\n      Ha: null,\n      ta: 500,\n      sa: 750,\n      ea: "github.com",\n      Va: ig\n    },\n    nd: {\n      Ha: "hl",\n      ta: 515,\n      sa: 680,\n      ea: "google.com",\n      Va: ig\n    },\n    td: {\n      Ha: "lang",\n      ta: 485,\n      sa: 705,\n      ea: "twitter.com",\n      Va: hg\n    },\n    gd: {\n      Ha: "locale",\n      ta: 640,\n      sa: 600,\n      ea: "apple.com",\n      Va: []\n    }\n  };\n\n  function kg(a) {\n    for (var b in jg) if (jg[b].ea == a) return jg[b];\n\n    return null;\n  }\n\n  ;\n\n  function lg(a) {\n    var b = {};\n    b["facebook.com"] = mg;\n    b["google.com"] = ng;\n    b["github.com"] = og;\n    b["twitter.com"] = pg;\n    var c = a && a[qg];\n\n    try {\n      if (c) return b[c] ? new b[c](a) : new rg(a);\n      if ("undefined" !== typeof a[sg]) return new tg(a);\n    } catch (d) {}\n\n    return null;\n  }\n\n  var sg = "idToken",\n      qg = "providerId";\n\n  function tg(a) {\n    var b = a[qg];\n\n    if (!b && a[sg]) {\n      var c = gg(a[sg]);\n      c && c.a && (b = c.a);\n    }\n\n    if (!b) throw Error("Invalid additional user info!");\n    if ("anonymous" == b || "custom" == b) b = null;\n    c = !1;\n    "undefined" !== typeof a.isNewUser ? c = !!a.isNewUser : "identitytoolkit#SignupNewUserResponse" === a.kind && (c = !0);\n    K(this, "providerId", b);\n    K(this, "isNewUser", c);\n  }\n\n  function rg(a) {\n    tg.call(this, a);\n    a = Te(a.rawUserInfo || "{}");\n    K(this, "profile", kf(a || {}));\n  }\n\n  r(rg, tg);\n\n  function mg(a) {\n    rg.call(this, a);\n    if ("facebook.com" != this.providerId) throw Error("Invalid provider ID!");\n  }\n\n  r(mg, rg);\n\n  function og(a) {\n    rg.call(this, a);\n    if ("github.com" != this.providerId) throw Error("Invalid provider ID!");\n    K(this, "username", this.profile && this.profile.login || null);\n  }\n\n  r(og, rg);\n\n  function ng(a) {\n    rg.call(this, a);\n    if ("google.com" != this.providerId) throw Error("Invalid provider ID!");\n  }\n\n  r(ng, rg);\n\n  function pg(a) {\n    rg.call(this, a);\n    if ("twitter.com" != this.providerId) throw Error("Invalid provider ID!");\n    K(this, "username", a.screenName || null);\n  }\n\n  r(pg, rg);\n\n  function ug(a) {\n    var b = Zd(a),\n        c = Yd(b, "link"),\n        d = Yd(Zd(c), "link");\n    b = Yd(b, "deep_link_id");\n    return Yd(Zd(b), "link") || b || d || c || a;\n  }\n\n  ;\n\n  function vg(a, b) {\n    if (!a && !b) throw new t("internal-error", "Internal assert: no raw session string available");\n    if (a && b) throw new t("internal-error", "Internal assert: unable to determine the session type");\n    this.a = a || null;\n    this.b = b || null;\n    this.type = this.a ? wg : xg;\n  }\n\n  var wg = "enroll",\n      xg = "signin";\n\n  vg.prototype.Fa = function () {\n    return this.a ? D(this.a) : D(this.b);\n  };\n\n  vg.prototype.v = function () {\n    return this.type == wg ? {\n      multiFactorSession: {\n        idToken: this.a\n      }\n    } : {\n      multiFactorSession: {\n        pendingCredential: this.b\n      }\n    };\n  };\n\n  function yg() {}\n\n  yg.prototype.ia = function () {};\n\n  yg.prototype.b = function () {};\n\n  yg.prototype.c = function () {};\n\n  yg.prototype.v = function () {};\n\n  function zg(a, b) {\n    return a.then(function (c) {\n      if (c[Ag]) {\n        var d = gg(c[Ag]);\n        if (!d || b != d.h) throw new t("user-mismatch");\n        return c;\n      }\n\n      throw new t("user-mismatch");\n    }).o(function (c) {\n      throw c && c.code && c.code == va + "user-not-found" ? new t("user-mismatch") : c;\n    });\n  }\n\n  function Bg(a, b) {\n    if (b) this.a = b;else throw new t("internal-error", "failed to construct a credential");\n    K(this, "providerId", a);\n    K(this, "signInMethod", a);\n  }\n\n  Bg.prototype.ia = function (a) {\n    return Cg(a, Dg(this));\n  };\n\n  Bg.prototype.b = function (a, b) {\n    var c = Dg(this);\n    c.idToken = b;\n    return Eg(a, c);\n  };\n\n  Bg.prototype.c = function (a, b) {\n    return zg(Fg(a, Dg(this)), b);\n  };\n\n  function Dg(a) {\n    return {\n      pendingToken: a.a,\n      requestUri: "http://localhost"\n    };\n  }\n\n  Bg.prototype.v = function () {\n    return {\n      providerId: this.providerId,\n      signInMethod: this.signInMethod,\n      pendingToken: this.a\n    };\n  };\n\n  function Gg(a) {\n    if (a && a.providerId && a.signInMethod && 0 == a.providerId.indexOf("saml.") && a.pendingToken) try {\n      return new Bg(a.providerId, a.pendingToken);\n    } catch (b) {}\n    return null;\n  }\n\n  function Hg(a, b, c) {\n    this.a = null;\n    if (b.idToken || b.accessToken) b.idToken && K(this, "idToken", b.idToken), b.accessToken && K(this, "accessToken", b.accessToken), b.nonce && !b.pendingToken && K(this, "nonce", b.nonce), b.pendingToken && (this.a = b.pendingToken);else if (b.oauthToken && b.oauthTokenSecret) K(this, "accessToken", b.oauthToken), K(this, "secret", b.oauthTokenSecret);else throw new t("internal-error", "failed to construct a credential");\n    K(this, "providerId", a);\n    K(this, "signInMethod", c);\n  }\n\n  Hg.prototype.ia = function (a) {\n    return Cg(a, Ig(this));\n  };\n\n  Hg.prototype.b = function (a, b) {\n    var c = Ig(this);\n    c.idToken = b;\n    return Eg(a, c);\n  };\n\n  Hg.prototype.c = function (a, b) {\n    var c = Ig(this);\n    return zg(Fg(a, c), b);\n  };\n\n  function Ig(a) {\n    var b = {};\n    a.idToken && (b.id_token = a.idToken);\n    a.accessToken && (b.access_token = a.accessToken);\n    a.secret && (b.oauth_token_secret = a.secret);\n    b.providerId = a.providerId;\n    a.nonce && !a.a && (b.nonce = a.nonce);\n    b = {\n      postBody: ce(b).toString(),\n      requestUri: "http://localhost"\n    };\n    a.a && (delete b.postBody, b.pendingToken = a.a);\n    return b;\n  }\n\n  Hg.prototype.v = function () {\n    var a = {\n      providerId: this.providerId,\n      signInMethod: this.signInMethod\n    };\n    this.idToken && (a.oauthIdToken = this.idToken);\n    this.accessToken && (a.oauthAccessToken = this.accessToken);\n    this.secret && (a.oauthTokenSecret = this.secret);\n    this.nonce && (a.nonce = this.nonce);\n    this.a && (a.pendingToken = this.a);\n    return a;\n  };\n\n  function Jg(a) {\n    if (a && a.providerId && a.signInMethod) {\n      var b = {\n        idToken: a.oauthIdToken,\n        accessToken: a.oauthTokenSecret ? null : a.oauthAccessToken,\n        oauthTokenSecret: a.oauthTokenSecret,\n        oauthToken: a.oauthTokenSecret && a.oauthAccessToken,\n        nonce: a.nonce,\n        pendingToken: a.pendingToken\n      };\n\n      try {\n        return new Hg(a.providerId, b, a.signInMethod);\n      } catch (c) {}\n    }\n\n    return null;\n  }\n\n  function Kg(a, b) {\n    this.Oc = b || [];\n    L(this, {\n      providerId: a,\n      isOAuthProvider: !0\n    });\n    this.Fb = {};\n    this.lb = (kg(a) || {}).Ha || null;\n    this.kb = null;\n  }\n\n  Kg.prototype.Ia = function (a) {\n    this.Fb = lb(a);\n    return this;\n  };\n\n  function Lg(a) {\n    if ("string" !== typeof a || 0 != a.indexOf("saml.")) throw new t("argument-error", \'SAML provider IDs must be prefixed with "saml."\');\n    Kg.call(this, a, []);\n  }\n\n  r(Lg, Kg);\n\n  function M(a) {\n    Kg.call(this, a, ig);\n    this.a = [];\n  }\n\n  r(M, Kg);\n\n  M.prototype.Aa = function (a) {\n    Ta(this.a, a) || this.a.push(a);\n    return this;\n  };\n\n  M.prototype.Nb = function () {\n    return Xa(this.a);\n  };\n\n  M.prototype.credential = function (a, b) {\n    var c;\n    n(a) ? c = {\n      idToken: a.idToken || null,\n      accessToken: a.accessToken || null,\n      nonce: a.rawNonce || null\n    } : c = {\n      idToken: a || null,\n      accessToken: b || null\n    };\n    if (!c.idToken && !c.accessToken) throw new t("argument-error", "credential failed: must provide the ID token and/or the access token.");\n    return new Hg(this.providerId, c, this.providerId);\n  };\n\n  function Mg() {\n    M.call(this, "facebook.com");\n  }\n\n  r(Mg, M);\n  K(Mg, "PROVIDER_ID", "facebook.com");\n  K(Mg, "FACEBOOK_SIGN_IN_METHOD", "facebook.com");\n\n  function Ng(a) {\n    if (!a) throw new t("argument-error", "credential failed: expected 1 argument (the OAuth access token).");\n    var b = a;\n    n(a) && (b = a.accessToken);\n    return new Mg().credential({\n      accessToken: b\n    });\n  }\n\n  function Og() {\n    M.call(this, "github.com");\n  }\n\n  r(Og, M);\n  K(Og, "PROVIDER_ID", "github.com");\n  K(Og, "GITHUB_SIGN_IN_METHOD", "github.com");\n\n  function Pg(a) {\n    if (!a) throw new t("argument-error", "credential failed: expected 1 argument (the OAuth access token).");\n    var b = a;\n    n(a) && (b = a.accessToken);\n    return new Og().credential({\n      accessToken: b\n    });\n  }\n\n  function Qg() {\n    M.call(this, "google.com");\n    this.Aa("profile");\n  }\n\n  r(Qg, M);\n  K(Qg, "PROVIDER_ID", "google.com");\n  K(Qg, "GOOGLE_SIGN_IN_METHOD", "google.com");\n\n  function Rg(a, b) {\n    var c = a;\n    n(a) && (c = a.idToken, b = a.accessToken);\n    return new Qg().credential({\n      idToken: c,\n      accessToken: b\n    });\n  }\n\n  function Sg() {\n    Kg.call(this, "twitter.com", hg);\n  }\n\n  r(Sg, Kg);\n  K(Sg, "PROVIDER_ID", "twitter.com");\n  K(Sg, "TWITTER_SIGN_IN_METHOD", "twitter.com");\n\n  function Tg(a, b) {\n    var c = a;\n    n(c) || (c = {\n      oauthToken: a,\n      oauthTokenSecret: b\n    });\n    if (!c.oauthToken || !c.oauthTokenSecret) throw new t("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");\n    return new Hg("twitter.com", c, "twitter.com");\n  }\n\n  function Ug(a, b, c) {\n    this.a = a;\n    this.f = b;\n    K(this, "providerId", "password");\n    K(this, "signInMethod", c === Vg.EMAIL_LINK_SIGN_IN_METHOD ? Vg.EMAIL_LINK_SIGN_IN_METHOD : Vg.EMAIL_PASSWORD_SIGN_IN_METHOD);\n  }\n\n  Ug.prototype.ia = function (a) {\n    return this.signInMethod == Vg.EMAIL_LINK_SIGN_IN_METHOD ? N(a, Wg, {\n      email: this.a,\n      oobCode: this.f\n    }) : N(a, Xg, {\n      email: this.a,\n      password: this.f\n    });\n  };\n\n  Ug.prototype.b = function (a, b) {\n    return this.signInMethod == Vg.EMAIL_LINK_SIGN_IN_METHOD ? N(a, Yg, {\n      idToken: b,\n      email: this.a,\n      oobCode: this.f\n    }) : N(a, Zg, {\n      idToken: b,\n      email: this.a,\n      password: this.f\n    });\n  };\n\n  Ug.prototype.c = function (a, b) {\n    return zg(this.ia(a), b);\n  };\n\n  Ug.prototype.v = function () {\n    return {\n      email: this.a,\n      password: this.f,\n      signInMethod: this.signInMethod\n    };\n  };\n\n  function $g(a) {\n    return a && a.email && a.password ? new Ug(a.email, a.password, a.signInMethod) : null;\n  }\n\n  function Vg() {\n    L(this, {\n      providerId: "password",\n      isOAuthProvider: !1\n    });\n  }\n\n  function ah(a, b) {\n    b = bh(b);\n    if (!b) throw new t("argument-error", "Invalid email link!");\n    return new Ug(a, b.code, Vg.EMAIL_LINK_SIGN_IN_METHOD);\n  }\n\n  function bh(a) {\n    a = ug(a);\n    return (a = Of(a)) && a.operation === xf ? a : null;\n  }\n\n  L(Vg, {\n    PROVIDER_ID: "password"\n  });\n  L(Vg, {\n    EMAIL_LINK_SIGN_IN_METHOD: "emailLink"\n  });\n  L(Vg, {\n    EMAIL_PASSWORD_SIGN_IN_METHOD: "password"\n  });\n\n  function ch(a) {\n    if (!(a.bb && a.ab || a.Ja && a.da)) throw new t("internal-error");\n    this.a = a;\n    K(this, "providerId", "phone");\n    this.ea = "phone";\n    K(this, "signInMethod", "phone");\n  }\n\n  ch.prototype.ia = function (a) {\n    return a.cb(dh(this));\n  };\n\n  ch.prototype.b = function (a, b) {\n    var c = dh(this);\n    c.idToken = b;\n    return N(a, eh, c);\n  };\n\n  ch.prototype.c = function (a, b) {\n    var c = dh(this);\n    c.operation = "REAUTH";\n    a = N(a, fh, c);\n    return zg(a, b);\n  };\n\n  ch.prototype.v = function () {\n    var a = {\n      providerId: "phone"\n    };\n    this.a.bb && (a.verificationId = this.a.bb);\n    this.a.ab && (a.verificationCode = this.a.ab);\n    this.a.Ja && (a.temporaryProof = this.a.Ja);\n    this.a.da && (a.phoneNumber = this.a.da);\n    return a;\n  };\n\n  function gh(a) {\n    if (a && "phone" === a.providerId && (a.verificationId && a.verificationCode || a.temporaryProof && a.phoneNumber)) {\n      var b = {};\n      w(["verificationId", "verificationCode", "temporaryProof", "phoneNumber"], function (c) {\n        a[c] && (b[c] = a[c]);\n      });\n      return new ch(b);\n    }\n\n    return null;\n  }\n\n  function dh(a) {\n    return a.a.Ja && a.a.da ? {\n      temporaryProof: a.a.Ja,\n      phoneNumber: a.a.da\n    } : {\n      sessionInfo: a.a.bb,\n      code: a.a.ab\n    };\n  }\n\n  function hh(a) {\n    try {\n      this.a = a || firebase.auth();\n    } catch (b) {\n      throw new t("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");\n    }\n\n    L(this, {\n      providerId: "phone",\n      isOAuthProvider: !1\n    });\n  }\n\n  hh.prototype.cb = function (a, b) {\n    var c = this.a.b;\n    return D(b.verify()).then(function (d) {\n      if ("string" !== typeof d) throw new t("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");\n\n      switch (b.type) {\n        case "recaptcha":\n          var e = n(a) ? a.session : null,\n              f = n(a) ? a.phoneNumber : a,\n              g;\n          e && e.type == wg ? g = e.Fa().then(function (h) {\n            return ih(c, {\n              idToken: h,\n              phoneEnrollmentInfo: {\n                phoneNumber: f,\n                recaptchaToken: d\n              }\n            });\n          }) : e && e.type == xg ? g = e.Fa().then(function (h) {\n            return jh(c, {\n              mfaPendingCredential: h,\n              mfaEnrollmentId: a.multiFactorHint && a.multiFactorHint.uid || a.multiFactorUid,\n              phoneSignInInfo: {\n                recaptchaToken: d\n              }\n            });\n          }) : g = kh(c, {\n            phoneNumber: f,\n            recaptchaToken: d\n          });\n          return g.then(function (h) {\n            "function" === typeof b.reset && b.reset();\n            return h;\n          }, function (h) {\n            "function" === typeof b.reset && b.reset();\n            throw h;\n          });\n\n        default:\n          throw new t("argument-error", \'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.\');\n      }\n    });\n  };\n\n  function lh(a, b) {\n    if (!a) throw new t("missing-verification-id");\n    if (!b) throw new t("missing-verification-code");\n    return new ch({\n      bb: a,\n      ab: b\n    });\n  }\n\n  L(hh, {\n    PROVIDER_ID: "phone"\n  });\n  L(hh, {\n    PHONE_SIGN_IN_METHOD: "phone"\n  });\n\n  function mh(a) {\n    if (a.temporaryProof && a.phoneNumber) return new ch({\n      Ja: a.temporaryProof,\n      da: a.phoneNumber\n    });\n    var b = a && a.providerId;\n    if (!b || "password" === b) return null;\n    var c = a && a.oauthAccessToken,\n        d = a && a.oauthTokenSecret,\n        e = a && a.nonce,\n        f = a && a.oauthIdToken,\n        g = a && a.pendingToken;\n\n    try {\n      switch (b) {\n        case "google.com":\n          return Rg(f, c);\n\n        case "facebook.com":\n          return Ng(c);\n\n        case "github.com":\n          return Pg(c);\n\n        case "twitter.com":\n          return Tg(c, d);\n\n        default:\n          return c || d || f || g ? g ? 0 == b.indexOf("saml.") ? new Bg(b, g) : new Hg(b, {\n            pendingToken: g,\n            idToken: a.oauthIdToken,\n            accessToken: a.oauthAccessToken\n          }, b) : new M(b).credential({\n            idToken: f,\n            accessToken: c,\n            rawNonce: e\n          }) : null;\n      }\n    } catch (h) {\n      return null;\n    }\n  }\n\n  function nh(a) {\n    if (!a.isOAuthProvider) throw new t("invalid-oauth-provider");\n  }\n\n  ;\n\n  function oh(a, b, c, d, e, f, g) {\n    this.c = a;\n    this.b = b || null;\n    this.g = c || null;\n    this.f = d || null;\n    this.i = f || null;\n    this.h = g || null;\n    this.a = e || null;\n\n    if (this.g || this.a) {\n      if (this.g && this.a) throw new t("invalid-auth-event");\n      if (this.g && !this.f) throw new t("invalid-auth-event");\n    } else throw new t("invalid-auth-event");\n  }\n\n  oh.prototype.getUid = function () {\n    var a = [];\n    a.push(this.c);\n    this.b && a.push(this.b);\n    this.f && a.push(this.f);\n    this.h && a.push(this.h);\n    return a.join("-");\n  };\n\n  oh.prototype.S = function () {\n    return this.h;\n  };\n\n  oh.prototype.v = function () {\n    return {\n      type: this.c,\n      eventId: this.b,\n      urlResponse: this.g,\n      sessionId: this.f,\n      postBody: this.i,\n      tenantId: this.h,\n      error: this.a && this.a.v()\n    };\n  };\n\n  function ph(a) {\n    a = a || {};\n    return a.type ? new oh(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && ya(a.error), a.postBody, a.tenantId) : null;\n  }\n\n  ;\n  /*\n  Copyright 2018 Google Inc.\n  Licensed under the Apache License, Version 2.0 (the "License");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an "AS IS" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  */\n\n  function qh() {\n    this.b = null;\n    this.a = [];\n  }\n\n  var rh = null;\n\n  function sh(a) {\n    var b = rh;\n    b.a.push(a);\n    b.b || (b.b = function (c) {\n      for (var d = 0; d < b.a.length; d++) b.a[d](c);\n    }, a = J("universalLinks.subscribe", l), "function" === typeof a && a(null, b.b));\n  }\n\n  ;\n\n  function th(a) {\n    var b = "unauthorized-domain",\n        c = void 0,\n        d = Zd(a);\n    a = d.b;\n    d = d.f;\n    "chrome-extension" == d ? c = Nb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = Nb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";\n    t.call(this, b, c);\n  }\n\n  r(th, t);\n\n  function uh(a, b, c) {\n    t.call(this, a, c);\n    a = b || {};\n    a.Gb && K(this, "email", a.Gb);\n    a.da && K(this, "phoneNumber", a.da);\n    a.credential && K(this, "credential", a.credential);\n    a.Wb && K(this, "tenantId", a.Wb);\n  }\n\n  r(uh, t);\n\n  uh.prototype.v = function () {\n    var a = {\n      code: this.code,\n      message: this.message\n    };\n    this.email && (a.email = this.email);\n    this.phoneNumber && (a.phoneNumber = this.phoneNumber);\n    this.tenantId && (a.tenantId = this.tenantId);\n    var b = this.credential && this.credential.v();\n    b && z(a, b);\n    return a;\n  };\n\n  uh.prototype.toJSON = function () {\n    return this.v();\n  };\n\n  function vh(a) {\n    if (a.code) {\n      var b = a.code || "";\n      0 == b.indexOf(va) && (b = b.substring(va.length));\n      var c = {\n        credential: mh(a),\n        Wb: a.tenantId\n      };\n      if (a.email) c.Gb = a.email;else if (a.phoneNumber) c.da = a.phoneNumber;else if (!c.credential) return new t(b, a.message || void 0);\n      return new uh(b, c, a.message);\n    }\n\n    return null;\n  }\n\n  ;\n\n  function wh() {}\n\n  wh.prototype.c = null;\n\n  function xh(a) {\n    return a.c || (a.c = a.b());\n  }\n\n  ;\n  var yh;\n\n  function zh() {}\n\n  r(zh, wh);\n\n  zh.prototype.a = function () {\n    var a = Ah(this);\n    return a ? new ActiveXObject(a) : new XMLHttpRequest();\n  };\n\n  zh.prototype.b = function () {\n    var a = {};\n    Ah(this) && (a[0] = !0, a[1] = !0);\n    return a;\n  };\n\n  function Ah(a) {\n    if (!a.f && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {\n      for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {\n        var d = b[c];\n\n        try {\n          return new ActiveXObject(d), a.f = d;\n        } catch (e) {}\n      }\n\n      throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");\n    }\n\n    return a.f;\n  }\n\n  yh = new zh();\n\n  function Bh() {}\n\n  r(Bh, wh);\n\n  Bh.prototype.a = function () {\n    var a = new XMLHttpRequest();\n    if ("withCredentials" in a) return a;\n    if ("undefined" != typeof XDomainRequest) return new Ch();\n    throw Error("Unsupported browser");\n  };\n\n  Bh.prototype.b = function () {\n    return {};\n  };\n\n  function Ch() {\n    this.a = new XDomainRequest();\n    this.readyState = 0;\n    this.onreadystatechange = null;\n    this.responseType = this.responseText = this.response = "";\n    this.status = -1;\n    this.statusText = "";\n    this.a.onload = q(this.oc, this);\n    this.a.onerror = q(this.Pb, this);\n    this.a.onprogress = q(this.pc, this);\n    this.a.ontimeout = q(this.tc, this);\n  }\n\n  k = Ch.prototype;\n\n  k.open = function (a, b, c) {\n    if (null != c && !c) throw Error("Only async requests are supported.");\n    this.a.open(a, b);\n  };\n\n  k.send = function (a) {\n    if (a) {\n      if ("string" == typeof a) this.a.send(a);else throw Error("Only string data is supported");\n    } else this.a.send();\n  };\n\n  k.abort = function () {\n    this.a.abort();\n  };\n\n  k.setRequestHeader = function () {};\n\n  k.getResponseHeader = function (a) {\n    return "content-type" == a.toLowerCase() ? this.a.contentType : "";\n  };\n\n  k.oc = function () {\n    this.status = 200;\n    this.response = this.responseText = this.a.responseText;\n    Dh(this, 4);\n  };\n\n  k.Pb = function () {\n    this.status = 500;\n    this.response = this.responseText = "";\n    Dh(this, 4);\n  };\n\n  k.tc = function () {\n    this.Pb();\n  };\n\n  k.pc = function () {\n    this.status = 200;\n    Dh(this, 1);\n  };\n\n  function Dh(a, b) {\n    a.readyState = b;\n    if (a.onreadystatechange) a.onreadystatechange();\n  }\n\n  k.getAllResponseHeaders = function () {\n    return "content-type: " + this.a.contentType;\n  };\n\n  function Eh(a, b, c) {\n    this.reset(a, b, c, void 0, void 0);\n  }\n\n  Eh.prototype.a = null;\n  var Fh = 0;\n\n  Eh.prototype.reset = function (a, b, c, d, e) {\n    "number" == typeof e || Fh++;\n    d || ua();\n    delete this.a;\n  };\n\n  function Gh(a) {\n    this.f = a;\n    this.b = this.c = this.a = null;\n  }\n\n  function Hh(a, b) {\n    this.name = a;\n    this.value = b;\n  }\n\n  Hh.prototype.toString = function () {\n    return this.name;\n  };\n\n  var Ih = new Hh("SEVERE", 1E3),\n      Jh = new Hh("WARNING", 900),\n      Kh = new Hh("CONFIG", 700),\n      Lh = new Hh("FINE", 500);\n\n  function Mh(a) {\n    if (a.c) return a.c;\n    if (a.a) return Mh(a.a);\n    Ea("Root logger has no level set.");\n    return null;\n  }\n\n  Gh.prototype.log = function (a, b, c) {\n    if (a.value >= Mh(this).value) for (na(b) && (b = b()), a = new Eh(a, String(b), this.f), c && (a.a = c), c = this; c;) c = c.a;\n  };\n\n  var Nh = {},\n      Oh = null;\n\n  function Ph(a) {\n    Oh || (Oh = new Gh(""), Nh[""] = Oh, Oh.c = Kh);\n    var b;\n\n    if (!(b = Nh[a])) {\n      b = new Gh(a);\n      var c = a.lastIndexOf("."),\n          d = a.substr(c + 1);\n      c = Ph(a.substr(0, c));\n      c.b || (c.b = {});\n      c.b[d] = b;\n      b.a = c;\n      Nh[a] = b;\n    }\n\n    return b;\n  }\n\n  ;\n\n  function Qh(a, b) {\n    a && a.log(Lh, b, void 0);\n  }\n\n  ;\n\n  function Rh(a) {\n    this.f = a;\n  }\n\n  r(Rh, wh);\n\n  Rh.prototype.a = function () {\n    return new Sh(this.f);\n  };\n\n  Rh.prototype.b = function (a) {\n    return function () {\n      return a;\n    };\n  }({});\n\n  function Sh(a) {\n    G.call(this);\n    this.s = a;\n    this.readyState = Th;\n    this.status = 0;\n    this.responseType = this.responseText = this.response = this.statusText = "";\n    this.onreadystatechange = null;\n    this.i = new Headers();\n    this.b = null;\n    this.m = "GET";\n    this.g = "";\n    this.a = !1;\n    this.h = Ph("goog.net.FetchXmlHttp");\n    this.l = this.c = this.f = null;\n  }\n\n  r(Sh, G);\n  var Th = 0;\n  k = Sh.prototype;\n\n  k.open = function (a, b) {\n    if (this.readyState != Th) throw this.abort(), Error("Error reopening a connection");\n    this.m = a;\n    this.g = b;\n    this.readyState = 1;\n    Uh(this);\n  };\n\n  k.send = function (a) {\n    if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");\n    this.a = !0;\n    var b = {\n      headers: this.i,\n      method: this.m,\n      credentials: void 0,\n      cache: void 0\n    };\n    a && (b.body = a);\n    this.s.fetch(new Request(this.g, b)).then(this.sc.bind(this), this.Sa.bind(this));\n  };\n\n  k.abort = function () {\n    this.response = this.responseText = "";\n    this.i = new Headers();\n    this.status = 0;\n    this.c && this.c.cancel("Request was aborted.");\n    1 <= this.readyState && this.a && 4 != this.readyState && (this.a = !1, Vh(this, !1));\n    this.readyState = Th;\n  };\n\n  k.sc = function (a) {\n    this.a && (this.f = a, this.b || (this.b = a.headers, this.readyState = 2, Uh(this)), this.a && (this.readyState = 3, Uh(this), this.a && ("arraybuffer" === this.responseType ? a.arrayBuffer().then(this.qc.bind(this), this.Sa.bind(this)) : "undefined" !== typeof l.ReadableStream && "body" in a ? (this.response = this.responseText = "", this.c = a.body.getReader(), this.l = new TextDecoder(), Wh(this)) : a.text().then(this.rc.bind(this), this.Sa.bind(this)))));\n  };\n\n  function Wh(a) {\n    a.c.read().then(a.nc.bind(a)).catch(a.Sa.bind(a));\n  }\n\n  k.nc = function (a) {\n    if (this.a) {\n      var b = this.l.decode(a.value ? a.value : new Uint8Array(0), {\n        stream: !a.done\n      });\n      b && (this.response = this.responseText += b);\n      a.done ? Vh(this, !0) : Uh(this);\n      3 == this.readyState && Wh(this);\n    }\n  };\n\n  k.rc = function (a) {\n    this.a && (this.response = this.responseText = a, Vh(this, !0));\n  };\n\n  k.qc = function (a) {\n    this.a && (this.response = a, Vh(this, !0));\n  };\n\n  k.Sa = function (a) {\n    var b = this.h;\n    b && b.log(Jh, "Failed to fetch url " + this.g, a instanceof Error ? a : Error(a));\n    this.a && Vh(this, !0);\n  };\n\n  function Vh(a, b) {\n    b && a.f && (a.status = a.f.status, a.statusText = a.f.statusText);\n    a.readyState = 4;\n    a.f = null;\n    a.c = null;\n    a.l = null;\n    Uh(a);\n  }\n\n  k.setRequestHeader = function (a, b) {\n    this.i.append(a, b);\n  };\n\n  k.getResponseHeader = function (a) {\n    return this.b ? this.b.get(a.toLowerCase()) || "" : ((a = this.h) && a.log(Jh, "Attempting to get response header but no headers have been received for url: " + this.g, void 0), "");\n  };\n\n  k.getAllResponseHeaders = function () {\n    if (!this.b) {\n      var a = this.h;\n      a && a.log(Jh, "Attempting to get all response headers but no headers have been received for url: " + this.g, void 0);\n      return "";\n    }\n\n    a = [];\n\n    for (var b = this.b.entries(), c = b.next(); !c.done;) c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();\n\n    return a.join("\\r\\n");\n  };\n\n  function Uh(a) {\n    a.onreadystatechange && a.onreadystatechange.call(a);\n  }\n\n  ;\n\n  function Xh(a) {\n    G.call(this);\n    this.headers = new Fd();\n    this.D = a || null;\n    this.c = !1;\n    this.B = this.a = null;\n    this.h = this.P = this.l = "";\n    this.f = this.O = this.i = this.N = !1;\n    this.g = 0;\n    this.s = null;\n    this.m = Yh;\n    this.w = this.R = !1;\n  }\n\n  r(Xh, G);\n  var Yh = "";\n  Xh.prototype.b = Ph("goog.net.XhrIo");\n  var Zh = /^https?$/i,\n      $h = ["POST", "PUT"];\n\n  function ai(a, b, c, d, e) {\n    if (a.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + a.l + "; newUri=" + b);\n    c = c ? c.toUpperCase() : "GET";\n    a.l = b;\n    a.h = "";\n    a.P = c;\n    a.N = !1;\n    a.c = !0;\n    a.a = a.D ? a.D.a() : yh.a();\n    a.B = a.D ? xh(a.D) : xh(yh);\n    a.a.onreadystatechange = q(a.Sb, a);\n\n    try {\n      Qh(a.b, bi(a, "Opening Xhr")), a.O = !0, a.a.open(c, String(b), !0), a.O = !1;\n    } catch (g) {\n      Qh(a.b, bi(a, "Error opening Xhr: " + g.message));\n      ci(a, g);\n      return;\n    }\n\n    b = d || "";\n    var f = new Fd(a.headers);\n    e && Ed(e, function (g, h) {\n      f.set(h, g);\n    });\n    e = Ra(f.X());\n    d = l.FormData && b instanceof l.FormData;\n    !Ta($h, c) || e || d || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");\n    f.forEach(function (g, h) {\n      this.a.setRequestHeader(h, g);\n    }, a);\n    a.m && (a.a.responseType = a.m);\n    "withCredentials" in a.a && a.a.withCredentials !== a.R && (a.a.withCredentials = a.R);\n\n    try {\n      di(a), 0 < a.g && (a.w = ei(a.a), Qh(a.b, bi(a, "Will abort after " + a.g + "ms if incomplete, xhr2 " + a.w)), a.w ? (a.a.timeout = a.g, a.a.ontimeout = q(a.Ka, a)) : a.s = Ad(a.Ka, a.g, a)), Qh(a.b, bi(a, "Sending request")), a.i = !0, a.a.send(b), a.i = !1;\n    } catch (g) {\n      Qh(a.b, bi(a, "Send error: " + g.message)), ci(a, g);\n    }\n  }\n\n  function ei(a) {\n    return Tb && cc(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout;\n  }\n\n  function Sa(a) {\n    return "content-type" == a.toLowerCase();\n  }\n\n  k = Xh.prototype;\n\n  k.Ka = function () {\n    "undefined" != typeof ha && this.a && (this.h = "Timed out after " + this.g + "ms, aborting", Qh(this.b, bi(this, this.h)), this.dispatchEvent("timeout"), this.abort(8));\n  };\n\n  function ci(a, b) {\n    a.c = !1;\n    a.a && (a.f = !0, a.a.abort(), a.f = !1);\n    a.h = b;\n    fi(a);\n    gi(a);\n  }\n\n  function fi(a) {\n    a.N || (a.N = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));\n  }\n\n  k.abort = function () {\n    this.a && this.c && (Qh(this.b, bi(this, "Aborting")), this.c = !1, this.f = !0, this.a.abort(), this.f = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), gi(this));\n  };\n\n  k.Ba = function () {\n    this.a && (this.c && (this.c = !1, this.f = !0, this.a.abort(), this.f = !1), gi(this, !0));\n    Xh.Za.Ba.call(this);\n  };\n\n  k.Sb = function () {\n    this.wa || (this.O || this.i || this.f ? hi(this) : this.Hc());\n  };\n\n  k.Hc = function () {\n    hi(this);\n  };\n\n  function hi(a) {\n    if (a.c && "undefined" != typeof ha) if (a.B[1] && 4 == ii(a) && 2 == ji(a)) Qh(a.b, bi(a, "Local request error detected and ignored"));else if (a.i && 4 == ii(a)) Ad(a.Sb, 0, a);else if (a.dispatchEvent("readystatechange"), 4 == ii(a)) {\n      Qh(a.b, bi(a, "Request complete"));\n      a.c = !1;\n\n      try {\n        var b = ji(a);\n\n        a: switch (b) {\n          case 200:\n          case 201:\n          case 202:\n          case 204:\n          case 206:\n          case 304:\n          case 1223:\n            var c = !0;\n            break a;\n\n          default:\n            c = !1;\n        }\n\n        var d;\n\n        if (!(d = c)) {\n          var e;\n\n          if (e = 0 === b) {\n            var f = String(a.l).match(Id)[1] || null;\n\n            if (!f && l.self && l.self.location) {\n              var g = l.self.location.protocol;\n              f = g.substr(0, g.length - 1);\n            }\n\n            e = !Zh.test(f ? f.toLowerCase() : "");\n          }\n\n          d = e;\n        }\n\n        if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");else {\n          try {\n            var h = 2 < ii(a) ? a.a.statusText : "";\n          } catch (m) {\n            Qh(a.b, "Can not get status: " + m.message), h = "";\n          }\n\n          a.h = h + " [" + ji(a) + "]";\n          fi(a);\n        }\n      } finally {\n        gi(a);\n      }\n    }\n  }\n\n  function gi(a, b) {\n    if (a.a) {\n      di(a);\n      var c = a.a,\n          d = a.B[0] ? ka : null;\n      a.a = null;\n      a.B = null;\n      b || a.dispatchEvent("ready");\n\n      try {\n        c.onreadystatechange = d;\n      } catch (e) {\n        (a = a.b) && a.log(Ih, "Problem encountered resetting onreadystatechange: " + e.message, void 0);\n      }\n    }\n  }\n\n  function di(a) {\n    a.a && a.w && (a.a.ontimeout = null);\n    a.s && (l.clearTimeout(a.s), a.s = null);\n  }\n\n  function ii(a) {\n    return a.a ? a.a.readyState : 0;\n  }\n\n  function ji(a) {\n    try {\n      return 2 < ii(a) ? a.a.status : -1;\n    } catch (b) {\n      return -1;\n    }\n  }\n\n  function ki(a) {\n    try {\n      return a.a ? a.a.responseText : "";\n    } catch (b) {\n      return Qh(a.b, "Can not get responseText: " + b.message), "";\n    }\n  }\n\n  k.getResponse = function () {\n    try {\n      if (!this.a) return null;\n      if ("response" in this.a) return this.a.response;\n\n      switch (this.m) {\n        case Yh:\n        case "text":\n          return this.a.responseText;\n\n        case "arraybuffer":\n          if ("mozResponseArrayBuffer" in this.a) return this.a.mozResponseArrayBuffer;\n      }\n\n      var a = this.b;\n      a && a.log(Ih, "Response type " + this.m + " is not supported on this browser", void 0);\n      return null;\n    } catch (b) {\n      return Qh(this.b, "Can not get response: " + b.message), null;\n    }\n  };\n\n  function bi(a, b) {\n    return b + " [" + a.P + " " + a.l + " " + ji(a) + "]";\n  }\n\n  ;\n  /*\n  Portions of this code are from MochiKit, received by\n  The Closure Authors under the MIT license. All other code is Copyright\n  2005-2009 The Closure Authors. All Rights Reserved.\n  */\n\n  function li(a) {\n    var b = mi;\n    this.g = [];\n    this.w = b;\n    this.s = a || null;\n    this.f = this.a = !1;\n    this.c = void 0;\n    this.u = this.B = this.i = !1;\n    this.h = 0;\n    this.b = null;\n    this.l = 0;\n  }\n\n  li.prototype.cancel = function (a) {\n    if (this.a) this.c instanceof li && this.c.cancel();else {\n      if (this.b) {\n        var b = this.b;\n        delete this.b;\n        a ? b.cancel(a) : (b.l--, 0 >= b.l && b.cancel());\n      }\n\n      this.w ? this.w.call(this.s, this) : this.u = !0;\n      this.a || (a = new ni(this), oi(this), pi(this, !1, a));\n    }\n  };\n\n  li.prototype.m = function (a, b) {\n    this.i = !1;\n    pi(this, a, b);\n  };\n\n  function pi(a, b, c) {\n    a.a = !0;\n    a.c = c;\n    a.f = !b;\n    qi(a);\n  }\n\n  function oi(a) {\n    if (a.a) {\n      if (!a.u) throw new ri(a);\n      a.u = !1;\n    }\n  }\n\n  function si(a, b) {\n    ti(a, null, b, void 0);\n  }\n\n  function ti(a, b, c, d) {\n    a.g.push([b, c, d]);\n    a.a && qi(a);\n  }\n\n  li.prototype.then = function (a, b, c) {\n    var d,\n        e,\n        f = new B(function (g, h) {\n      d = g;\n      e = h;\n    });\n    ti(this, d, function (g) {\n      g instanceof ni ? f.cancel() : e(g);\n    });\n    return f.then(a, b, c);\n  };\n\n  li.prototype.$goog_Thenable = !0;\n\n  function ui(a) {\n    return Qa(a.g, function (b) {\n      return na(b[1]);\n    });\n  }\n\n  function qi(a) {\n    if (a.h && a.a && ui(a)) {\n      var b = a.h,\n          c = vi[b];\n      c && (l.clearTimeout(c.a), delete vi[b]);\n      a.h = 0;\n    }\n\n    a.b && (a.b.l--, delete a.b);\n    b = a.c;\n\n    for (var d = c = !1; a.g.length && !a.i;) {\n      var e = a.g.shift(),\n          f = e[0],\n          g = e[1];\n      e = e[2];\n      if (f = a.f ? g : f) try {\n        var h = f.call(e || a.s, b);\n        void 0 !== h && (a.f = a.f && (h == b || h instanceof Error), a.c = b = h);\n        if (Ca(b) || "function" === typeof l.Promise && b instanceof l.Promise) d = !0, a.i = !0;\n      } catch (m) {\n        b = m, a.f = !0, ui(a) || (c = !0);\n      }\n    }\n\n    a.c = b;\n    d && (h = q(a.m, a, !0), d = q(a.m, a, !1), b instanceof li ? (ti(b, h, d), b.B = !0) : b.then(h, d));\n    c && (b = new wi(b), vi[b.a] = b, a.h = b.a);\n  }\n\n  function ri() {\n    u.call(this);\n  }\n\n  r(ri, u);\n  ri.prototype.message = "Deferred has already fired";\n  ri.prototype.name = "AlreadyCalledError";\n\n  function ni() {\n    u.call(this);\n  }\n\n  r(ni, u);\n  ni.prototype.message = "Deferred was canceled";\n  ni.prototype.name = "CanceledError";\n\n  function wi(a) {\n    this.a = l.setTimeout(q(this.c, this), 0);\n    this.b = a;\n  }\n\n  wi.prototype.c = function () {\n    delete vi[this.a];\n    throw this.b;\n  };\n\n  var vi = {};\n\n  function xi(a) {\n    var b = {},\n        c = b.document || document,\n        d = wb(a).toString(),\n        e = jc(document, "SCRIPT"),\n        f = {\n      Tb: e,\n      Ka: void 0\n    },\n        g = new li(f),\n        h = null,\n        m = null != b.timeout ? b.timeout : 5E3;\n    0 < m && (h = window.setTimeout(function () {\n      yi(e, !0);\n      var p = new zi(Ai, "Timeout reached for loading script " + d);\n      oi(g);\n      pi(g, !1, p);\n    }, m), f.Ka = h);\n\n    e.onload = e.onreadystatechange = function () {\n      e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (yi(e, b.ud || !1, h), oi(g), pi(g, !0, null));\n    };\n\n    e.onerror = function () {\n      yi(e, !0, h);\n      var p = new zi(Bi, "Error while loading script " + d);\n      oi(g);\n      pi(g, !1, p);\n    };\n\n    f = b.attributes || {};\n    z(f, {\n      type: "text/javascript",\n      charset: "UTF-8"\n    });\n    gc(e, f);\n    Mb(e, a);\n    Ci(c).appendChild(e);\n    return g;\n  }\n\n  function Ci(a) {\n    var b;\n    return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;\n  }\n\n  function mi() {\n    if (this && this.Tb) {\n      var a = this.Tb;\n      a && "SCRIPT" == a.tagName && yi(a, !0, this.Ka);\n    }\n  }\n\n  function yi(a, b, c) {\n    null != c && l.clearTimeout(c);\n    a.onload = ka;\n    a.onerror = ka;\n    a.onreadystatechange = ka;\n    b && window.setTimeout(function () {\n      a && a.parentNode && a.parentNode.removeChild(a);\n    }, 0);\n  }\n\n  var Bi = 0,\n      Ai = 1;\n\n  function zi(a, b) {\n    var c = "Jsloader error (code #" + a + ")";\n    b && (c += ": " + b);\n    u.call(this, c);\n    this.code = a;\n  }\n\n  r(zi, u);\n\n  function Di(a) {\n    this.f = a;\n  }\n\n  r(Di, wh);\n\n  Di.prototype.a = function () {\n    return new this.f();\n  };\n\n  Di.prototype.b = function () {\n    return {};\n  };\n\n  function Ei(a, b, c) {\n    this.c = a;\n    a = b || {};\n    this.u = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";\n    this.m = a.secureTokenTimeout || Fi;\n    this.g = lb(a.secureTokenHeaders || Gi);\n    this.h = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";\n    this.l = a.identityPlatformEndpoint || "https://identitytoolkit.googleapis.com/v2/";\n    this.i = a.firebaseTimeout || Hi;\n    this.a = lb(a.firebaseHeaders || Ii);\n    c && (this.a["X-Client-Version"] = c, this.g["X-Client-Version"] = c);\n    c = "Node" == He();\n    c = l.XMLHttpRequest || c && firebase.INTERNAL.node && firebase.INTERNAL.node.XMLHttpRequest;\n    if (!c && !Ge()) throw new t("internal-error", "The XMLHttpRequest compatibility library was not found.");\n    this.f = void 0;\n    Ge() ? this.f = new Rh(self) : Ie() ? this.f = new Di(c) : this.f = new Bh();\n    this.b = null;\n  }\n\n  var Ji,\n      Ag = "idToken",\n      Fi = new We(3E4, 6E4),\n      Gi = {\n    "Content-Type": "application/x-www-form-urlencoded"\n  },\n      Hi = new We(3E4, 6E4),\n      Ii = {\n    "Content-Type": "application/json"\n  };\n\n  function Ki(a, b) {\n    b ? a.a["X-Firebase-Locale"] = b : delete a.a["X-Firebase-Locale"];\n  }\n\n  function Li(a, b) {\n    b ? (a.a["X-Client-Version"] = b, a.g["X-Client-Version"] = b) : (delete a.a["X-Client-Version"], delete a.g["X-Client-Version"]);\n  }\n\n  Ei.prototype.S = function () {\n    return this.b;\n  };\n\n  function Mi(a, b, c, d, e, f, g) {\n    re() || Ge() ? a = q(a.w, a) : (Ji || (Ji = new B(function (h, m) {\n      Ni(h, m);\n    })), a = q(a.s, a));\n    a(b, c, d, e, f, g);\n  }\n\n  Ei.prototype.w = function (a, b, c, d, e, f) {\n    if (Ge() && ("undefined" === typeof l.fetch || "undefined" === typeof l.Headers || "undefined" === typeof l.Request)) throw new t("operation-not-supported-in-this-environment", "fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");\n    var g = new Xh(this.f);\n\n    if (f) {\n      g.g = Math.max(0, f);\n      var h = setTimeout(function () {\n        g.dispatchEvent("timeout");\n      }, f);\n    }\n\n    md(g, "complete", function () {\n      h && clearTimeout(h);\n      var m = null;\n\n      try {\n        m = JSON.parse(ki(this)) || null;\n      } catch (p) {\n        m = null;\n      }\n\n      b && b(m);\n    });\n    sd(g, "ready", function () {\n      h && clearTimeout(h);\n      Tc(this);\n    });\n    sd(g, "timeout", function () {\n      h && clearTimeout(h);\n      Tc(this);\n      b && b(null);\n    });\n    ai(g, a, c, d, e);\n  };\n\n  var Oi = new ob(pb, "https://apis.google.com/js/client.js?onload=%{onload}"),\n      Pi = "__fcb" + Math.floor(1E6 * Math.random()).toString();\n\n  function Ni(a, b) {\n    if (((window.gapi || {}).client || {}).request) a();else {\n      l[Pi] = function () {\n        ((window.gapi || {}).client || {}).request ? a() : b(Error("CORS_UNSUPPORTED"));\n      };\n\n      var c = xb(Oi, {\n        onload: Pi\n      });\n      si(xi(c), function () {\n        b(Error("CORS_UNSUPPORTED"));\n      });\n    }\n  }\n\n  Ei.prototype.s = function (a, b, c, d, e) {\n    var f = this;\n    Ji.then(function () {\n      window.gapi.client.setApiKey(f.c);\n      var g = window.gapi.auth.getToken();\n      window.gapi.auth.setToken(null);\n      window.gapi.client.request({\n        path: a,\n        method: c,\n        body: d,\n        headers: e,\n        authType: "none",\n        callback: function (h) {\n          window.gapi.auth.setToken(g);\n          b && b(h);\n        }\n      });\n    }).o(function (g) {\n      b && b({\n        error: {\n          message: g && g.message || "CORS_UNSUPPORTED"\n        }\n      });\n    });\n  };\n\n  function Qi(a, b) {\n    return new B(function (c, d) {\n      "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? Mi(a, a.u + "?key=" + encodeURIComponent(a.c), function (e) {\n        e ? e.error ? d(Ri(e)) : e.access_token && e.refresh_token ? c(e) : d(new t("internal-error")) : d(new t("network-request-failed"));\n      }, "POST", ce(b).toString(), a.g, a.m.get()) : d(new t("internal-error"));\n    });\n  }\n\n  function Si(a, b, c, d, e, f, g) {\n    var h = Zd(b + c);\n    H(h, "key", a.c);\n    g && H(h, "cb", ua().toString());\n    var m = "GET" == d;\n    if (m) for (var p in e) e.hasOwnProperty(p) && H(h, p, e[p]);\n    return new B(function (v, C) {\n      Mi(a, h.toString(), function (A) {\n        A ? A.error ? C(Ri(A, f || {})) : v(A) : C(new t("network-request-failed"));\n      }, d, m ? void 0 : he(Se(e)), a.a, a.i.get());\n    });\n  }\n\n  function Ti(a) {\n    a = a.email;\n    if ("string" !== typeof a || !Ae.test(a)) throw new t("invalid-email");\n  }\n\n  function Ui(a) {\n    "email" in a && Ti(a);\n  }\n\n  function Vi(a, b) {\n    return N(a, Wi, {\n      identifier: b,\n      continueUri: Pe() ? oe() : "http://localhost"\n    }).then(function (c) {\n      return c.signinMethods || [];\n    });\n  }\n\n  function Xi(a) {\n    return N(a, Yi, {}).then(function (b) {\n      return b.authorizedDomains || [];\n    });\n  }\n\n  function O(a) {\n    if (!a[Ag]) {\n      if (a.mfaPendingCredential) throw new t("multi-factor-auth-required", null, lb(a));\n      throw new t("internal-error");\n    }\n  }\n\n  function Zi(a) {\n    if (a.phoneNumber || a.temporaryProof) {\n      if (!a.phoneNumber || !a.temporaryProof) throw new t("internal-error");\n    } else {\n      if (!a.sessionInfo) throw new t("missing-verification-id");\n      if (!a.code) throw new t("missing-verification-code");\n    }\n  }\n\n  Ei.prototype.vb = function () {\n    return N(this, $i, {});\n  };\n\n  Ei.prototype.xb = function (a, b) {\n    return N(this, aj, {\n      idToken: a,\n      email: b\n    });\n  };\n\n  Ei.prototype.yb = function (a, b) {\n    return N(this, Zg, {\n      idToken: a,\n      password: b\n    });\n  };\n\n  var bj = {\n    displayName: "DISPLAY_NAME",\n    photoUrl: "PHOTO_URL"\n  };\n  k = Ei.prototype;\n\n  k.zb = function (a, b) {\n    var c = {\n      idToken: a\n    },\n        d = [];\n    jb(bj, function (e, f) {\n      var g = b[f];\n      null === g ? d.push(e) : f in b && (c[f] = g);\n    });\n    d.length && (c.deleteAttribute = d);\n    return N(this, aj, c);\n  };\n\n  k.rb = function (a, b) {\n    a = {\n      requestType: "PASSWORD_RESET",\n      email: a\n    };\n    z(a, b);\n    return N(this, cj, a);\n  };\n\n  k.sb = function (a, b) {\n    a = {\n      requestType: "EMAIL_SIGNIN",\n      email: a\n    };\n    z(a, b);\n    return N(this, dj, a);\n  };\n\n  k.qb = function (a, b) {\n    a = {\n      requestType: "VERIFY_EMAIL",\n      idToken: a\n    };\n    z(a, b);\n    return N(this, ej, a);\n  };\n\n  k.Ab = function (a, b, c) {\n    a = {\n      requestType: "VERIFY_AND_CHANGE_EMAIL",\n      idToken: a,\n      newEmail: b\n    };\n    z(a, c);\n    return N(this, fj, a);\n  };\n\n  function kh(a, b) {\n    return N(a, gj, b);\n  }\n\n  k.cb = function (a) {\n    return N(this, hj, a);\n  };\n\n  function ih(a, b) {\n    return N(a, ij, b).then(function (c) {\n      return c.phoneSessionInfo.sessionInfo;\n    });\n  }\n\n  function jj(a) {\n    if (!a.phoneVerificationInfo) throw new t("internal-error");\n    if (!a.phoneVerificationInfo.sessionInfo) throw new t("missing-verification-id");\n    if (!a.phoneVerificationInfo.code) throw new t("missing-verification-code");\n  }\n\n  function jh(a, b) {\n    return N(a, kj, b).then(function (c) {\n      return c.phoneResponseInfo.sessionInfo;\n    });\n  }\n\n  function lj(a, b, c) {\n    return N(a, mj, {\n      idToken: b,\n      deleteProvider: c\n    });\n  }\n\n  function nj(a) {\n    if (!a.requestUri || !a.sessionId && !a.postBody && !a.pendingToken) throw new t("internal-error");\n  }\n\n  function oj(a, b) {\n    b.oauthIdToken && b.providerId && 0 == b.providerId.indexOf("oidc.") && !b.pendingToken && (a.sessionId ? b.nonce = a.sessionId : a.postBody && (a = new Qd(a.postBody), ge(a, "nonce") && (b.nonce = a.get("nonce"))));\n    return b;\n  }\n\n  function pj(a) {\n    var b = null;\n    a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = vh(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = vh(a)) : "EMAIL_EXISTS" == a.errorMessage ? (a.code = "email-already-in-use", b = vh(a)) : a.errorMessage && (b = qj(a.errorMessage));\n    if (b) throw b;\n    O(a);\n  }\n\n  function Cg(a, b) {\n    b.returnIdpCredential = !0;\n    return N(a, rj, b);\n  }\n\n  function Eg(a, b) {\n    b.returnIdpCredential = !0;\n    return N(a, sj, b);\n  }\n\n  function Fg(a, b) {\n    b.returnIdpCredential = !0;\n    b.autoCreate = !1;\n    return N(a, tj, b);\n  }\n\n  function uj(a) {\n    if (!a.oobCode) throw new t("invalid-action-code");\n  }\n\n  k.jb = function (a, b) {\n    return N(this, vj, {\n      oobCode: a,\n      newPassword: b\n    });\n  };\n\n  k.Pa = function (a) {\n    return N(this, wj, {\n      oobCode: a\n    });\n  };\n\n  k.fb = function (a) {\n    return N(this, xj, {\n      oobCode: a\n    });\n  };\n\n  var xj = {\n    endpoint: "setAccountInfo",\n    A: uj,\n    Y: "email",\n    C: !0\n  },\n      wj = {\n    endpoint: "resetPassword",\n    A: uj,\n    G: function (a) {\n      var b = a.requestType;\n      if (!b || !a.email && "EMAIL_SIGNIN" != b && "VERIFY_AND_CHANGE_EMAIL" != b) throw new t("internal-error");\n    },\n    C: !0\n  },\n      yj = {\n    endpoint: "signupNewUser",\n    A: function (a) {\n      Ti(a);\n      if (!a.password) throw new t("weak-password");\n    },\n    G: O,\n    U: !0,\n    C: !0\n  },\n      Wi = {\n    endpoint: "createAuthUri",\n    C: !0\n  },\n      zj = {\n    endpoint: "deleteAccount",\n    M: ["idToken"]\n  },\n      mj = {\n    endpoint: "setAccountInfo",\n    M: ["idToken", "deleteProvider"],\n    A: function (a) {\n      if ("array" != la(a.deleteProvider)) throw new t("internal-error");\n    }\n  },\n      Wg = {\n    endpoint: "emailLinkSignin",\n    M: ["email", "oobCode"],\n    A: Ti,\n    G: O,\n    U: !0,\n    C: !0\n  },\n      Yg = {\n    endpoint: "emailLinkSignin",\n    M: ["idToken", "email", "oobCode"],\n    A: Ti,\n    G: O,\n    U: !0\n  },\n      Aj = {\n    endpoint: "accounts/mfaEnrollment:finalize",\n    M: ["idToken", "phoneVerificationInfo"],\n    A: jj,\n    G: O,\n    C: !0,\n    La: !0\n  },\n      Bj = {\n    endpoint: "accounts/mfaSignIn:finalize",\n    M: ["mfaPendingCredential", "phoneVerificationInfo"],\n    A: jj,\n    G: O,\n    C: !0,\n    La: !0\n  },\n      Cj = {\n    endpoint: "getAccountInfo"\n  },\n      dj = {\n    endpoint: "getOobConfirmationCode",\n    M: ["requestType"],\n    A: function (a) {\n      if ("EMAIL_SIGNIN" != a.requestType) throw new t("internal-error");\n      Ti(a);\n    },\n    Y: "email",\n    C: !0\n  },\n      ej = {\n    endpoint: "getOobConfirmationCode",\n    M: ["idToken", "requestType"],\n    A: function (a) {\n      if ("VERIFY_EMAIL" != a.requestType) throw new t("internal-error");\n    },\n    Y: "email",\n    C: !0\n  },\n      fj = {\n    endpoint: "getOobConfirmationCode",\n    M: ["idToken", "newEmail", "requestType"],\n    A: function (a) {\n      if ("VERIFY_AND_CHANGE_EMAIL" != a.requestType) throw new t("internal-error");\n    },\n    Y: "email",\n    C: !0\n  },\n      cj = {\n    endpoint: "getOobConfirmationCode",\n    M: ["requestType"],\n    A: function (a) {\n      if ("PASSWORD_RESET" != a.requestType) throw new t("internal-error");\n      Ti(a);\n    },\n    Y: "email",\n    C: !0\n  },\n      Yi = {\n    hb: !0,\n    endpoint: "getProjectConfig",\n    Rb: "GET"\n  },\n      Dj = {\n    hb: !0,\n    endpoint: "getRecaptchaParam",\n    Rb: "GET",\n    G: function (a) {\n      if (!a.recaptchaSiteKey) throw new t("internal-error");\n    }\n  },\n      vj = {\n    endpoint: "resetPassword",\n    A: uj,\n    Y: "email",\n    C: !0\n  },\n      gj = {\n    endpoint: "sendVerificationCode",\n    M: ["phoneNumber", "recaptchaToken"],\n    Y: "sessionInfo",\n    C: !0\n  },\n      aj = {\n    endpoint: "setAccountInfo",\n    M: ["idToken"],\n    A: Ui,\n    U: !0\n  },\n      Zg = {\n    endpoint: "setAccountInfo",\n    M: ["idToken"],\n    A: function (a) {\n      Ui(a);\n      if (!a.password) throw new t("weak-password");\n    },\n    G: O,\n    U: !0\n  },\n      $i = {\n    endpoint: "signupNewUser",\n    G: O,\n    U: !0,\n    C: !0\n  },\n      ij = {\n    endpoint: "accounts/mfaEnrollment:start",\n    M: ["idToken", "phoneEnrollmentInfo"],\n    A: function (a) {\n      if (!a.phoneEnrollmentInfo) throw new t("internal-error");\n      if (!a.phoneEnrollmentInfo.phoneNumber) throw new t("missing-phone-number");\n      if (!a.phoneEnrollmentInfo.recaptchaToken) throw new t("missing-app-credential");\n    },\n    G: function (a) {\n      if (!a.phoneSessionInfo || !a.phoneSessionInfo.sessionInfo) throw new t("internal-error");\n    },\n    C: !0,\n    La: !0\n  },\n      kj = {\n    endpoint: "accounts/mfaSignIn:start",\n    M: ["mfaPendingCredential", "mfaEnrollmentId", "phoneSignInInfo"],\n    A: function (a) {\n      if (!a.phoneSignInInfo || !a.phoneSignInInfo.recaptchaToken) throw new t("missing-app-credential");\n    },\n    G: function (a) {\n      if (!a.phoneResponseInfo || !a.phoneResponseInfo.sessionInfo) throw new t("internal-error");\n    },\n    C: !0,\n    La: !0\n  },\n      rj = {\n    endpoint: "verifyAssertion",\n    A: nj,\n    Wa: oj,\n    G: pj,\n    U: !0,\n    C: !0\n  },\n      tj = {\n    endpoint: "verifyAssertion",\n    A: nj,\n    Wa: oj,\n    G: function (a) {\n      if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage) throw new t("user-not-found");\n      if (a.errorMessage) throw qj(a.errorMessage);\n      O(a);\n    },\n    U: !0,\n    C: !0\n  },\n      sj = {\n    endpoint: "verifyAssertion",\n    A: function (a) {\n      nj(a);\n      if (!a.idToken) throw new t("internal-error");\n    },\n    Wa: oj,\n    G: pj,\n    U: !0\n  },\n      Ej = {\n    endpoint: "verifyCustomToken",\n    A: function (a) {\n      if (!a.token) throw new t("invalid-custom-token");\n    },\n    G: O,\n    U: !0,\n    C: !0\n  },\n      Xg = {\n    endpoint: "verifyPassword",\n    A: function (a) {\n      Ti(a);\n      if (!a.password) throw new t("wrong-password");\n    },\n    G: O,\n    U: !0,\n    C: !0\n  },\n      hj = {\n    endpoint: "verifyPhoneNumber",\n    A: Zi,\n    G: O,\n    C: !0\n  },\n      eh = {\n    endpoint: "verifyPhoneNumber",\n    A: function (a) {\n      if (!a.idToken) throw new t("internal-error");\n      Zi(a);\n    },\n    G: function (a) {\n      if (a.temporaryProof) throw a.code = "credential-already-in-use", vh(a);\n      O(a);\n    }\n  },\n      fh = {\n    Eb: {\n      USER_NOT_FOUND: "user-not-found"\n    },\n    endpoint: "verifyPhoneNumber",\n    A: Zi,\n    G: O,\n    C: !0\n  },\n      Fj = {\n    endpoint: "accounts/mfaEnrollment:withdraw",\n    M: ["idToken", "mfaEnrollmentId"],\n    G: function (a) {\n      if (!!a[Ag] ^ !!a.refreshToken) throw new t("internal-error");\n    },\n    C: !0,\n    La: !0\n  };\n\n  function N(a, b, c) {\n    if (!jf(c, b.M)) return E(new t("internal-error"));\n    var d = !!b.La,\n        e = b.Rb || "POST",\n        f;\n    return D(c).then(b.A).then(function () {\n      b.U && (c.returnSecureToken = !0);\n      b.C && a.b && "undefined" === typeof c.tenantId && (c.tenantId = a.b);\n      return d ? Si(a, a.l, b.endpoint, e, c, b.Eb, b.hb || !1) : Si(a, a.h, b.endpoint, e, c, b.Eb, b.hb || !1);\n    }).then(function (g) {\n      f = g;\n      return b.Wa ? b.Wa(c, f) : f;\n    }).then(b.G).then(function () {\n      if (!b.Y) return f;\n      if (!(b.Y in f)) throw new t("internal-error");\n      return f[b.Y];\n    });\n  }\n\n  function qj(a) {\n    return Ri({\n      error: {\n        errors: [{\n          message: a\n        }],\n        code: 400,\n        message: a\n      }\n    });\n  }\n\n  function Ri(a, b) {\n    var c = (a.error && a.error.errors && a.error.errors[0] || {}).reason || "";\n    var d = {\n      keyInvalid: "invalid-api-key",\n      ipRefererBlocked: "app-not-authorized"\n    };\n    if (c = d[c] ? new t(d[c]) : null) return c;\n    c = a.error && a.error.message || "";\n    d = {\n      INVALID_CUSTOM_TOKEN: "invalid-custom-token",\n      CREDENTIAL_MISMATCH: "custom-token-mismatch",\n      MISSING_CUSTOM_TOKEN: "internal-error",\n      INVALID_IDENTIFIER: "invalid-email",\n      MISSING_CONTINUE_URI: "internal-error",\n      INVALID_EMAIL: "invalid-email",\n      INVALID_PASSWORD: "wrong-password",\n      USER_DISABLED: "user-disabled",\n      MISSING_PASSWORD: "internal-error",\n      EMAIL_EXISTS: "email-already-in-use",\n      PASSWORD_LOGIN_DISABLED: "operation-not-allowed",\n      INVALID_IDP_RESPONSE: "invalid-credential",\n      INVALID_PENDING_TOKEN: "invalid-credential",\n      FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",\n      MISSING_OR_INVALID_NONCE: "missing-or-invalid-nonce",\n      INVALID_MESSAGE_PAYLOAD: "invalid-message-payload",\n      INVALID_RECIPIENT_EMAIL: "invalid-recipient-email",\n      INVALID_SENDER: "invalid-sender",\n      EMAIL_NOT_FOUND: "user-not-found",\n      RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",\n      EXPIRED_OOB_CODE: "expired-action-code",\n      INVALID_OOB_CODE: "invalid-action-code",\n      MISSING_OOB_CODE: "internal-error",\n      INVALID_PROVIDER_ID: "invalid-provider-id",\n      CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",\n      INVALID_ID_TOKEN: "invalid-user-token",\n      TOKEN_EXPIRED: "user-token-expired",\n      USER_NOT_FOUND: "user-token-expired",\n      CORS_UNSUPPORTED: "cors-unsupported",\n      DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated",\n      INVALID_APP_ID: "invalid-app-id",\n      TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",\n      WEAK_PASSWORD: "weak-password",\n      OPERATION_NOT_ALLOWED: "operation-not-allowed",\n      USER_CANCELLED: "user-cancelled",\n      CAPTCHA_CHECK_FAILED: "captcha-check-failed",\n      INVALID_APP_CREDENTIAL: "invalid-app-credential",\n      INVALID_CODE: "invalid-verification-code",\n      INVALID_PHONE_NUMBER: "invalid-phone-number",\n      INVALID_SESSION_INFO: "invalid-verification-id",\n      INVALID_TEMPORARY_PROOF: "invalid-credential",\n      MISSING_APP_CREDENTIAL: "missing-app-credential",\n      MISSING_CODE: "missing-verification-code",\n      MISSING_PHONE_NUMBER: "missing-phone-number",\n      MISSING_SESSION_INFO: "missing-verification-id",\n      QUOTA_EXCEEDED: "quota-exceeded",\n      SESSION_EXPIRED: "code-expired",\n      REJECTED_CREDENTIAL: "rejected-credential",\n      INVALID_CONTINUE_URI: "invalid-continue-uri",\n      MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",\n      MISSING_IOS_BUNDLE_ID: "missing-ios-bundle-id",\n      UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",\n      INVALID_DYNAMIC_LINK_DOMAIN: "invalid-dynamic-link-domain",\n      INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",\n      INVALID_CERT_HASH: "invalid-cert-hash",\n      UNSUPPORTED_TENANT_OPERATION: "unsupported-tenant-operation",\n      INVALID_TENANT_ID: "invalid-tenant-id",\n      TENANT_ID_MISMATCH: "tenant-id-mismatch",\n      ADMIN_ONLY_OPERATION: "admin-restricted-operation",\n      INVALID_MFA_PENDING_CREDENTIAL: "invalid-multi-factor-session",\n      MFA_ENROLLMENT_NOT_FOUND: "multi-factor-info-not-found",\n      MISSING_MFA_PENDING_CREDENTIAL: "missing-multi-factor-session",\n      MISSING_MFA_ENROLLMENT_ID: "missing-multi-factor-info",\n      EMAIL_CHANGE_NEEDS_VERIFICATION: "email-change-needs-verification",\n      SECOND_FACTOR_EXISTS: "second-factor-already-in-use",\n      SECOND_FACTOR_LIMIT_EXCEEDED: "maximum-second-factor-count-exceeded",\n      UNSUPPORTED_FIRST_FACTOR: "unsupported-first-factor",\n      UNVERIFIED_EMAIL: "unverified-email"\n    };\n    z(d, b || {});\n    b = (b = c.match(/^[^\\s]+\\s*:\\s*([\\s\\S]*)$/)) && 1 < b.length ? b[1] : void 0;\n\n    for (var e in d) if (0 === c.indexOf(e)) return new t(d[e], b);\n\n    !b && a && (b = Re(a));\n    return new t("internal-error", b);\n  }\n\n  ;\n\n  function Gj(a) {\n    this.b = a;\n    this.a = null;\n    this.nb = Hj(this);\n  }\n\n  function Hj(a) {\n    return Ij().then(function () {\n      return new B(function (b, c) {\n        J("gapi.iframes.getContext")().open({\n          where: document.body,\n          url: a.b,\n          messageHandlersFilter: J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),\n          attributes: {\n            style: {\n              position: "absolute",\n              top: "-100px",\n              width: "1px",\n              height: "1px"\n            }\n          },\n          dontclear: !0\n        }, function (d) {\n          function e() {\n            clearTimeout(f);\n            b();\n          }\n\n          a.a = d;\n          a.a.restyle({\n            setHideOnLeave: !1\n          });\n          var f = setTimeout(function () {\n            c(Error("Network Error"));\n          }, Jj.get());\n          d.ping(e).then(e, function () {\n            c(Error("Network Error"));\n          });\n        });\n      });\n    });\n  }\n\n  function Kj(a, b) {\n    return a.nb.then(function () {\n      return new B(function (c) {\n        a.a.send(b.type, b, c, J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));\n      });\n    });\n  }\n\n  function Lj(a, b) {\n    a.nb.then(function () {\n      a.a.register("authEvent", b, J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));\n    });\n  }\n\n  var Mj = new ob(pb, "https://apis.google.com/js/api.js?onload=%{onload}"),\n      Nj = new We(3E4, 6E4),\n      Jj = new We(5E3, 15E3),\n      Oj = null;\n\n  function Ij() {\n    return Oj ? Oj : Oj = new B(function (a, b) {\n      function c() {\n        Ve();\n        J("gapi.load")("gapi.iframes", {\n          callback: a,\n          ontimeout: function () {\n            Ve();\n            b(Error("Network Error"));\n          },\n          timeout: Nj.get()\n        });\n      }\n\n      if (J("gapi.iframes.Iframe")) a();else if (J("gapi.load")) c();else {\n        var d = "__iframefcb" + Math.floor(1E6 * Math.random()).toString();\n\n        l[d] = function () {\n          J("gapi.load") ? c() : b(Error("Network Error"));\n        };\n\n        d = xb(Mj, {\n          onload: d\n        });\n        D(xi(d)).o(function () {\n          b(Error("Network Error"));\n        });\n      }\n    }).o(function (a) {\n      Oj = null;\n      throw a;\n    });\n  }\n\n  ;\n\n  function Pj(a, b, c) {\n    this.i = a;\n    this.g = b;\n    this.h = c;\n    this.f = null;\n    this.a = $d(this.i, "/__/auth/iframe");\n    H(this.a, "apiKey", this.g);\n    H(this.a, "appName", this.h);\n    this.b = null;\n    this.c = [];\n  }\n\n  Pj.prototype.toString = function () {\n    this.f ? H(this.a, "v", this.f) : fe(this.a.a, "v");\n    this.b ? H(this.a, "eid", this.b) : fe(this.a.a, "eid");\n    this.c.length ? H(this.a, "fw", this.c.join(",")) : fe(this.a.a, "fw");\n    return this.a.toString();\n  };\n\n  function Qj(a, b, c, d, e) {\n    this.s = a;\n    this.m = b;\n    this.c = c;\n    this.u = d;\n    this.i = this.g = this.l = null;\n    this.a = e;\n    this.h = this.f = null;\n  }\n\n  Qj.prototype.ub = function (a) {\n    this.h = a;\n    return this;\n  };\n\n  Qj.prototype.toString = function () {\n    var a = $d(this.s, "/__/auth/handler");\n    H(a, "apiKey", this.m);\n    H(a, "appName", this.c);\n    H(a, "authType", this.u);\n\n    if (this.a.isOAuthProvider) {\n      var b = this.a;\n\n      try {\n        var c = firebase.app(this.c).auth().ja();\n      } catch (h) {\n        c = null;\n      }\n\n      b.kb = c;\n      H(a, "providerId", this.a.providerId);\n      b = this.a;\n      c = Se(b.Fb);\n\n      for (var d in c) c[d] = c[d].toString();\n\n      d = b.Oc;\n      c = lb(c);\n\n      for (var e = 0; e < d.length; e++) {\n        var f = d[e];\n        f in c && delete c[f];\n      }\n\n      b.lb && b.kb && !c[b.lb] && (c[b.lb] = b.kb);\n      kb(c) || H(a, "customParameters", Re(c));\n    }\n\n    "function" === typeof this.a.Nb && (b = this.a.Nb(), b.length && H(a, "scopes", b.join(",")));\n    this.l ? H(a, "redirectUrl", this.l) : fe(a.a, "redirectUrl");\n    this.g ? H(a, "eventId", this.g) : fe(a.a, "eventId");\n    this.i ? H(a, "v", this.i) : fe(a.a, "v");\n    if (this.b) for (var g in this.b) this.b.hasOwnProperty(g) && !Yd(a, g) && H(a, g, this.b[g]);\n    this.h ? H(a, "tid", this.h) : fe(a.a, "tid");\n    this.f ? H(a, "eid", this.f) : fe(a.a, "eid");\n    g = Rj(this.c);\n    g.length && H(a, "fw", g.join(","));\n    return a.toString();\n  };\n\n  function Rj(a) {\n    try {\n      return firebase.app(a).auth().Ea();\n    } catch (b) {\n      return [];\n    }\n  }\n\n  function Sj(a, b, c, d, e) {\n    this.u = a;\n    this.f = b;\n    this.b = c;\n    this.c = d || null;\n    this.h = e || null;\n    this.m = this.s = this.w = null;\n    this.g = [];\n    this.l = this.a = null;\n  }\n\n  function Tj(a) {\n    var b = oe();\n    return Xi(a).then(function (c) {\n      a: {\n        var d = Zd(b),\n            e = d.f;\n        d = d.b;\n\n        for (var f = 0; f < c.length; f++) {\n          var g = c[f];\n          var h = d;\n          var m = e;\n          0 == g.indexOf("chrome-extension://") ? h = Zd(g).b == h && "chrome-extension" == m : "http" != m && "https" != m ? h = !1 : ze.test(g) ? h = h == g : (g = g.split(".").join("\\\\."), h = new RegExp("^(.+\\\\." + g + "|" + g + ")$", "i").test(h));\n\n          if (h) {\n            c = !0;\n            break a;\n          }\n        }\n\n        c = !1;\n      }\n\n      if (!c) throw new th(oe());\n    });\n  }\n\n  function Uj(a) {\n    if (a.l) return a.l;\n    a.l = Be().then(function () {\n      if (!a.s) {\n        var b = a.c,\n            c = a.h,\n            d = Rj(a.b),\n            e = new Pj(a.u, a.f, a.b);\n        e.f = b;\n        e.b = c;\n        e.c = Xa(d || []);\n        a.s = e.toString();\n      }\n\n      a.i = new Gj(a.s);\n      Vj(a);\n    });\n    return a.l;\n  }\n\n  k = Sj.prototype;\n\n  k.Lb = function (a, b, c) {\n    var d = new t("popup-closed-by-user"),\n        e = new t("web-storage-unsupported"),\n        f = this,\n        g = !1;\n    return this.ka().then(function () {\n      Wj(f).then(function (h) {\n        h || (a && ve(a), b(e), g = !0);\n      });\n    }).o(function () {}).then(function () {\n      if (!g) return ye(a);\n    }).then(function () {\n      if (!g) return Bd(c).then(function () {\n        b(d);\n      });\n    });\n  };\n\n  k.Ub = function () {\n    var a = I();\n    return !Qe(a) && !Ue(a);\n  };\n\n  k.Qb = function () {\n    return !1;\n  };\n\n  k.Jb = function (a, b, c, d, e, f, g, h) {\n    if (!a) return E(new t("popup-blocked"));\n    if (g && !Qe()) return this.ka().o(function (p) {\n      ve(a);\n      e(p);\n    }), d(), D();\n    this.a || (this.a = Tj(Xj(this)));\n    var m = this;\n    return this.a.then(function () {\n      var p = m.ka().o(function (v) {\n        ve(a);\n        e(v);\n        throw v;\n      });\n      d();\n      return p;\n    }).then(function () {\n      nh(c);\n\n      if (!g) {\n        var p = Yj(m.u, m.f, m.b, b, c, null, f, m.c, void 0, m.h, h);\n        pe(p, a);\n      }\n    }).o(function (p) {\n      "auth/network-request-failed" == p.code && (m.a = null);\n      throw p;\n    });\n  };\n\n  function Xj(a) {\n    a.m || (a.w = a.c ? Le(a.c, Rj(a.b)) : null, a.m = new Ei(a.f, Aa(a.h), a.w));\n    return a.m;\n  }\n\n  k.Kb = function (a, b, c, d) {\n    this.a || (this.a = Tj(Xj(this)));\n    var e = this;\n    return this.a.then(function () {\n      nh(b);\n      var f = Yj(e.u, e.f, e.b, a, b, oe(), c, e.c, void 0, e.h, d);\n      pe(f);\n    }).o(function (f) {\n      "auth/network-request-failed" == f.code && (e.a = null);\n      throw f;\n    });\n  };\n\n  k.ka = function () {\n    var a = this;\n    return Uj(this).then(function () {\n      return a.i.nb;\n    }).o(function () {\n      a.a = null;\n      throw new t("network-request-failed");\n    });\n  };\n\n  k.Xb = function () {\n    return !0;\n  };\n\n  function Yj(a, b, c, d, e, f, g, h, m, p, v) {\n    a = new Qj(a, b, c, d, e);\n    a.l = f;\n    a.g = g;\n    a.i = h;\n    a.b = lb(m || null);\n    a.f = p;\n    return a.ub(v).toString();\n  }\n\n  function Vj(a) {\n    if (!a.i) throw Error("IfcHandler must be initialized!");\n    Lj(a.i, function (b) {\n      var c = {};\n\n      if (b && b.authEvent) {\n        var d = !1;\n        b = ph(b.authEvent);\n\n        for (c = 0; c < a.g.length; c++) d = a.g[c](b) || d;\n\n        c = {};\n        c.status = d ? "ACK" : "ERROR";\n        return D(c);\n      }\n\n      c.status = "ERROR";\n      return D(c);\n    });\n  }\n\n  function Wj(a) {\n    var b = {\n      type: "webStorageSupport"\n    };\n    return Uj(a).then(function () {\n      return Kj(a.i, b);\n    }).then(function (c) {\n      if (c && c.length && "undefined" !== typeof c[0].webStorageSupport) return c[0].webStorageSupport;\n      throw Error();\n    });\n  }\n\n  k.Ca = function (a) {\n    this.g.push(a);\n  };\n\n  k.Qa = function (a) {\n    Va(this.g, function (b) {\n      return b == a;\n    });\n  };\n\n  function Zj(a) {\n    this.a = a || firebase.INTERNAL.reactNative && firebase.INTERNAL.reactNative.AsyncStorage;\n    if (!this.a) throw new t("internal-error", "The React Native compatibility library was not found.");\n    this.type = "asyncStorage";\n  }\n\n  k = Zj.prototype;\n\n  k.get = function (a) {\n    return D(this.a.getItem(a)).then(function (b) {\n      return b && Te(b);\n    });\n  };\n\n  k.set = function (a, b) {\n    return D(this.a.setItem(a, Re(b)));\n  };\n\n  k.T = function (a) {\n    return D(this.a.removeItem(a));\n  };\n\n  k.ba = function () {};\n\n  k.ha = function () {};\n\n  function ak(a) {\n    this.b = a;\n    this.a = {};\n    this.f = q(this.c, this);\n  }\n\n  var bk = [];\n\n  function ck() {\n    var a = Ge() ? self : null;\n    w(bk, function (c) {\n      c.b == a && (b = c);\n    });\n\n    if (!b) {\n      var b = new ak(a);\n      bk.push(b);\n    }\n\n    return b;\n  }\n\n  ak.prototype.c = function (a) {\n    var b = a.data.eventType,\n        c = a.data.eventId,\n        d = this.a[b];\n\n    if (d && 0 < d.length) {\n      a.ports[0].postMessage({\n        status: "ack",\n        eventId: c,\n        eventType: b,\n        response: null\n      });\n      var e = [];\n      w(d, function (f) {\n        e.push(D().then(function () {\n          return f(a.origin, a.data.data);\n        }));\n      });\n      Fc(e).then(function (f) {\n        var g = [];\n        w(f, function (h) {\n          g.push({\n            fulfilled: h.Mb,\n            value: h.value,\n            reason: h.reason ? h.reason.message : void 0\n          });\n        });\n        w(g, function (h) {\n          for (var m in h) "undefined" === typeof h[m] && delete h[m];\n        });\n        a.ports[0].postMessage({\n          status: "done",\n          eventId: c,\n          eventType: b,\n          response: g\n        });\n      });\n    }\n  };\n\n  function dk(a, b, c) {\n    kb(a.a) && a.b.addEventListener("message", a.f);\n    "undefined" === typeof a.a[b] && (a.a[b] = []);\n    a.a[b].push(c);\n  }\n\n  ;\n\n  function ek(a) {\n    this.a = a;\n  }\n\n  ek.prototype.postMessage = function (a, b) {\n    this.a.postMessage(a, b);\n  };\n\n  function fk(a) {\n    this.c = a;\n    this.b = !1;\n    this.a = [];\n  }\n\n  function gk(a, b, c, d) {\n    var e,\n        f = c || {},\n        g,\n        h,\n        m,\n        p = null;\n    if (a.b) return E(Error("connection_unavailable"));\n    var v = d ? 800 : 50,\n        C = "undefined" !== typeof MessageChannel ? new MessageChannel() : null;\n    return new B(function (A, Q) {\n      C ? (e = Math.floor(Math.random() * Math.pow(10, 20)).toString(), C.port1.start(), h = setTimeout(function () {\n        Q(Error("unsupported_event"));\n      }, v), g = function (wa) {\n        wa.data.eventId === e && ("ack" === wa.data.status ? (clearTimeout(h), m = setTimeout(function () {\n          Q(Error("timeout"));\n        }, 3E3)) : "done" === wa.data.status ? (clearTimeout(m), "undefined" !== typeof wa.data.response ? A(wa.data.response) : Q(Error("unknown_error"))) : (clearTimeout(h), clearTimeout(m), Q(Error("invalid_response"))));\n      }, p = {\n        messageChannel: C,\n        onMessage: g\n      }, a.a.push(p), C.port1.addEventListener("message", g), a.c.postMessage({\n        eventType: b,\n        eventId: e,\n        data: f\n      }, [C.port2])) : Q(Error("connection_unavailable"));\n    }).then(function (A) {\n      hk(a, p);\n      return A;\n    }).o(function (A) {\n      hk(a, p);\n      throw A;\n    });\n  }\n\n  function hk(a, b) {\n    if (b) {\n      var c = b.messageChannel,\n          d = b.onMessage;\n      c && (c.port1.removeEventListener("message", d), c.port1.close());\n      Va(a.a, function (e) {\n        return e == b;\n      });\n    }\n  }\n\n  fk.prototype.close = function () {\n    for (; 0 < this.a.length;) hk(this, this.a[0]);\n\n    this.b = !0;\n  };\n\n  function ik() {\n    if (!jk()) throw new t("web-storage-unsupported");\n    this.c = {};\n    this.a = [];\n    this.b = 0;\n    this.u = l.indexedDB;\n    this.type = "indexedDB";\n    this.g = this.l = this.f = this.i = null;\n    this.s = !1;\n    this.h = null;\n    var a = this;\n    Ge() && self ? (this.l = ck(), dk(this.l, "keyChanged", function (b, c) {\n      return kk(a).then(function (d) {\n        0 < d.length && w(a.a, function (e) {\n          e(d);\n        });\n        return {\n          keyProcessed: Ta(d, c.key)\n        };\n      });\n    }), dk(this.l, "ping", function () {\n      return D(["keyChanged"]);\n    })) : bf().then(function (b) {\n      if (a.h = b) a.g = new fk(new ek(b)), gk(a.g, "ping", null, !0).then(function (c) {\n        c[0].fulfilled && Ta(c[0].value, "keyChanged") && (a.s = !0);\n      }).o(function () {});\n    });\n  }\n\n  var lk;\n\n  function mk(a) {\n    return new B(function (b, c) {\n      var d = a.u.deleteDatabase("firebaseLocalStorageDb");\n\n      d.onsuccess = function () {\n        b();\n      };\n\n      d.onerror = function (e) {\n        c(Error(e.target.error));\n      };\n    });\n  }\n\n  function nk(a) {\n    return new B(function (b, c) {\n      var d = a.u.open("firebaseLocalStorageDb", 1);\n\n      d.onerror = function (e) {\n        try {\n          e.preventDefault();\n        } catch (f) {}\n\n        c(Error(e.target.error));\n      };\n\n      d.onupgradeneeded = function (e) {\n        e = e.target.result;\n\n        try {\n          e.createObjectStore("firebaseLocalStorage", {\n            keyPath: "fbase_key"\n          });\n        } catch (f) {\n          c(f);\n        }\n      };\n\n      d.onsuccess = function (e) {\n        e = e.target.result;\n        e.objectStoreNames.contains("firebaseLocalStorage") ? b(e) : mk(a).then(function () {\n          return nk(a);\n        }).then(function (f) {\n          b(f);\n        }).o(function (f) {\n          c(f);\n        });\n      };\n    });\n  }\n\n  function ok(a) {\n    a.m || (a.m = nk(a));\n    return a.m;\n  }\n\n  function jk() {\n    try {\n      return !!l.indexedDB;\n    } catch (a) {\n      return !1;\n    }\n  }\n\n  function pk(a) {\n    return a.objectStore("firebaseLocalStorage");\n  }\n\n  function qk(a, b) {\n    return a.transaction(["firebaseLocalStorage"], b ? "readwrite" : "readonly");\n  }\n\n  function rk(a) {\n    return new B(function (b, c) {\n      a.onsuccess = function (d) {\n        d && d.target ? b(d.target.result) : b();\n      };\n\n      a.onerror = function (d) {\n        c(d.target.error);\n      };\n    });\n  }\n\n  k = ik.prototype;\n\n  k.set = function (a, b) {\n    var c = !1,\n        d,\n        e = this;\n    return ok(this).then(function (f) {\n      d = f;\n      f = pk(qk(d, !0));\n      return rk(f.get(a));\n    }).then(function (f) {\n      var g = pk(qk(d, !0));\n      if (f) return f.value = b, rk(g.put(f));\n      e.b++;\n      c = !0;\n      f = {};\n      f.fbase_key = a;\n      f.value = b;\n      return rk(g.add(f));\n    }).then(function () {\n      e.c[a] = b;\n      return sk(e, a);\n    }).ma(function () {\n      c && e.b--;\n    });\n  };\n\n  function sk(a, b) {\n    return a.g && a.h && af() === a.h ? gk(a.g, "keyChanged", {\n      key: b\n    }, a.s).then(function () {}).o(function () {}) : D();\n  }\n\n  k.get = function (a) {\n    return ok(this).then(function (b) {\n      return rk(pk(qk(b, !1)).get(a));\n    }).then(function (b) {\n      return b && b.value;\n    });\n  };\n\n  k.T = function (a) {\n    var b = !1,\n        c = this;\n    return ok(this).then(function (d) {\n      b = !0;\n      c.b++;\n      return rk(pk(qk(d, !0))["delete"](a));\n    }).then(function () {\n      delete c.c[a];\n      return sk(c, a);\n    }).ma(function () {\n      b && c.b--;\n    });\n  };\n\n  function kk(a) {\n    return ok(a).then(function (b) {\n      var c = pk(qk(b, !1));\n      return c.getAll ? rk(c.getAll()) : new B(function (d, e) {\n        var f = [],\n            g = c.openCursor();\n\n        g.onsuccess = function (h) {\n          (h = h.target.result) ? (f.push(h.value), h["continue"]()) : d(f);\n        };\n\n        g.onerror = function (h) {\n          e(h.target.error);\n        };\n      });\n    }).then(function (b) {\n      var c = {},\n          d = [];\n\n      if (0 == a.b) {\n        for (d = 0; d < b.length; d++) c[b[d].fbase_key] = b[d].value;\n\n        d = qe(a.c, c);\n        a.c = c;\n      }\n\n      return d;\n    });\n  }\n\n  k.ba = function (a) {\n    0 == this.a.length && tk(this);\n    this.a.push(a);\n  };\n\n  k.ha = function (a) {\n    Va(this.a, function (b) {\n      return b == a;\n    });\n    0 == this.a.length && uk(this);\n  };\n\n  function tk(a) {\n    function b() {\n      a.f = setTimeout(function () {\n        a.i = kk(a).then(function (c) {\n          0 < c.length && w(a.a, function (d) {\n            d(c);\n          });\n        }).then(function () {\n          b();\n        }).o(function (c) {\n          "STOP_EVENT" != c.message && b();\n        });\n      }, 800);\n    }\n\n    uk(a);\n    b();\n  }\n\n  function uk(a) {\n    a.i && a.i.cancel("STOP_EVENT");\n    a.f && (clearTimeout(a.f), a.f = null);\n  }\n\n  ;\n\n  function vk(a) {\n    var b = this,\n        c = null;\n    this.a = [];\n    this.type = "indexedDB";\n    this.c = a;\n    this.b = D().then(function () {\n      if (jk()) {\n        var d = Ne(),\n            e = "__sak" + d;\n        lk || (lk = new ik());\n        c = lk;\n        return c.set(e, d).then(function () {\n          return c.get(e);\n        }).then(function (f) {\n          if (f !== d) throw Error("indexedDB not supported!");\n          return c.T(e);\n        }).then(function () {\n          return c;\n        }).o(function () {\n          return b.c;\n        });\n      }\n\n      return b.c;\n    }).then(function (d) {\n      b.type = d.type;\n      d.ba(function (e) {\n        w(b.a, function (f) {\n          f(e);\n        });\n      });\n      return d;\n    });\n  }\n\n  k = vk.prototype;\n\n  k.get = function (a) {\n    return this.b.then(function (b) {\n      return b.get(a);\n    });\n  };\n\n  k.set = function (a, b) {\n    return this.b.then(function (c) {\n      return c.set(a, b);\n    });\n  };\n\n  k.T = function (a) {\n    return this.b.then(function (b) {\n      return b.T(a);\n    });\n  };\n\n  k.ba = function (a) {\n    this.a.push(a);\n  };\n\n  k.ha = function (a) {\n    Va(this.a, function (b) {\n      return b == a;\n    });\n  };\n\n  function wk() {\n    this.a = {};\n    this.type = "inMemory";\n  }\n\n  k = wk.prototype;\n\n  k.get = function (a) {\n    return D(this.a[a]);\n  };\n\n  k.set = function (a, b) {\n    this.a[a] = b;\n    return D();\n  };\n\n  k.T = function (a) {\n    delete this.a[a];\n    return D();\n  };\n\n  k.ba = function () {};\n\n  k.ha = function () {};\n\n  function xk() {\n    if (!yk()) {\n      if ("Node" == He()) throw new t("internal-error", "The LocalStorage compatibility library was not found.");\n      throw new t("web-storage-unsupported");\n    }\n\n    this.a = zk() || firebase.INTERNAL.node.localStorage;\n    this.type = "localStorage";\n  }\n\n  function zk() {\n    try {\n      var a = l.localStorage,\n          b = Ne();\n      a && (a.setItem(b, "1"), a.removeItem(b));\n      return a;\n    } catch (c) {\n      return null;\n    }\n  }\n\n  function yk() {\n    var a = "Node" == He();\n    a = zk() || a && firebase.INTERNAL.node && firebase.INTERNAL.node.localStorage;\n    if (!a) return !1;\n\n    try {\n      return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;\n    } catch (b) {\n      return !1;\n    }\n  }\n\n  k = xk.prototype;\n\n  k.get = function (a) {\n    var b = this;\n    return D().then(function () {\n      var c = b.a.getItem(a);\n      return Te(c);\n    });\n  };\n\n  k.set = function (a, b) {\n    var c = this;\n    return D().then(function () {\n      var d = Re(b);\n      null === d ? c.T(a) : c.a.setItem(a, d);\n    });\n  };\n\n  k.T = function (a) {\n    var b = this;\n    return D().then(function () {\n      b.a.removeItem(a);\n    });\n  };\n\n  k.ba = function (a) {\n    l.window && jd(l.window, "storage", a);\n  };\n\n  k.ha = function (a) {\n    l.window && td(l.window, "storage", a);\n  };\n\n  function Ak() {\n    this.type = "nullStorage";\n  }\n\n  k = Ak.prototype;\n\n  k.get = function () {\n    return D(null);\n  };\n\n  k.set = function () {\n    return D();\n  };\n\n  k.T = function () {\n    return D();\n  };\n\n  k.ba = function () {};\n\n  k.ha = function () {};\n\n  function Bk() {\n    if (!Ck()) {\n      if ("Node" == He()) throw new t("internal-error", "The SessionStorage compatibility library was not found.");\n      throw new t("web-storage-unsupported");\n    }\n\n    this.a = Dk() || firebase.INTERNAL.node.sessionStorage;\n    this.type = "sessionStorage";\n  }\n\n  function Dk() {\n    try {\n      var a = l.sessionStorage,\n          b = Ne();\n      a && (a.setItem(b, "1"), a.removeItem(b));\n      return a;\n    } catch (c) {\n      return null;\n    }\n  }\n\n  function Ck() {\n    var a = "Node" == He();\n    a = Dk() || a && firebase.INTERNAL.node && firebase.INTERNAL.node.sessionStorage;\n    if (!a) return !1;\n\n    try {\n      return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;\n    } catch (b) {\n      return !1;\n    }\n  }\n\n  k = Bk.prototype;\n\n  k.get = function (a) {\n    var b = this;\n    return D().then(function () {\n      var c = b.a.getItem(a);\n      return Te(c);\n    });\n  };\n\n  k.set = function (a, b) {\n    var c = this;\n    return D().then(function () {\n      var d = Re(b);\n      null === d ? c.T(a) : c.a.setItem(a, d);\n    });\n  };\n\n  k.T = function (a) {\n    var b = this;\n    return D().then(function () {\n      b.a.removeItem(a);\n    });\n  };\n\n  k.ba = function () {};\n\n  k.ha = function () {};\n\n  function Ek() {\n    var a = {};\n    a.Browser = Fk;\n    a.Node = Gk;\n    a.ReactNative = Hk;\n    a.Worker = Ik;\n    this.a = a[He()];\n  }\n\n  var Jk,\n      Fk = {\n    F: xk,\n    $a: Bk\n  },\n      Gk = {\n    F: xk,\n    $a: Bk\n  },\n      Hk = {\n    F: Zj,\n    $a: Ak\n  },\n      Ik = {\n    F: xk,\n    $a: Ak\n  };\n  /*\n  Copyright 2017 Google LLC\n  Licensed under the Apache License, Version 2.0 (the "License");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an "AS IS" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  */\n\n  var Kk = {\n    od: "local",\n    NONE: "none",\n    qd: "session"\n  };\n\n  function Lk(a) {\n    var b = new t("invalid-persistence-type"),\n        c = new t("unsupported-persistence-type");\n\n    a: {\n      for (d in Kk) if (Kk[d] == a) {\n        var d = !0;\n        break a;\n      }\n\n      d = !1;\n    }\n\n    if (!d || "string" !== typeof a) throw b;\n\n    switch (He()) {\n      case "ReactNative":\n        if ("session" === a) throw c;\n        break;\n\n      case "Node":\n        if ("none" !== a) throw c;\n        break;\n\n      case "Worker":\n        if ("session" === a || !jk() && "none" !== a) throw c;\n        break;\n\n      default:\n        if (!Me() && "none" !== a) throw c;\n    }\n  }\n\n  function Mk() {\n    var a = !Ue(I()) && Fe() ? !0 : !1,\n        b = Qe(),\n        c = Me();\n    this.m = a;\n    this.h = b;\n    this.l = c;\n    this.a = {};\n    Jk || (Jk = new Ek());\n    a = Jk;\n\n    try {\n      this.g = !ne() && $e() || !l.indexedDB ? new a.a.F() : new vk(Ge() ? new wk() : new a.a.F());\n    } catch (d) {\n      this.g = new wk(), this.h = !0;\n    }\n\n    try {\n      this.i = new a.a.$a();\n    } catch (d) {\n      this.i = new wk();\n    }\n\n    this.u = new wk();\n    this.f = q(this.Vb, this);\n    this.b = {};\n  }\n\n  var Nk;\n\n  function Ok() {\n    Nk || (Nk = new Mk());\n    return Nk;\n  }\n\n  function Pk(a, b) {\n    switch (b) {\n      case "session":\n        return a.i;\n\n      case "none":\n        return a.u;\n\n      default:\n        return a.g;\n    }\n  }\n\n  function Qk(a, b) {\n    return "firebase:" + a.name + (b ? ":" + b : "");\n  }\n\n  function Rk(a, b, c) {\n    var d = Qk(b, c),\n        e = Pk(a, b.F);\n    return a.get(b, c).then(function (f) {\n      var g = null;\n\n      try {\n        g = Te(l.localStorage.getItem(d));\n      } catch (h) {}\n\n      if (g && !f) return l.localStorage.removeItem(d), a.set(b, g, c);\n      g && f && "localStorage" != e.type && l.localStorage.removeItem(d);\n    });\n  }\n\n  k = Mk.prototype;\n\n  k.get = function (a, b) {\n    return Pk(this, a.F).get(Qk(a, b));\n  };\n\n  function Sk(a, b, c) {\n    c = Qk(b, c);\n    "local" == b.F && (a.b[c] = null);\n    return Pk(a, b.F).T(c);\n  }\n\n  k.set = function (a, b, c) {\n    var d = Qk(a, c),\n        e = this,\n        f = Pk(this, a.F);\n    return f.set(d, b).then(function () {\n      return f.get(d);\n    }).then(function (g) {\n      "local" == a.F && (e.b[d] = g);\n    });\n  };\n\n  k.addListener = function (a, b, c) {\n    a = Qk(a, b);\n    this.l && (this.b[a] = l.localStorage.getItem(a));\n    kb(this.a) && (Pk(this, "local").ba(this.f), this.h || (ne() || !$e()) && l.indexedDB || !this.l || Tk(this));\n    this.a[a] || (this.a[a] = []);\n    this.a[a].push(c);\n  };\n\n  k.removeListener = function (a, b, c) {\n    a = Qk(a, b);\n    this.a[a] && (Va(this.a[a], function (d) {\n      return d == c;\n    }), 0 == this.a[a].length && delete this.a[a]);\n    kb(this.a) && (Pk(this, "local").ha(this.f), Uk(this));\n  };\n\n  function Tk(a) {\n    Uk(a);\n    a.c = setInterval(function () {\n      for (var b in a.a) {\n        var c = l.localStorage.getItem(b),\n            d = a.b[b];\n        c != d && (a.b[b] = c, c = new Yc({\n          type: "storage",\n          key: b,\n          target: window,\n          oldValue: d,\n          newValue: c,\n          a: !0\n        }), a.Vb(c));\n      }\n    }, 1E3);\n  }\n\n  function Uk(a) {\n    a.c && (clearInterval(a.c), a.c = null);\n  }\n\n  k.Vb = function (a) {\n    if (a && a.f) {\n      var b = a.a.key;\n      if (null == b) for (var c in this.a) {\n        var d = this.b[c];\n        "undefined" === typeof d && (d = null);\n        var e = l.localStorage.getItem(c);\n        e !== d && (this.b[c] = e, this.ib(c));\n      } else if (0 == b.indexOf("firebase:") && this.a[b]) {\n        "undefined" !== typeof a.a.a ? Pk(this, "local").ha(this.f) : Uk(this);\n        if (this.m) if (c = l.localStorage.getItem(b), d = a.a.newValue, d !== c) null !== d ? l.localStorage.setItem(b, d) : l.localStorage.removeItem(b);else if (this.b[b] === d && "undefined" === typeof a.a.a) return;\n        var f = this;\n\n        c = function () {\n          if ("undefined" !== typeof a.a.a || f.b[b] !== l.localStorage.getItem(b)) f.b[b] = l.localStorage.getItem(b), f.ib(b);\n        };\n\n        Tb && dc && 10 == dc && l.localStorage.getItem(b) !== a.a.newValue && a.a.newValue !== a.a.oldValue ? setTimeout(c, 10) : c();\n      }\n    } else w(a, q(this.ib, this));\n  };\n\n  k.ib = function (a) {\n    this.a[a] && w(this.a[a], function (b) {\n      b();\n    });\n  };\n\n  function Vk(a) {\n    this.a = a;\n    this.b = Ok();\n  }\n\n  var Wk = {\n    name: "authEvent",\n    F: "local"\n  };\n\n  function Xk(a) {\n    return a.b.get(Wk, a.a).then(function (b) {\n      return ph(b);\n    });\n  }\n\n  ;\n\n  function Yk() {\n    this.a = Ok();\n  }\n\n  ;\n\n  function Zk() {\n    this.b = -1;\n  }\n\n  ;\n\n  function $k(a, b) {\n    this.b = al;\n    this.f = l.Uint8Array ? new Uint8Array(this.b) : Array(this.b);\n    this.g = this.c = 0;\n    this.a = [];\n    this.i = a;\n    this.h = b;\n    this.l = l.Int32Array ? new Int32Array(64) : Array(64);\n    void 0 === bl && (l.Int32Array ? bl = new Int32Array(cl) : bl = cl);\n    this.reset();\n  }\n\n  var bl;\n  r($k, Zk);\n\n  for (var al = 64, dl = al - 1, el = [], fl = 0; fl < dl; fl++) el[fl] = 0;\n\n  var gl = Wa(128, el);\n\n  $k.prototype.reset = function () {\n    this.g = this.c = 0;\n    this.a = l.Int32Array ? new Int32Array(this.h) : Xa(this.h);\n  };\n\n  function hl(a) {\n    for (var b = a.f, c = a.l, d = 0, e = 0; e < b.length;) c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;\n\n    for (b = 16; 64 > b; b++) {\n      e = c[b - 15] | 0;\n      d = c[b - 2] | 0;\n      var f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0,\n          g = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;\n      c[b] = f + g | 0;\n    }\n\n    d = a.a[0] | 0;\n    e = a.a[1] | 0;\n    var h = a.a[2] | 0,\n        m = a.a[3] | 0,\n        p = a.a[4] | 0,\n        v = a.a[5] | 0,\n        C = a.a[6] | 0;\n    f = a.a[7] | 0;\n\n    for (b = 0; 64 > b; b++) {\n      var A = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & h ^ e & h) | 0;\n      g = p & v ^ ~p & C;\n      f = f + ((p >>> 6 | p << 26) ^ (p >>> 11 | p << 21) ^ (p >>> 25 | p << 7)) | 0;\n      g = g + (bl[b] | 0) | 0;\n      g = f + (g + (c[b] | 0) | 0) | 0;\n      f = C;\n      C = v;\n      v = p;\n      p = m + g | 0;\n      m = h;\n      h = e;\n      e = d;\n      d = g + A | 0;\n    }\n\n    a.a[0] = a.a[0] + d | 0;\n    a.a[1] = a.a[1] + e | 0;\n    a.a[2] = a.a[2] + h | 0;\n    a.a[3] = a.a[3] + m | 0;\n    a.a[4] = a.a[4] + p | 0;\n    a.a[5] = a.a[5] + v | 0;\n    a.a[6] = a.a[6] + C | 0;\n    a.a[7] = a.a[7] + f | 0;\n  }\n\n  function il(a, b, c) {\n    void 0 === c && (c = b.length);\n    var d = 0,\n        e = a.c;\n    if ("string" === typeof b) for (; d < c;) a.f[e++] = b.charCodeAt(d++), e == a.b && (hl(a), e = 0);else if (ma(b)) for (; d < c;) {\n      var f = b[d++];\n      if (!("number" == typeof f && 0 <= f && 255 >= f && f == (f | 0))) throw Error("message must be a byte array");\n      a.f[e++] = f;\n      e == a.b && (hl(a), e = 0);\n    } else throw Error("message must be string or array");\n    a.c = e;\n    a.g += c;\n  }\n\n  var cl = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];\n\n  function jl() {\n    $k.call(this, 8, kl);\n  }\n\n  r(jl, $k);\n  var kl = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];\n\n  function ll(a, b, c, d, e) {\n    this.u = a;\n    this.i = b;\n    this.l = c;\n    this.m = d || null;\n    this.s = e || null;\n    this.h = b + ":" + c;\n    this.w = new Yk();\n    this.g = new Vk(this.h);\n    this.f = null;\n    this.b = [];\n    this.a = this.c = null;\n  }\n\n  function ml(a) {\n    return new t("invalid-cordova-configuration", a);\n  }\n\n  k = ll.prototype;\n\n  k.ka = function () {\n    return this.Ga ? this.Ga : this.Ga = Ce().then(function () {\n      if ("function" !== typeof J("universalLinks.subscribe", l)) throw ml("cordova-universal-links-plugin-fix is not installed");\n      if ("undefined" === typeof J("BuildInfo.packageName", l)) throw ml("cordova-plugin-buildinfo is not installed");\n      if ("function" !== typeof J("cordova.plugins.browsertab.openUrl", l)) throw ml("cordova-plugin-browsertab is not installed");\n      if ("function" !== typeof J("cordova.InAppBrowser.open", l)) throw ml("cordova-plugin-inappbrowser is not installed");\n    }, function () {\n      throw new t("cordova-not-ready");\n    });\n  };\n\n  function nl() {\n    for (var a = 20, b = []; 0 < a;) b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;\n\n    return b.join("");\n  }\n\n  function ol(a) {\n    var b = new jl();\n    il(b, a);\n    a = [];\n    var c = 8 * b.g;\n    56 > b.c ? il(b, gl, 56 - b.c) : il(b, gl, b.b - (b.c - 56));\n\n    for (var d = 63; 56 <= d; d--) b.f[d] = c & 255, c /= 256;\n\n    hl(b);\n\n    for (d = c = 0; d < b.i; d++) for (var e = 24; 0 <= e; e -= 8) a[c++] = b.a[d] >> e & 255;\n\n    return $f(a);\n  }\n\n  k.Lb = function (a, b) {\n    b(new t("operation-not-supported-in-this-environment"));\n    return D();\n  };\n\n  k.Jb = function () {\n    return E(new t("operation-not-supported-in-this-environment"));\n  };\n\n  k.Xb = function () {\n    return !1;\n  };\n\n  k.Ub = function () {\n    return !0;\n  };\n\n  k.Qb = function () {\n    return !0;\n  };\n\n  k.Kb = function (a, b, c, d) {\n    if (this.c) return E(new t("redirect-operation-pending"));\n    var e = this,\n        f = l.document,\n        g = null,\n        h = null,\n        m = null,\n        p = null;\n    return this.c = D().then(function () {\n      nh(b);\n      return pl(e);\n    }).then(function () {\n      return ql(e, a, b, c, d);\n    }).then(function () {\n      return new B(function (v, C) {\n        h = function () {\n          var A = J("cordova.plugins.browsertab.close", l);\n          v();\n          "function" === typeof A && A();\n          e.a && "function" === typeof e.a.close && (e.a.close(), e.a = null);\n          return !1;\n        };\n\n        e.Ca(h);\n\n        m = function () {\n          g || (g = Bd(2E3).then(function () {\n            C(new t("redirect-cancelled-by-user"));\n          }));\n        };\n\n        p = function () {\n          Xe() && m();\n        };\n\n        f.addEventListener("resume", m, !1);\n        I().toLowerCase().match(/android/) || f.addEventListener("visibilitychange", p, !1);\n      }).o(function (v) {\n        return rl(e).then(function () {\n          throw v;\n        });\n      });\n    }).ma(function () {\n      m && f.removeEventListener("resume", m, !1);\n      p && f.removeEventListener("visibilitychange", p, !1);\n      g && g.cancel();\n      h && e.Qa(h);\n      e.c = null;\n    });\n  };\n\n  function ql(a, b, c, d, e) {\n    var f = nl(),\n        g = new oh(b, d, null, f, new t("no-auth-event"), null, e),\n        h = J("BuildInfo.packageName", l);\n    if ("string" !== typeof h) throw new t("invalid-cordova-configuration");\n    var m = J("BuildInfo.displayName", l),\n        p = {};\n    if (I().toLowerCase().match(/iphone|ipad|ipod/)) p.ibi = h;else if (I().toLowerCase().match(/android/)) p.apn = h;else return E(new t("operation-not-supported-in-this-environment"));\n    m && (p.appDisplayName = m);\n    f = ol(f);\n    p.sessionId = f;\n    var v = Yj(a.u, a.i, a.l, b, c, null, d, a.m, p, a.s, e);\n    return a.ka().then(function () {\n      var C = a.h;\n      return a.w.a.set(Wk, g.v(), C);\n    }).then(function () {\n      var C = J("cordova.plugins.browsertab.isAvailable", l);\n      if ("function" !== typeof C) throw new t("invalid-cordova-configuration");\n      var A = null;\n      C(function (Q) {\n        if (Q) {\n          A = J("cordova.plugins.browsertab.openUrl", l);\n          if ("function" !== typeof A) throw new t("invalid-cordova-configuration");\n          A(v);\n        } else {\n          A = J("cordova.InAppBrowser.open", l);\n          if ("function" !== typeof A) throw new t("invalid-cordova-configuration");\n          Q = I();\n          a.a = A(v, Q.match(/(iPad|iPhone|iPod).*OS 7_\\d/i) || Q.match(/(iPad|iPhone|iPod).*OS 8_\\d/i) ? "_blank" : "_system", "location=yes");\n        }\n      });\n    });\n  }\n\n  function sl(a, b) {\n    for (var c = 0; c < a.b.length; c++) try {\n      a.b[c](b);\n    } catch (d) {}\n  }\n\n  function pl(a) {\n    a.f || (a.f = a.ka().then(function () {\n      return new B(function (b) {\n        function c(d) {\n          b(d);\n          a.Qa(c);\n          return !1;\n        }\n\n        a.Ca(c);\n        tl(a);\n      });\n    }));\n    return a.f;\n  }\n\n  function rl(a) {\n    var b = null;\n    return Xk(a.g).then(function (c) {\n      b = c;\n      c = a.g;\n      return Sk(c.b, Wk, c.a);\n    }).then(function () {\n      return b;\n    });\n  }\n\n  function tl(a) {\n    function b(g) {\n      d = !0;\n      e && e.cancel();\n      rl(a).then(function (h) {\n        var m = c;\n\n        if (h && g && g.url) {\n          var p = null;\n          m = ug(g.url);\n          -1 != m.indexOf("/__/auth/callback") && (p = Zd(m), p = Te(Yd(p, "firebaseError") || null), p = (p = "object" === typeof p ? ya(p) : null) ? new oh(h.c, h.b, null, null, p, null, h.S()) : new oh(h.c, h.b, m, h.f, null, null, h.S()));\n          m = p || c;\n        }\n\n        sl(a, m);\n      });\n    }\n\n    var c = new oh("unknown", null, null, null, new t("no-auth-event")),\n        d = !1,\n        e = Bd(500).then(function () {\n      return rl(a).then(function () {\n        d || sl(a, c);\n      });\n    }),\n        f = l.handleOpenURL;\n\n    l.handleOpenURL = function (g) {\n      0 == g.toLowerCase().indexOf(J("BuildInfo.packageName", l).toLowerCase() + "://") && b({\n        url: g\n      });\n      if ("function" === typeof f) try {\n        f(g);\n      } catch (h) {\n        console.error(h);\n      }\n    };\n\n    rh || (rh = new qh());\n    sh(b);\n  }\n\n  k.Ca = function (a) {\n    this.b.push(a);\n    pl(this).o(function (b) {\n      "auth/invalid-cordova-configuration" === b.code && (b = new oh("unknown", null, null, null, new t("no-auth-event")), a(b));\n    });\n  };\n\n  k.Qa = function (a) {\n    Va(this.b, function (b) {\n      return b == a;\n    });\n  };\n\n  function ul(a) {\n    this.a = a;\n    this.b = Ok();\n  }\n\n  var vl = {\n    name: "pendingRedirect",\n    F: "session"\n  };\n\n  function wl(a) {\n    return a.b.set(vl, "pending", a.a);\n  }\n\n  function xl(a) {\n    return Sk(a.b, vl, a.a);\n  }\n\n  function yl(a) {\n    return a.b.get(vl, a.a).then(function (b) {\n      return "pending" == b;\n    });\n  }\n\n  ;\n\n  function zl(a, b, c) {\n    this.i = {};\n    this.w = 0;\n    this.D = a;\n    this.u = b;\n    this.m = c;\n    this.h = [];\n    this.f = !1;\n    this.l = q(this.s, this);\n    this.b = new Al();\n    this.B = new Bl();\n    this.g = new ul(this.u + ":" + this.m);\n    this.c = {};\n    this.c.unknown = this.b;\n    this.c.signInViaRedirect = this.b;\n    this.c.linkViaRedirect = this.b;\n    this.c.reauthViaRedirect = this.b;\n    this.c.signInViaPopup = this.B;\n    this.c.linkViaPopup = this.B;\n    this.c.reauthViaPopup = this.B;\n    this.a = Cl(this.D, this.u, this.m, Ba);\n  }\n\n  function Cl(a, b, c, d) {\n    var e = firebase.SDK_VERSION || null;\n    return De() ? new ll(a, b, c, e, d) : new Sj(a, b, c, e, d);\n  }\n\n  zl.prototype.reset = function () {\n    this.f = !1;\n    this.a.Qa(this.l);\n    this.a = Cl(this.D, this.u, this.m);\n    this.i = {};\n  };\n\n  function Dl(a) {\n    a.f || (a.f = !0, a.a.Ca(a.l));\n    var b = a.a;\n    return a.a.ka().o(function (c) {\n      a.a == b && a.reset();\n      throw c;\n    });\n  }\n\n  function El(a) {\n    a.a.Ub() && Dl(a).o(function (b) {\n      var c = new oh("unknown", null, null, null, new t("operation-not-supported-in-this-environment"));\n      Fl(b) && a.s(c);\n    });\n    a.a.Qb() || Gl(a.b);\n  }\n\n  function Hl(a, b) {\n    Ta(a.h, b) || a.h.push(b);\n    a.f || yl(a.g).then(function (c) {\n      c ? xl(a.g).then(function () {\n        Dl(a).o(function (d) {\n          var e = new oh("unknown", null, null, null, new t("operation-not-supported-in-this-environment"));\n          Fl(d) && a.s(e);\n        });\n      }) : El(a);\n    }).o(function () {\n      El(a);\n    });\n  }\n\n  function Il(a, b) {\n    Va(a.h, function (c) {\n      return c == b;\n    });\n  }\n\n  zl.prototype.s = function (a) {\n    if (!a) throw new t("invalid-auth-event");\n    6E5 <= ua() - this.w && (this.i = {}, this.w = 0);\n    if (a && a.getUid() && this.i.hasOwnProperty(a.getUid())) return !1;\n\n    for (var b = !1, c = 0; c < this.h.length; c++) {\n      var d = this.h[c];\n\n      if (d.Cb(a.c, a.b)) {\n        if (b = this.c[a.c]) b.h(a, d), a && (a.f || a.b) && (this.i[a.getUid()] = !0, this.w = ua());\n        b = !0;\n        break;\n      }\n    }\n\n    Gl(this.b);\n    return b;\n  };\n\n  var Jl = new We(2E3, 1E4),\n      Kl = new We(3E4, 6E4);\n\n  zl.prototype.pa = function () {\n    return this.b.pa();\n  };\n\n  function Ll(a, b, c, d, e, f, g) {\n    return a.a.Jb(b, c, d, function () {\n      a.f || (a.f = !0, a.a.Ca(a.l));\n    }, function () {\n      a.reset();\n    }, e, f, g);\n  }\n\n  function Fl(a) {\n    return a && "auth/cordova-not-ready" == a.code ? !0 : !1;\n  }\n\n  function Ml(a, b, c, d, e) {\n    var f;\n    return wl(a.g).then(function () {\n      return a.a.Kb(b, c, d, e).o(function (g) {\n        if (Fl(g)) throw new t("operation-not-supported-in-this-environment");\n        f = g;\n        return xl(a.g).then(function () {\n          throw f;\n        });\n      }).then(function () {\n        return a.a.Xb() ? new B(function () {}) : xl(a.g).then(function () {\n          return a.pa();\n        }).then(function () {}).o(function () {});\n      });\n    });\n  }\n\n  function Nl(a, b, c, d, e) {\n    return a.a.Lb(d, function (f) {\n      b.la(c, null, f, e);\n    }, Jl.get());\n  }\n\n  var Ol = {};\n\n  function Pl(a, b, c) {\n    var d = b + ":" + c;\n    Ol[d] || (Ol[d] = new zl(a, b, c));\n    return Ol[d];\n  }\n\n  function Al() {\n    this.b = null;\n    this.f = [];\n    this.c = [];\n    this.a = null;\n    this.i = this.g = !1;\n  }\n\n  Al.prototype.reset = function () {\n    this.b = null;\n    this.a && (this.a.cancel(), this.a = null);\n  };\n\n  Al.prototype.h = function (a, b) {\n    if (a) {\n      this.reset();\n      this.g = !0;\n      var c = a.c,\n          d = a.b,\n          e = a.a && "auth/web-storage-unsupported" == a.a.code,\n          f = a.a && "auth/operation-not-supported-in-this-environment" == a.a.code;\n      this.i = !(!e && !f);\n      "unknown" != c || e || f ? a.a ? (Ql(this, !0, null, a.a), D()) : b.Da(c, d) ? Rl(this, a, b) : E(new t("invalid-auth-event")) : (Ql(this, !1, null, null), D());\n    } else E(new t("invalid-auth-event"));\n  };\n\n  function Gl(a) {\n    a.g || (a.g = !0, Ql(a, !1, null, null));\n  }\n\n  function Sl(a) {\n    a.g && !a.i && Ql(a, !1, null, null);\n  }\n\n  function Rl(a, b, c) {\n    c = c.Da(b.c, b.b);\n    var d = b.g,\n        e = b.f,\n        f = b.i,\n        g = b.S(),\n        h = !!b.c.match(/Redirect$/);\n    c(d, e, g, f).then(function (m) {\n      Ql(a, h, m, null);\n    }).o(function (m) {\n      Ql(a, h, null, m);\n    });\n  }\n\n  function Tl(a, b) {\n    a.b = function () {\n      return E(b);\n    };\n\n    if (a.c.length) for (var c = 0; c < a.c.length; c++) a.c[c](b);\n  }\n\n  function Ul(a, b) {\n    a.b = function () {\n      return D(b);\n    };\n\n    if (a.f.length) for (var c = 0; c < a.f.length; c++) a.f[c](b);\n  }\n\n  function Ql(a, b, c, d) {\n    b ? d ? Tl(a, d) : Ul(a, c) : Ul(a, {\n      user: null\n    });\n    a.f = [];\n    a.c = [];\n  }\n\n  Al.prototype.pa = function () {\n    var a = this;\n    return new B(function (b, c) {\n      a.b ? a.b().then(b, c) : (a.f.push(b), a.c.push(c), Vl(a));\n    });\n  };\n\n  function Vl(a) {\n    var b = new t("timeout");\n    a.a && a.a.cancel();\n    a.a = Bd(Kl.get()).then(function () {\n      a.b || (a.g = !0, Ql(a, !0, null, b));\n    });\n  }\n\n  function Bl() {}\n\n  Bl.prototype.h = function (a, b) {\n    if (a) {\n      var c = a.c,\n          d = a.b;\n      a.a ? (b.la(a.c, null, a.a, a.b), D()) : b.Da(c, d) ? Wl(a, b) : E(new t("invalid-auth-event"));\n    } else E(new t("invalid-auth-event"));\n  };\n\n  function Wl(a, b) {\n    var c = a.b,\n        d = a.c;\n    b.Da(d, c)(a.g, a.f, a.S(), a.i).then(function (e) {\n      b.la(d, e, null, c);\n    }).o(function (e) {\n      b.la(d, null, e, c);\n    });\n  }\n\n  ;\n\n  function Xl() {\n    this.Bb = !1;\n    Object.defineProperty(this, "appVerificationDisabled", {\n      get: function () {\n        return this.Bb;\n      },\n      set: function (a) {\n        this.Bb = a;\n      },\n      enumerable: !1\n    });\n  }\n\n  ;\n\n  function Yl(a, b) {\n    this.a = b;\n    K(this, "verificationId", a);\n  }\n\n  Yl.prototype.confirm = function (a) {\n    a = lh(this.verificationId, a);\n    return this.a(a);\n  };\n\n  function Zl(a, b, c, d) {\n    return new hh(a).cb(b, c).then(function (e) {\n      return new Yl(e, d);\n    });\n  }\n\n  ;\n\n  function $l(a) {\n    var b = fg(a);\n    if (!(b && b.exp && b.auth_time && b.iat)) throw new t("internal-error", "An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");\n    L(this, {\n      token: a,\n      expirationTime: Ze(1E3 * b.exp),\n      authTime: Ze(1E3 * b.auth_time),\n      issuedAtTime: Ze(1E3 * b.iat),\n      signInProvider: b.firebase && b.firebase.sign_in_provider ? b.firebase.sign_in_provider : null,\n      signInSecondFactor: b.firebase && b.firebase.sign_in_second_factor ? b.firebase.sign_in_second_factor : null,\n      claims: b\n    });\n  }\n\n  ;\n\n  function am(a, b, c) {\n    var d = b && b[bm];\n    if (!d) throw new t("argument-error", "Internal assert: Invalid MultiFactorResolver");\n    this.a = a;\n    this.f = lb(b);\n    this.g = c;\n    this.c = new vg(null, d);\n    this.b = [];\n    var e = this;\n    w(b[cm] || [], function (f) {\n      (f = qf(f)) && e.b.push(f);\n    });\n    K(this, "auth", this.a);\n    K(this, "session", this.c);\n    K(this, "hints", this.b);\n  }\n\n  var cm = "mfaInfo",\n      bm = "mfaPendingCredential";\n\n  am.prototype.Pc = function (a) {\n    var b = this;\n    return a.ob(this.a.b, this.c).then(function (c) {\n      var d = lb(b.f);\n      delete d[cm];\n      delete d[bm];\n      z(d, c);\n      return b.g(d);\n    });\n  };\n\n  function dm(a, b, c, d) {\n    t.call(this, "multi-factor-auth-required", d, b);\n    this.b = new am(a, b, c);\n    K(this, "resolver", this.b);\n  }\n\n  r(dm, t);\n\n  function em(a, b, c) {\n    if (a && n(a.serverResponse) && "auth/multi-factor-auth-required" === a.code) try {\n      return new dm(b, a.serverResponse, c, a.message);\n    } catch (d) {}\n    return null;\n  }\n\n  ;\n\n  function fm() {}\n\n  fm.prototype.ob = function (a, b, c) {\n    return b.type == wg ? gm(this, a, b, c) : hm(this, a, b);\n  };\n\n  function gm(a, b, c, d) {\n    return c.Fa().then(function (e) {\n      e = {\n        idToken: e\n      };\n      "undefined" !== typeof d && (e.displayName = d);\n      z(e, {\n        phoneVerificationInfo: dh(a.a)\n      });\n      return N(b, Aj, e);\n    });\n  }\n\n  function hm(a, b, c) {\n    return c.Fa().then(function (d) {\n      d = {\n        mfaPendingCredential: d\n      };\n      z(d, {\n        phoneVerificationInfo: dh(a.a)\n      });\n      return N(b, Bj, d);\n    });\n  }\n\n  function im(a) {\n    K(this, "factorId", a.ea);\n    this.a = a;\n  }\n\n  r(im, fm);\n\n  function jm(a) {\n    im.call(this, a);\n    if (this.a.ea != hh.PROVIDER_ID) throw new t("argument-error", "firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential");\n  }\n\n  r(jm, im);\n\n  function km(a, b) {\n    F.call(this, a);\n\n    for (var c in b) this[c] = b[c];\n  }\n\n  r(km, F);\n\n  function lm(a, b) {\n    this.a = a;\n    this.b = [];\n    this.c = q(this.wc, this);\n    jd(this.a, "userReloaded", this.c);\n    var c = [];\n    b && b.multiFactor && b.multiFactor.enrolledFactors && w(b.multiFactor.enrolledFactors, function (d) {\n      var e = null,\n          f = {};\n\n      if (d) {\n        d.uid && (f[nf] = d.uid);\n        d.displayName && (f[of] = d.displayName);\n        d.enrollmentTime && (f[pf] = new Date(d.enrollmentTime).toISOString());\n        d.phoneNumber && (f[mf] = d.phoneNumber);\n\n        try {\n          e = new rf(f);\n        } catch (g) {}\n\n        d = e;\n      } else d = null;\n\n      d && c.push(d);\n    });\n    mm(this, c);\n  }\n\n  function nm(a) {\n    var b = [];\n    w(a.mfaInfo || [], function (c) {\n      (c = qf(c)) && b.push(c);\n    });\n    return b;\n  }\n\n  k = lm.prototype;\n\n  k.wc = function (a) {\n    mm(this, nm(a.ed));\n  };\n\n  function mm(a, b) {\n    a.b = b;\n    K(a, "enrolledFactors", b);\n  }\n\n  k.Ob = function () {\n    return this.a.I().then(function (a) {\n      return new vg(a, null);\n    });\n  };\n\n  k.dc = function (a, b) {\n    var c = this,\n        d = this.a.a;\n    return this.Ob().then(function (e) {\n      return a.ob(d, e, b);\n    }).then(function (e) {\n      om(c.a, e);\n      return c.a.reload();\n    });\n  };\n\n  k.$c = function (a) {\n    var b = this,\n        c = "string" === typeof a ? a : a.uid,\n        d = this.a.a;\n    return this.a.I().then(function (e) {\n      return N(d, Fj, {\n        idToken: e,\n        mfaEnrollmentId: c\n      });\n    }).then(function (e) {\n      var f = Oa(b.b, function (g) {\n        return g.uid != c;\n      });\n      mm(b, f);\n      om(b.a, e);\n      return b.a.reload().o(function (g) {\n        if ("auth/user-token-expired" != g.code) throw g;\n      });\n    });\n  };\n\n  k.v = function () {\n    return {\n      multiFactor: {\n        enrolledFactors: Pa(this.b, function (a) {\n          return a.v();\n        })\n      }\n    };\n  };\n\n  function pm(a, b, c) {\n    this.h = a;\n    this.i = b;\n    this.g = c;\n    this.c = 3E4;\n    this.f = 96E4;\n    this.b = null;\n    this.a = this.c;\n    if (this.f < this.c) throw Error("Proactive refresh lower bound greater than upper bound!");\n  }\n\n  pm.prototype.start = function () {\n    this.a = this.c;\n    qm(this, !0);\n  };\n\n  function rm(a, b) {\n    if (b) return a.a = a.c, a.g();\n    b = a.a;\n    a.a *= 2;\n    a.a > a.f && (a.a = a.f);\n    return b;\n  }\n\n  function qm(a, b) {\n    a.stop();\n    a.b = Bd(rm(a, b)).then(function () {\n      return Ye();\n    }).then(function () {\n      return a.h();\n    }).then(function () {\n      qm(a, !0);\n    }).o(function (c) {\n      a.i(c) && qm(a, !1);\n    });\n  }\n\n  pm.prototype.stop = function () {\n    this.b && (this.b.cancel(), this.b = null);\n  };\n\n  function sm(a) {\n    this.c = a;\n    this.b = this.a = null;\n  }\n\n  sm.prototype.v = function () {\n    return {\n      apiKey: this.c.c,\n      refreshToken: this.a,\n      accessToken: this.b && this.b.toString(),\n      expirationTime: tm(this)\n    };\n  };\n\n  function tm(a) {\n    return a.b && 1E3 * a.b.c || 0;\n  }\n\n  function um(a, b) {\n    var c = b.refreshToken;\n    a.b = gg(b[Ag] || "");\n    a.a = c;\n  }\n\n  function vm(a, b) {\n    a.b = b.b;\n    a.a = b.a;\n  }\n\n  function wm(a, b) {\n    return Qi(a.c, b).then(function (c) {\n      a.b = gg(c.access_token);\n      a.a = c.refresh_token;\n      return {\n        accessToken: a.b.toString(),\n        refreshToken: a.a\n      };\n    }).o(function (c) {\n      "auth/user-token-expired" == c.code && (a.a = null);\n      throw c;\n    });\n  }\n\n  sm.prototype.getToken = function (a) {\n    a = !!a;\n    return this.b && !this.a ? E(new t("user-token-expired")) : a || !this.b || ua() > tm(this) - 3E4 ? this.a ? wm(this, {\n      grant_type: "refresh_token",\n      refresh_token: this.a\n    }) : D(null) : D({\n      accessToken: this.b.toString(),\n      refreshToken: this.a\n    });\n  };\n\n  function xm(a, b) {\n    this.a = a || null;\n    this.b = b || null;\n    L(this, {\n      lastSignInTime: Ze(b || null),\n      creationTime: Ze(a || null)\n    });\n  }\n\n  function ym(a) {\n    return new xm(a.a, a.b);\n  }\n\n  xm.prototype.v = function () {\n    return {\n      lastLoginAt: this.b,\n      createdAt: this.a\n    };\n  };\n\n  function zm(a, b, c, d, e, f) {\n    L(this, {\n      uid: a,\n      displayName: d || null,\n      photoURL: e || null,\n      email: c || null,\n      phoneNumber: f || null,\n      providerId: b\n    });\n  }\n\n  function P(a, b, c) {\n    this.N = [];\n    this.l = a.apiKey;\n    this.m = a.appName;\n    this.s = a.authDomain || null;\n    a = firebase.SDK_VERSION ? Le(firebase.SDK_VERSION) : null;\n    this.a = new Ei(this.l, Aa(Ba), a);\n    this.b = new sm(this.a);\n    Am(this, b[Ag]);\n    um(this.b, b);\n    K(this, "refreshToken", this.b.a);\n    Bm(this, c || {});\n    G.call(this);\n    this.P = !1;\n    this.s && Oe() && (this.i = Pl(this.s, this.l, this.m));\n    this.R = [];\n    this.h = null;\n    this.B = Cm(this);\n    this.Z = q(this.Ma, this);\n    var d = this;\n    this.oa = null;\n\n    this.za = function (e) {\n      d.va(e.g);\n    };\n\n    this.aa = null;\n    this.W = [];\n\n    this.ya = function (e) {\n      Dm(d, e.c);\n    };\n\n    this.$ = null;\n    this.O = new lm(this, c);\n    K(this, "multiFactor", this.O);\n  }\n\n  r(P, G);\n\n  P.prototype.va = function (a) {\n    this.oa = a;\n    Ki(this.a, a);\n  };\n\n  P.prototype.ja = function () {\n    return this.oa;\n  };\n\n  function Em(a, b) {\n    a.aa && td(a.aa, "languageCodeChanged", a.za);\n    (a.aa = b) && jd(b, "languageCodeChanged", a.za);\n  }\n\n  function Dm(a, b) {\n    a.W = b;\n    Li(a.a, firebase.SDK_VERSION ? Le(firebase.SDK_VERSION, a.W) : null);\n  }\n\n  P.prototype.Ea = function () {\n    return Xa(this.W);\n  };\n\n  function Fm(a, b) {\n    a.$ && td(a.$, "frameworkChanged", a.ya);\n    (a.$ = b) && jd(b, "frameworkChanged", a.ya);\n  }\n\n  P.prototype.Ma = function () {\n    this.B.b && (this.B.stop(), this.B.start());\n  };\n\n  function Gm(a) {\n    try {\n      return firebase.app(a.m).auth();\n    } catch (b) {\n      throw new t("internal-error", "No firebase.auth.Auth instance is available for the Firebase App \'" + a.m + "\'!");\n    }\n  }\n\n  function Cm(a) {\n    return new pm(function () {\n      return a.I(!0);\n    }, function (b) {\n      return b && "auth/network-request-failed" == b.code ? !0 : !1;\n    }, function () {\n      var b = tm(a.b) - ua() - 3E5;\n      return 0 < b ? b : 0;\n    });\n  }\n\n  function Hm(a) {\n    a.D || a.B.b || (a.B.start(), td(a, "tokenChanged", a.Z), jd(a, "tokenChanged", a.Z));\n  }\n\n  function Im(a) {\n    td(a, "tokenChanged", a.Z);\n    a.B.stop();\n  }\n\n  function Am(a, b) {\n    a.xa = b;\n    K(a, "_lat", b);\n  }\n\n  function Jm(a, b) {\n    Va(a.R, function (c) {\n      return c == b;\n    });\n  }\n\n  function Km(a) {\n    for (var b = [], c = 0; c < a.R.length; c++) b.push(a.R[c](a));\n\n    return Fc(b).then(function () {\n      return a;\n    });\n  }\n\n  function Lm(a) {\n    a.i && !a.P && (a.P = !0, Hl(a.i, a));\n  }\n\n  function Bm(a, b) {\n    L(a, {\n      uid: b.uid,\n      displayName: b.displayName || null,\n      photoURL: b.photoURL || null,\n      email: b.email || null,\n      emailVerified: b.emailVerified || !1,\n      phoneNumber: b.phoneNumber || null,\n      isAnonymous: b.isAnonymous || !1,\n      tenantId: b.tenantId || null,\n      metadata: new xm(b.createdAt, b.lastLoginAt),\n      providerData: []\n    });\n    a.a.b = a.tenantId;\n  }\n\n  K(P.prototype, "providerId", "firebase");\n\n  function Mm() {}\n\n  function Nm(a) {\n    return D().then(function () {\n      if (a.D) throw new t("app-deleted");\n    });\n  }\n\n  function Om(a) {\n    return Pa(a.providerData, function (b) {\n      return b.providerId;\n    });\n  }\n\n  function Pm(a, b) {\n    b && (Qm(a, b.providerId), a.providerData.push(b));\n  }\n\n  function Qm(a, b) {\n    Va(a.providerData, function (c) {\n      return c.providerId == b;\n    });\n  }\n\n  function Rm(a, b, c) {\n    ("uid" != b || c) && a.hasOwnProperty(b) && K(a, b, c);\n  }\n\n  function Sm(a, b) {\n    a != b && (L(a, {\n      uid: b.uid,\n      displayName: b.displayName,\n      photoURL: b.photoURL,\n      email: b.email,\n      emailVerified: b.emailVerified,\n      phoneNumber: b.phoneNumber,\n      isAnonymous: b.isAnonymous,\n      tenantId: b.tenantId,\n      providerData: []\n    }), b.metadata ? K(a, "metadata", ym(b.metadata)) : K(a, "metadata", new xm()), w(b.providerData, function (c) {\n      Pm(a, c);\n    }), vm(a.b, b.b), K(a, "refreshToken", a.b.a), mm(a.O, b.O.b));\n  }\n\n  k = P.prototype;\n\n  k.reload = function () {\n    var a = this;\n    return R(this, Nm(this).then(function () {\n      return Tm(a).then(function () {\n        return Km(a);\n      }).then(Mm);\n    }));\n  };\n\n  function Tm(a) {\n    return a.I().then(function (b) {\n      var c = a.isAnonymous;\n      return Um(a, b).then(function () {\n        c || Rm(a, "isAnonymous", !1);\n        return b;\n      });\n    });\n  }\n\n  k.mc = function (a) {\n    return this.I(a).then(function (b) {\n      return new $l(b);\n    });\n  };\n\n  k.I = function (a) {\n    var b = this;\n    return R(this, Nm(this).then(function () {\n      return b.b.getToken(a);\n    }).then(function (c) {\n      if (!c) throw new t("internal-error");\n      c.accessToken != b.xa && (Am(b, c.accessToken), b.dispatchEvent(new km("tokenChanged")));\n      Rm(b, "refreshToken", c.refreshToken);\n      return c.accessToken;\n    }));\n  };\n\n  function om(a, b) {\n    b[Ag] && a.xa != b[Ag] && (um(a.b, b), a.dispatchEvent(new km("tokenChanged")), Am(a, b[Ag]), Rm(a, "refreshToken", a.b.a));\n  }\n\n  function Um(a, b) {\n    return N(a.a, Cj, {\n      idToken: b\n    }).then(q(a.Ic, a));\n  }\n\n  k.Ic = function (a) {\n    a = a.users;\n    if (!a || !a.length) throw new t("internal-error");\n    a = a[0];\n    Bm(this, {\n      uid: a.localId,\n      displayName: a.displayName,\n      photoURL: a.photoUrl,\n      email: a.email,\n      emailVerified: !!a.emailVerified,\n      phoneNumber: a.phoneNumber,\n      lastLoginAt: a.lastLoginAt,\n      createdAt: a.createdAt,\n      tenantId: a.tenantId\n    });\n\n    for (var b = Vm(a), c = 0; c < b.length; c++) Pm(this, b[c]);\n\n    Rm(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));\n    this.dispatchEvent(new km("userReloaded", {\n      ed: a\n    }));\n  };\n\n  function Vm(a) {\n    return (a = a.providerUserInfo) && a.length ? Pa(a, function (b) {\n      return new zm(b.rawId, b.providerId, b.email, b.displayName, b.photoUrl, b.phoneNumber);\n    }) : [];\n  }\n\n  k.Jc = function (a) {\n    df("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");\n    return this.pb(a);\n  };\n\n  k.pb = function (a) {\n    var b = this,\n        c = null;\n    return R(this, a.c(this.a, this.uid).then(function (d) {\n      om(b, d);\n      c = Wm(b, d, "reauthenticate");\n      b.h = null;\n      return b.reload();\n    }).then(function () {\n      return c;\n    }), !0);\n  };\n\n  function Xm(a, b) {\n    return Tm(a).then(function () {\n      if (Ta(Om(a), b)) return Km(a).then(function () {\n        throw new t("provider-already-linked");\n      });\n    });\n  }\n\n  k.Ac = function (a) {\n    df("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");\n    return this.mb(a);\n  };\n\n  k.mb = function (a) {\n    var b = this,\n        c = null;\n    return R(this, Xm(this, a.providerId).then(function () {\n      return b.I();\n    }).then(function (d) {\n      return a.b(b.a, d);\n    }).then(function (d) {\n      c = Wm(b, d, "link");\n      return Ym(b, d);\n    }).then(function () {\n      return c;\n    }));\n  };\n\n  k.Bc = function (a, b) {\n    var c = this;\n    return R(this, Xm(this, "phone").then(function () {\n      return Zl(Gm(c), a, b, q(c.mb, c));\n    }));\n  };\n\n  k.Kc = function (a, b) {\n    var c = this;\n    return R(this, D().then(function () {\n      return Zl(Gm(c), a, b, q(c.pb, c));\n    }), !0);\n  };\n\n  function Wm(a, b, c) {\n    var d = mh(b);\n    b = lg(b);\n    return gf({\n      user: a,\n      credential: d,\n      additionalUserInfo: b,\n      operationType: c\n    });\n  }\n\n  function Ym(a, b) {\n    om(a, b);\n    return a.reload().then(function () {\n      return a;\n    });\n  }\n\n  k.xb = function (a) {\n    var b = this;\n    return R(this, this.I().then(function (c) {\n      return b.a.xb(c, a);\n    }).then(function (c) {\n      om(b, c);\n      return b.reload();\n    }));\n  };\n\n  k.cd = function (a) {\n    var b = this;\n    return R(this, this.I().then(function (c) {\n      return a.b(b.a, c);\n    }).then(function (c) {\n      om(b, c);\n      return b.reload();\n    }));\n  };\n\n  k.yb = function (a) {\n    var b = this;\n    return R(this, this.I().then(function (c) {\n      return b.a.yb(c, a);\n    }).then(function (c) {\n      om(b, c);\n      return b.reload();\n    }));\n  };\n\n  k.zb = function (a) {\n    if (void 0 === a.displayName && void 0 === a.photoURL) return Nm(this);\n    var b = this;\n    return R(this, this.I().then(function (c) {\n      return b.a.zb(c, {\n        displayName: a.displayName,\n        photoUrl: a.photoURL\n      });\n    }).then(function (c) {\n      om(b, c);\n      Rm(b, "displayName", c.displayName || null);\n      Rm(b, "photoURL", c.photoUrl || null);\n      w(b.providerData, function (d) {\n        "password" === d.providerId && (K(d, "displayName", b.displayName), K(d, "photoURL", b.photoURL));\n      });\n      return Km(b);\n    }).then(Mm));\n  };\n\n  k.ad = function (a) {\n    var b = this;\n    return R(this, Tm(this).then(function (c) {\n      return Ta(Om(b), a) ? lj(b.a, c, [a]).then(function (d) {\n        var e = {};\n        w(d.providerUserInfo || [], function (f) {\n          e[f.providerId] = !0;\n        });\n        w(Om(b), function (f) {\n          e[f] || Qm(b, f);\n        });\n        e[hh.PROVIDER_ID] || K(b, "phoneNumber", null);\n        return Km(b);\n      }) : Km(b).then(function () {\n        throw new t("no-such-provider");\n      });\n    }));\n  };\n\n  k.delete = function () {\n    var a = this;\n    return R(this, this.I().then(function (b) {\n      return N(a.a, zj, {\n        idToken: b\n      });\n    }).then(function () {\n      a.dispatchEvent(new km("userDeleted"));\n    })).then(function () {\n      for (var b = 0; b < a.N.length; b++) a.N[b].cancel("app-deleted");\n\n      Em(a, null);\n      Fm(a, null);\n      a.N = [];\n      a.D = !0;\n      Im(a);\n      K(a, "refreshToken", null);\n      a.i && Il(a.i, a);\n    });\n  };\n\n  k.Cb = function (a, b) {\n    return "linkViaPopup" == a && (this.g || null) == b && this.f || "reauthViaPopup" == a && (this.g || null) == b && this.f || "linkViaRedirect" == a && (this.fa || null) == b || "reauthViaRedirect" == a && (this.fa || null) == b ? !0 : !1;\n  };\n\n  k.la = function (a, b, c, d) {\n    "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.g || null) || (c && this.w ? this.w(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.w);\n  };\n\n  k.Da = function (a, b) {\n    return "linkViaPopup" == a && b == (this.g || null) ? q(this.Hb, this) : "reauthViaPopup" == a && b == (this.g || null) ? q(this.Ib, this) : "linkViaRedirect" == a && (this.fa || null) == b ? q(this.Hb, this) : "reauthViaRedirect" == a && (this.fa || null) == b ? q(this.Ib, this) : null;\n  };\n\n  k.Cc = function (a) {\n    var b = this;\n    return Zm(this, "linkViaPopup", a, function () {\n      return Xm(b, a.providerId).then(function () {\n        return Km(b);\n      });\n    }, !1);\n  };\n\n  k.Lc = function (a) {\n    return Zm(this, "reauthViaPopup", a, function () {\n      return D();\n    }, !0);\n  };\n\n  function Zm(a, b, c, d, e) {\n    if (!Oe()) return E(new t("operation-not-supported-in-this-environment"));\n    if (a.h && !e) return E(a.h);\n    var f = kg(c.providerId),\n        g = Ne(a.uid + ":::"),\n        h = null;\n    (!Qe() || Fe()) && a.s && c.isOAuthProvider && (h = Yj(a.s, a.l, a.m, b, c, null, g, firebase.SDK_VERSION || null, null, null, a.tenantId));\n    var m = we(h, f && f.ta, f && f.sa);\n    d = d().then(function () {\n      $m(a);\n      if (!e) return a.I().then(function () {});\n    }).then(function () {\n      return Ll(a.i, m, b, c, g, !!h, a.tenantId);\n    }).then(function () {\n      return new B(function (p, v) {\n        a.la(b, null, new t("cancelled-popup-request"), a.g || null);\n        a.f = p;\n        a.w = v;\n        a.g = g;\n        a.c = Nl(a.i, a, b, m, g);\n      });\n    }).then(function (p) {\n      m && ve(m);\n      return p ? gf(p) : null;\n    }).o(function (p) {\n      m && ve(m);\n      throw p;\n    });\n    return R(a, d, e);\n  }\n\n  k.Dc = function (a) {\n    var b = this;\n    return an(this, "linkViaRedirect", a, function () {\n      return Xm(b, a.providerId);\n    }, !1);\n  };\n\n  k.Mc = function (a) {\n    return an(this, "reauthViaRedirect", a, function () {\n      return D();\n    }, !0);\n  };\n\n  function an(a, b, c, d, e) {\n    if (!Oe()) return E(new t("operation-not-supported-in-this-environment"));\n    if (a.h && !e) return E(a.h);\n    var f = null,\n        g = Ne(a.uid + ":::");\n    d = d().then(function () {\n      $m(a);\n      if (!e) return a.I().then(function () {});\n    }).then(function () {\n      a.fa = g;\n      return Km(a);\n    }).then(function (h) {\n      a.ga && (h = a.ga, h = h.b.set(bn, a.v(), h.a));\n      return h;\n    }).then(function () {\n      return Ml(a.i, b, c, g, a.tenantId);\n    }).o(function (h) {\n      f = h;\n      if (a.ga) return cn(a.ga);\n      throw f;\n    }).then(function () {\n      if (f) throw f;\n    });\n    return R(a, d, e);\n  }\n\n  function $m(a) {\n    if (!a.i || !a.P) {\n      if (a.i && !a.P) throw new t("internal-error");\n      throw new t("auth-domain-config-required");\n    }\n  }\n\n  k.Hb = function (a, b, c, d) {\n    var e = this;\n    this.c && (this.c.cancel(), this.c = null);\n    var f = null;\n    c = this.I().then(function (g) {\n      return Eg(e.a, {\n        requestUri: a,\n        postBody: d,\n        sessionId: b,\n        idToken: g\n      });\n    }).then(function (g) {\n      f = Wm(e, g, "link");\n      return Ym(e, g);\n    }).then(function () {\n      return f;\n    });\n    return R(this, c);\n  };\n\n  k.Ib = function (a, b, c, d) {\n    var e = this;\n    this.c && (this.c.cancel(), this.c = null);\n    var f = null,\n        g = D().then(function () {\n      return zg(Fg(e.a, {\n        requestUri: a,\n        sessionId: b,\n        postBody: d,\n        tenantId: c\n      }), e.uid);\n    }).then(function (h) {\n      f = Wm(e, h, "reauthenticate");\n      om(e, h);\n      e.h = null;\n      return e.reload();\n    }).then(function () {\n      return f;\n    });\n    return R(this, g, !0);\n  };\n\n  k.qb = function (a) {\n    var b = this,\n        c = null;\n    return R(this, this.I().then(function (d) {\n      c = d;\n      return "undefined" === typeof a || kb(a) ? {} : Zf(new Pf(a));\n    }).then(function (d) {\n      return b.a.qb(c, d);\n    }).then(function (d) {\n      if (b.email != d) return b.reload();\n    }).then(function () {}));\n  };\n\n  k.Ab = function (a, b) {\n    var c = this,\n        d = null;\n    return R(this, this.I().then(function (e) {\n      d = e;\n      return "undefined" === typeof b || kb(b) ? {} : Zf(new Pf(b));\n    }).then(function (e) {\n      return c.a.Ab(d, a, e);\n    }).then(function (e) {\n      if (c.email != e) return c.reload();\n    }).then(function () {}));\n  };\n\n  function R(a, b, c) {\n    var d = dn(a, b, c);\n    a.N.push(d);\n    d.ma(function () {\n      Ua(a.N, d);\n    });\n    return d.o(function (e) {\n      var f = null;\n      e && "auth/multi-factor-auth-required" === e.code && (f = em(e.v(), Gm(a), q(a.hc, a)));\n      throw f || e;\n    });\n  }\n\n  k.hc = function (a) {\n    var b = null,\n        c = this;\n    a = zg(D(a), c.uid).then(function (d) {\n      b = Wm(c, d, "reauthenticate");\n      om(c, d);\n      c.h = null;\n      return c.reload();\n    }).then(function () {\n      return b;\n    });\n    return R(this, a, !0);\n  };\n\n  function dn(a, b, c) {\n    return a.h && !c ? (b.cancel(), E(a.h)) : b.o(function (d) {\n      !d || "auth/user-disabled" != d.code && "auth/user-token-expired" != d.code || (a.h || a.dispatchEvent(new km("userInvalidated")), a.h = d);\n      throw d;\n    });\n  }\n\n  k.toJSON = function () {\n    return this.v();\n  };\n\n  k.v = function () {\n    var a = {\n      uid: this.uid,\n      displayName: this.displayName,\n      photoURL: this.photoURL,\n      email: this.email,\n      emailVerified: this.emailVerified,\n      phoneNumber: this.phoneNumber,\n      isAnonymous: this.isAnonymous,\n      tenantId: this.tenantId,\n      providerData: [],\n      apiKey: this.l,\n      appName: this.m,\n      authDomain: this.s,\n      stsTokenManager: this.b.v(),\n      redirectEventId: this.fa || null\n    };\n    this.metadata && z(a, this.metadata.v());\n    w(this.providerData, function (b) {\n      a.providerData.push(hf(b));\n    });\n    z(a, this.O.v());\n    return a;\n  };\n\n  function en(a) {\n    if (!a.apiKey) return null;\n    var b = {\n      apiKey: a.apiKey,\n      authDomain: a.authDomain,\n      appName: a.appName\n    },\n        c = {};\n    if (a.stsTokenManager && a.stsTokenManager.accessToken) c[Ag] = a.stsTokenManager.accessToken, c.refreshToken = a.stsTokenManager.refreshToken || null;else return null;\n    var d = new P(b, c, a);\n    a.providerData && w(a.providerData, function (e) {\n      e && Pm(d, gf(e));\n    });\n    a.redirectEventId && (d.fa = a.redirectEventId);\n    return d;\n  }\n\n  function fn(a, b, c, d) {\n    var e = new P(a, b);\n    c && (e.ga = c);\n    d && Dm(e, d);\n    return e.reload().then(function () {\n      return e;\n    });\n  }\n\n  function gn(a, b, c, d) {\n    var e = a.b,\n        f = {};\n    f[Ag] = e.b && e.b.toString();\n    f.refreshToken = e.a;\n    b = new P(b || {\n      apiKey: a.l,\n      authDomain: a.s,\n      appName: a.m\n    }, f);\n    c && (b.ga = c);\n    d && Dm(b, d);\n    Sm(b, a);\n    return b;\n  }\n\n  ;\n\n  function hn(a) {\n    this.a = a;\n    this.b = Ok();\n  }\n\n  var bn = {\n    name: "redirectUser",\n    F: "session"\n  };\n\n  function cn(a) {\n    return Sk(a.b, bn, a.a);\n  }\n\n  function jn(a, b) {\n    return a.b.get(bn, a.a).then(function (c) {\n      c && b && (c.authDomain = b);\n      return en(c || {});\n    });\n  }\n\n  ;\n\n  function kn(a) {\n    this.a = a;\n    this.b = Ok();\n    this.c = null;\n    this.f = ln(this);\n    this.b.addListener(mn("local"), this.a, q(this.g, this));\n  }\n\n  kn.prototype.g = function () {\n    var a = this,\n        b = mn("local");\n    nn(this, function () {\n      return D().then(function () {\n        return a.c && "local" != a.c.F ? a.b.get(b, a.a) : null;\n      }).then(function (c) {\n        if (c) return on(a, "local").then(function () {\n          a.c = b;\n        });\n      });\n    });\n  };\n\n  function on(a, b) {\n    var c = [],\n        d;\n\n    for (d in Kk) Kk[d] !== b && c.push(Sk(a.b, mn(Kk[d]), a.a));\n\n    c.push(Sk(a.b, pn, a.a));\n    return Ec(c);\n  }\n\n  function ln(a) {\n    var b = mn("local"),\n        c = mn("session"),\n        d = mn("none");\n    return Rk(a.b, b, a.a).then(function () {\n      return a.b.get(c, a.a);\n    }).then(function (e) {\n      return e ? c : a.b.get(d, a.a).then(function (f) {\n        return f ? d : a.b.get(b, a.a).then(function (g) {\n          return g ? b : a.b.get(pn, a.a).then(function (h) {\n            return h ? mn(h) : b;\n          });\n        });\n      });\n    }).then(function (e) {\n      a.c = e;\n      return on(a, e.F);\n    }).o(function () {\n      a.c || (a.c = b);\n    });\n  }\n\n  var pn = {\n    name: "persistence",\n    F: "session"\n  };\n\n  function mn(a) {\n    return {\n      name: "authUser",\n      F: a\n    };\n  }\n\n  kn.prototype.tb = function (a) {\n    var b = null,\n        c = this;\n    Lk(a);\n    return nn(this, function () {\n      return a != c.c.F ? c.b.get(c.c, c.a).then(function (d) {\n        b = d;\n        return on(c, a);\n      }).then(function () {\n        c.c = mn(a);\n        if (b) return c.b.set(c.c, b, c.a);\n      }) : D();\n    });\n  };\n\n  function qn(a) {\n    return nn(a, function () {\n      return a.b.set(pn, a.c.F, a.a);\n    });\n  }\n\n  function rn(a, b) {\n    return nn(a, function () {\n      return a.b.set(a.c, b.v(), a.a);\n    });\n  }\n\n  function sn(a) {\n    return nn(a, function () {\n      return Sk(a.b, a.c, a.a);\n    });\n  }\n\n  function tn(a, b) {\n    return nn(a, function () {\n      return a.b.get(a.c, a.a).then(function (c) {\n        c && b && (c.authDomain = b);\n        return en(c || {});\n      });\n    });\n  }\n\n  function nn(a, b) {\n    a.f = a.f.then(b, b);\n    return a.f;\n  }\n\n  ;\n\n  function un(a) {\n    this.l = !1;\n    K(this, "settings", new Xl());\n    K(this, "app", a);\n    if (S(this).options && S(this).options.apiKey) a = firebase.SDK_VERSION ? Le(firebase.SDK_VERSION) : null, this.b = new Ei(S(this).options && S(this).options.apiKey, Aa(Ba), a);else throw new t("invalid-api-key");\n    this.P = [];\n    this.m = [];\n    this.O = [];\n    this.$b = firebase.INTERNAL.createSubscribe(q(this.xc, this));\n    this.W = void 0;\n    this.ac = firebase.INTERNAL.createSubscribe(q(this.yc, this));\n    vn(this, null);\n    this.i = new kn(S(this).options.apiKey + ":" + S(this).name);\n    this.B = new hn(S(this).options.apiKey + ":" + S(this).name);\n    this.Z = T(this, wn(this));\n    this.h = T(this, xn(this));\n    this.aa = !1;\n    this.oa = q(this.Xc, this);\n    this.Ma = q(this.ca, this);\n    this.xa = q(this.jc, this);\n    this.ya = q(this.uc, this);\n    this.za = q(this.vc, this);\n    this.a = null;\n    yn(this);\n    this.INTERNAL = {};\n    this.INTERNAL["delete"] = q(this.delete, this);\n    this.INTERNAL.logFramework = q(this.Ec, this);\n    this.s = 0;\n    G.call(this);\n    zn(this);\n    this.N = [];\n  }\n\n  r(un, G);\n\n  function An(a) {\n    F.call(this, "languageCodeChanged");\n    this.g = a;\n  }\n\n  r(An, F);\n\n  function Bn(a) {\n    F.call(this, "frameworkChanged");\n    this.c = a;\n  }\n\n  r(Bn, F);\n  k = un.prototype;\n\n  k.tb = function (a) {\n    a = this.i.tb(a);\n    return T(this, a);\n  };\n\n  k.va = function (a) {\n    this.$ === a || this.l || (this.$ = a, Ki(this.b, this.$), this.dispatchEvent(new An(this.ja())));\n  };\n\n  k.ja = function () {\n    return this.$;\n  };\n\n  k.dd = function () {\n    var a = l.navigator;\n    this.va(a ? a.languages && a.languages[0] || a.language || a.userLanguage || null : null);\n  };\n\n  k.Ec = function (a) {\n    this.N.push(a);\n    Li(this.b, firebase.SDK_VERSION ? Le(firebase.SDK_VERSION, this.N) : null);\n    this.dispatchEvent(new Bn(this.N));\n  };\n\n  k.Ea = function () {\n    return Xa(this.N);\n  };\n\n  k.ub = function (a) {\n    this.R === a || this.l || (this.R = a, this.b.b = this.R);\n  };\n\n  k.S = function () {\n    return this.R;\n  };\n\n  function zn(a) {\n    Object.defineProperty(a, "lc", {\n      get: function () {\n        return this.ja();\n      },\n      set: function (b) {\n        this.va(b);\n      },\n      enumerable: !1\n    });\n    a.$ = null;\n    Object.defineProperty(a, "ti", {\n      get: function () {\n        return this.S();\n      },\n      set: function (b) {\n        this.ub(b);\n      },\n      enumerable: !1\n    });\n    a.R = null;\n  }\n\n  k.toJSON = function () {\n    return {\n      apiKey: S(this).options.apiKey,\n      authDomain: S(this).options.authDomain,\n      appName: S(this).name,\n      currentUser: U(this) && U(this).v()\n    };\n  };\n\n  function Cn(a) {\n    return a.Zb || E(new t("auth-domain-config-required"));\n  }\n\n  function yn(a) {\n    var b = S(a).options.authDomain,\n        c = S(a).options.apiKey;\n    b && Oe() && (a.Zb = a.Z.then(function () {\n      if (!a.l) {\n        a.a = Pl(b, c, S(a).name);\n        Hl(a.a, a);\n        U(a) && Lm(U(a));\n\n        if (a.D) {\n          Lm(a.D);\n          var d = a.D;\n          d.va(a.ja());\n          Em(d, a);\n          d = a.D;\n          Dm(d, a.N);\n          Fm(d, a);\n          a.D = null;\n        }\n\n        return a.a;\n      }\n    }));\n  }\n\n  k.Cb = function (a, b) {\n    switch (a) {\n      case "unknown":\n      case "signInViaRedirect":\n        return !0;\n\n      case "signInViaPopup":\n        return this.g == b && !!this.f;\n\n      default:\n        return !1;\n    }\n  };\n\n  k.la = function (a, b, c, d) {\n    "signInViaPopup" == a && this.g == d && (c && this.w ? this.w(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.w);\n  };\n\n  k.Da = function (a, b) {\n    return "signInViaRedirect" == a || "signInViaPopup" == a && this.g == b && this.f ? q(this.gc, this) : null;\n  };\n\n  k.gc = function (a, b, c, d) {\n    var e = this,\n        f = {\n      requestUri: a,\n      postBody: d,\n      sessionId: b,\n      tenantId: c\n    };\n    this.c && (this.c.cancel(), this.c = null);\n    return e.Z.then(function () {\n      return Dn(e, Cg(e.b, f));\n    });\n  };\n\n  k.Vc = function (a) {\n    if (!Oe()) return E(new t("operation-not-supported-in-this-environment"));\n    var b = this,\n        c = kg(a.providerId),\n        d = Ne(),\n        e = null;\n    (!Qe() || Fe()) && S(this).options.authDomain && a.isOAuthProvider && (e = Yj(S(this).options.authDomain, S(this).options.apiKey, S(this).name, "signInViaPopup", a, null, d, firebase.SDK_VERSION || null, null, null, this.S()));\n    var f = we(e, c && c.ta, c && c.sa);\n    c = Cn(this).then(function (g) {\n      return Ll(g, f, "signInViaPopup", a, d, !!e, b.S());\n    }).then(function () {\n      return new B(function (g, h) {\n        b.la("signInViaPopup", null, new t("cancelled-popup-request"), b.g);\n        b.f = g;\n        b.w = h;\n        b.g = d;\n        b.c = Nl(b.a, b, "signInViaPopup", f, d);\n      });\n    }).then(function (g) {\n      f && ve(f);\n      return g ? gf(g) : null;\n    }).o(function (g) {\n      f && ve(f);\n      throw g;\n    });\n    return T(this, c);\n  };\n\n  k.Wc = function (a) {\n    if (!Oe()) return E(new t("operation-not-supported-in-this-environment"));\n    var b = this,\n        c = Cn(this).then(function () {\n      return qn(b.i);\n    }).then(function () {\n      return Ml(b.a, "signInViaRedirect", a, void 0, b.S());\n    });\n    return T(this, c);\n  };\n\n  function En(a) {\n    if (!Oe()) return E(new t("operation-not-supported-in-this-environment"));\n    var b = Cn(a).then(function () {\n      return a.a.pa();\n    }).then(function (c) {\n      return c ? gf(c) : null;\n    });\n    return T(a, b);\n  }\n\n  k.pa = function () {\n    var a = this;\n    return En(this).then(function (b) {\n      a.a && Sl(a.a.b);\n      return b;\n    }).o(function (b) {\n      a.a && Sl(a.a.b);\n      throw b;\n    });\n  };\n\n  k.bd = function (a) {\n    if (!a) return E(new t("null-user"));\n    if (this.R != a.tenantId) return E(new t("tenant-id-mismatch"));\n    var b = this,\n        c = {};\n    c.apiKey = S(this).options.apiKey;\n    c.authDomain = S(this).options.authDomain;\n    c.appName = S(this).name;\n    var d = gn(a, c, b.B, b.Ea());\n    return T(this, this.h.then(function () {\n      if (S(b).options.apiKey != a.l) return d.reload();\n    }).then(function () {\n      if (U(b) && a.uid == U(b).uid) return Sm(U(b), a), b.ca(a);\n      vn(b, d);\n      Lm(d);\n      return b.ca(d);\n    }).then(function () {\n      Fn(b);\n    }));\n  };\n\n  function Gn(a, b) {\n    var c = {};\n    c.apiKey = S(a).options.apiKey;\n    c.authDomain = S(a).options.authDomain;\n    c.appName = S(a).name;\n    return a.Z.then(function () {\n      return fn(c, b, a.B, a.Ea());\n    }).then(function (d) {\n      if (U(a) && d.uid == U(a).uid) return Sm(U(a), d), a.ca(d);\n      vn(a, d);\n      Lm(d);\n      return a.ca(d);\n    }).then(function () {\n      Fn(a);\n    });\n  }\n\n  function vn(a, b) {\n    U(a) && (Jm(U(a), a.Ma), td(U(a), "tokenChanged", a.xa), td(U(a), "userDeleted", a.ya), td(U(a), "userInvalidated", a.za), Im(U(a)));\n    b && (b.R.push(a.Ma), jd(b, "tokenChanged", a.xa), jd(b, "userDeleted", a.ya), jd(b, "userInvalidated", a.za), 0 < a.s && Hm(b));\n    K(a, "currentUser", b);\n    b && (b.va(a.ja()), Em(b, a), Dm(b, a.N), Fm(b, a));\n  }\n\n  k.wb = function () {\n    var a = this,\n        b = this.h.then(function () {\n      a.a && Sl(a.a.b);\n      if (!U(a)) return D();\n      vn(a, null);\n      return sn(a.i).then(function () {\n        Fn(a);\n      });\n    });\n    return T(this, b);\n  };\n\n  function Hn(a) {\n    var b = jn(a.B, S(a).options.authDomain).then(function (c) {\n      if (a.D = c) c.ga = a.B;\n      return cn(a.B);\n    });\n    return T(a, b);\n  }\n\n  function wn(a) {\n    var b = S(a).options.authDomain,\n        c = Hn(a).then(function () {\n      return tn(a.i, b);\n    }).then(function (d) {\n      return d ? (d.ga = a.B, a.D && (a.D.fa || null) == (d.fa || null) ? d : d.reload().then(function () {\n        return rn(a.i, d).then(function () {\n          return d;\n        });\n      }).o(function (e) {\n        return "auth/network-request-failed" == e.code ? d : sn(a.i);\n      })) : null;\n    }).then(function (d) {\n      vn(a, d || null);\n    });\n    return T(a, c);\n  }\n\n  function xn(a) {\n    return a.Z.then(function () {\n      return En(a);\n    }).o(function () {}).then(function () {\n      if (!a.l) return a.oa();\n    }).o(function () {}).then(function () {\n      if (!a.l) {\n        a.aa = !0;\n        var b = a.i;\n        b.b.addListener(mn("local"), b.a, a.oa);\n      }\n    });\n  }\n\n  k.Xc = function () {\n    var a = this;\n    return tn(this.i, S(this).options.authDomain).then(function (b) {\n      if (!a.l) {\n        var c;\n\n        if (c = U(a) && b) {\n          c = U(a).uid;\n          var d = b.uid;\n          c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? !1 : c == d;\n        }\n\n        if (c) return Sm(U(a), b), U(a).I();\n        if (U(a) || b) vn(a, b), b && (Lm(b), b.ga = a.B), a.a && Hl(a.a, a), Fn(a);\n      }\n    });\n  };\n\n  k.ca = function (a) {\n    return rn(this.i, a);\n  };\n\n  k.jc = function () {\n    Fn(this);\n    this.ca(U(this));\n  };\n\n  k.uc = function () {\n    this.wb();\n  };\n\n  k.vc = function () {\n    this.wb();\n  };\n\n  function Dn(a, b) {\n    var c = null,\n        d = null;\n    return T(a, b.then(function (e) {\n      c = mh(e);\n      d = lg(e);\n      return Gn(a, e);\n    }, function (e) {\n      var f = null;\n      e && "auth/multi-factor-auth-required" === e.code && (f = em(e.v(), a, q(a.ic, a)));\n      throw f || e;\n    }).then(function () {\n      return gf({\n        user: U(a),\n        credential: c,\n        additionalUserInfo: d,\n        operationType: "signIn"\n      });\n    }));\n  }\n\n  k.ic = function (a) {\n    var b = this;\n    return this.h.then(function () {\n      return Dn(b, D(a));\n    });\n  };\n\n  k.xc = function (a) {\n    var b = this;\n    this.addAuthTokenListener(function () {\n      a.next(U(b));\n    });\n  };\n\n  k.yc = function (a) {\n    var b = this;\n    In(this, function () {\n      a.next(U(b));\n    });\n  };\n\n  k.Gc = function (a, b, c) {\n    var d = this;\n    this.aa && Promise.resolve().then(function () {\n      "function" === typeof a ? a(U(d)) : "function" === typeof a.next && a.next(U(d));\n    });\n    return this.$b(a, b, c);\n  };\n\n  k.Fc = function (a, b, c) {\n    var d = this;\n    this.aa && Promise.resolve().then(function () {\n      d.W = d.getUid();\n      "function" === typeof a ? a(U(d)) : "function" === typeof a.next && a.next(U(d));\n    });\n    return this.ac(a, b, c);\n  };\n\n  k.kc = function (a) {\n    var b = this,\n        c = this.h.then(function () {\n      return U(b) ? U(b).I(a).then(function (d) {\n        return {\n          accessToken: d\n        };\n      }) : null;\n    });\n    return T(this, c);\n  };\n\n  k.Rc = function (a) {\n    var b = this;\n    return this.h.then(function () {\n      return Dn(b, N(b.b, Ej, {\n        token: a\n      }));\n    }).then(function (c) {\n      var d = c.user;\n      Rm(d, "isAnonymous", !1);\n      b.ca(d);\n      return c;\n    });\n  };\n\n  k.Sc = function (a, b) {\n    var c = this;\n    return this.h.then(function () {\n      return Dn(c, N(c.b, Xg, {\n        email: a,\n        password: b\n      }));\n    });\n  };\n\n  k.cc = function (a, b) {\n    var c = this;\n    return this.h.then(function () {\n      return Dn(c, N(c.b, yj, {\n        email: a,\n        password: b\n      }));\n    });\n  };\n\n  k.Ya = function (a) {\n    var b = this;\n    return this.h.then(function () {\n      return Dn(b, a.ia(b.b));\n    });\n  };\n\n  k.Qc = function (a) {\n    df("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");\n    return this.Ya(a);\n  };\n\n  k.vb = function () {\n    var a = this;\n    return this.h.then(function () {\n      var b = U(a);\n\n      if (b && b.isAnonymous) {\n        var c = gf({\n          providerId: null,\n          isNewUser: !1\n        });\n        return gf({\n          user: b,\n          credential: null,\n          additionalUserInfo: c,\n          operationType: "signIn"\n        });\n      }\n\n      return Dn(a, a.b.vb()).then(function (d) {\n        var e = d.user;\n        Rm(e, "isAnonymous", !0);\n        a.ca(e);\n        return d;\n      });\n    });\n  };\n\n  function S(a) {\n    return a.app;\n  }\n\n  function U(a) {\n    return a.currentUser;\n  }\n\n  k.getUid = function () {\n    return U(this) && U(this).uid || null;\n  };\n\n  function Jn(a) {\n    return U(a) && U(a)._lat || null;\n  }\n\n  function Fn(a) {\n    if (a.aa) {\n      for (var b = 0; b < a.m.length; b++) if (a.m[b]) a.m[b](Jn(a));\n\n      if (a.W !== a.getUid() && a.O.length) for (a.W = a.getUid(), b = 0; b < a.O.length; b++) if (a.O[b]) a.O[b](Jn(a));\n    }\n  }\n\n  k.bc = function (a) {\n    this.addAuthTokenListener(a);\n    this.s++;\n    0 < this.s && U(this) && Hm(U(this));\n  };\n\n  k.Nc = function (a) {\n    var b = this;\n    w(this.m, function (c) {\n      c == a && b.s--;\n    });\n    0 > this.s && (this.s = 0);\n    0 == this.s && U(this) && Im(U(this));\n    this.removeAuthTokenListener(a);\n  };\n\n  k.addAuthTokenListener = function (a) {\n    var b = this;\n    this.m.push(a);\n    T(this, this.h.then(function () {\n      b.l || Ta(b.m, a) && a(Jn(b));\n    }));\n  };\n\n  k.removeAuthTokenListener = function (a) {\n    Va(this.m, function (b) {\n      return b == a;\n    });\n  };\n\n  function In(a, b) {\n    a.O.push(b);\n    T(a, a.h.then(function () {\n      !a.l && Ta(a.O, b) && a.W !== a.getUid() && (a.W = a.getUid(), b(Jn(a)));\n    }));\n  }\n\n  k.delete = function () {\n    this.l = !0;\n\n    for (var a = 0; a < this.P.length; a++) this.P[a].cancel("app-deleted");\n\n    this.P = [];\n    this.i && (a = this.i, a.b.removeListener(mn("local"), a.a, this.oa));\n    this.a && (Il(this.a, this), Sl(this.a.b));\n    return Promise.resolve();\n  };\n\n  function T(a, b) {\n    a.P.push(b);\n    b.ma(function () {\n      Ua(a.P, b);\n    });\n    return b;\n  }\n\n  k.fc = function (a) {\n    return T(this, Vi(this.b, a));\n  };\n\n  k.zc = function (a) {\n    return !!bh(a);\n  };\n\n  k.sb = function (a, b) {\n    var c = this;\n    return T(this, D().then(function () {\n      var d = new Pf(b);\n      if (!d.c) throw new t("argument-error", Xf + " must be true when sending sign in link to email");\n      return Zf(d);\n    }).then(function (d) {\n      return c.b.sb(a, d);\n    }).then(function () {}));\n  };\n\n  k.fd = function (a) {\n    return this.Pa(a).then(function (b) {\n      return b.data.email;\n    });\n  };\n\n  k.jb = function (a, b) {\n    return T(this, this.b.jb(a, b).then(function () {}));\n  };\n\n  k.Pa = function (a) {\n    return T(this, this.b.Pa(a).then(function (b) {\n      return new sf(b);\n    }));\n  };\n\n  k.fb = function (a) {\n    return T(this, this.b.fb(a).then(function () {}));\n  };\n\n  k.rb = function (a, b) {\n    var c = this;\n    return T(this, D().then(function () {\n      return "undefined" === typeof b || kb(b) ? {} : Zf(new Pf(b));\n    }).then(function (d) {\n      return c.b.rb(a, d);\n    }).then(function () {}));\n  };\n\n  k.Uc = function (a, b) {\n    return T(this, Zl(this, a, b, q(this.Ya, this)));\n  };\n\n  k.Tc = function (a, b) {\n    var c = this;\n    return T(this, D().then(function () {\n      var d = b || oe(),\n          e = ah(a, d);\n      d = bh(d);\n      if (!d) throw new t("argument-error", "Invalid email link!");\n      if (d.tenantId !== c.S()) throw new t("tenant-id-mismatch");\n      return c.Ya(e);\n    }));\n  };\n\n  function Kn() {}\n\n  Kn.prototype.render = function () {};\n\n  Kn.prototype.reset = function () {};\n\n  Kn.prototype.getResponse = function () {};\n\n  Kn.prototype.execute = function () {};\n\n  function Ln() {\n    this.a = {};\n    this.b = 1E12;\n  }\n\n  var Mn = null;\n\n  Ln.prototype.render = function (a, b) {\n    this.a[this.b.toString()] = new Nn(a, b);\n    return this.b++;\n  };\n\n  Ln.prototype.reset = function (a) {\n    var b = On(this, a);\n    a = Pn(a);\n    b && a && (b.delete(), delete this.a[a]);\n  };\n\n  Ln.prototype.getResponse = function (a) {\n    return (a = On(this, a)) ? a.getResponse() : null;\n  };\n\n  Ln.prototype.execute = function (a) {\n    (a = On(this, a)) && a.execute();\n  };\n\n  function On(a, b) {\n    return (b = Pn(b)) ? a.a[b] || null : null;\n  }\n\n  function Pn(a) {\n    return (a = "undefined" === typeof a ? 1E12 : a) ? a.toString() : null;\n  }\n\n  function Nn(a, b) {\n    this.g = !1;\n    this.c = b;\n    this.a = this.b = null;\n    this.h = "invisible" !== this.c.size;\n    this.f = fc(a);\n    var c = this;\n\n    this.i = function () {\n      c.execute();\n    };\n\n    this.h ? this.execute() : jd(this.f, "click", this.i);\n  }\n\n  Nn.prototype.getResponse = function () {\n    Qn(this);\n    return this.b;\n  };\n\n  Nn.prototype.execute = function () {\n    Qn(this);\n    var a = this;\n    this.a || (this.a = setTimeout(function () {\n      a.b = Je();\n      var b = a.c.callback,\n          c = a.c["expired-callback"];\n      if (b) try {\n        b(a.b);\n      } catch (d) {}\n      a.a = setTimeout(function () {\n        a.a = null;\n        a.b = null;\n        if (c) try {\n          c();\n        } catch (d) {}\n        a.h && a.execute();\n      }, 6E4);\n    }, 500));\n  };\n\n  Nn.prototype.delete = function () {\n    Qn(this);\n    this.g = !0;\n    clearTimeout(this.a);\n    this.a = null;\n    td(this.f, "click", this.i);\n  };\n\n  function Qn(a) {\n    if (a.g) throw Error("reCAPTCHA mock was already deleted!");\n  }\n\n  ;\n\n  function Rn() {}\n\n  K(Rn, "FACTOR_ID", "phone");\n\n  function Sn() {}\n\n  Sn.prototype.g = function () {\n    Mn || (Mn = new Ln());\n    return D(Mn);\n  };\n\n  Sn.prototype.c = function () {};\n\n  var Tn = null;\n\n  function Un() {\n    this.b = l.grecaptcha ? Infinity : 0;\n    this.f = null;\n    this.a = "__rcb" + Math.floor(1E6 * Math.random()).toString();\n  }\n\n  var Vn = new ob(pb, "https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),\n      Wn = new We(3E4, 6E4);\n\n  Un.prototype.g = function (a) {\n    var b = this;\n    return new B(function (c, d) {\n      var e = setTimeout(function () {\n        d(new t("network-request-failed"));\n      }, Wn.get());\n\n      if (!l.grecaptcha || a !== b.f && !b.b) {\n        l[b.a] = function () {\n          if (l.grecaptcha) {\n            b.f = a;\n            var g = l.grecaptcha.render;\n\n            l.grecaptcha.render = function (h, m) {\n              h = g(h, m);\n              b.b++;\n              return h;\n            };\n\n            clearTimeout(e);\n            c(l.grecaptcha);\n          } else clearTimeout(e), d(new t("internal-error"));\n\n          delete l[b.a];\n        };\n\n        var f = xb(Vn, {\n          onload: b.a,\n          hl: a || ""\n        });\n        D(xi(f)).o(function () {\n          clearTimeout(e);\n          d(new t("internal-error", "Unable to load external reCAPTCHA dependencies!"));\n        });\n      } else clearTimeout(e), c(l.grecaptcha);\n    });\n  };\n\n  Un.prototype.c = function () {\n    this.b--;\n  };\n\n  var Xn = null;\n\n  function Yn(a, b, c, d, e, f, g) {\n    K(this, "type", "recaptcha");\n    this.c = this.f = null;\n    this.D = !1;\n    this.u = b;\n    this.g = null;\n    g ? (Tn || (Tn = new Sn()), g = Tn) : (Xn || (Xn = new Un()), g = Xn);\n    this.m = g;\n    this.a = c || {\n      theme: "light",\n      type: "image"\n    };\n    this.h = [];\n    if (this.a[Zn]) throw new t("argument-error", "sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");\n    this.i = "invisible" === this.a[$n];\n    if (!l.document) throw new t("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");\n    if (!fc(b) || !this.i && fc(b).hasChildNodes()) throw new t("argument-error", "reCAPTCHA container is either not found or already contains inner elements!");\n    this.s = new Ei(a, f || null, e || null);\n\n    this.w = d || function () {\n      return null;\n    };\n\n    var h = this;\n    this.l = [];\n    var m = this.a[ao];\n\n    this.a[ao] = function (v) {\n      bo(h, v);\n      if ("function" === typeof m) m(v);else if ("string" === typeof m) {\n        var C = J(m, l);\n        "function" === typeof C && C(v);\n      }\n    };\n\n    var p = this.a[co];\n\n    this.a[co] = function () {\n      bo(h, null);\n      if ("function" === typeof p) p();else if ("string" === typeof p) {\n        var v = J(p, l);\n        "function" === typeof v && v();\n      }\n    };\n  }\n\n  var ao = "callback",\n      co = "expired-callback",\n      Zn = "sitekey",\n      $n = "size";\n\n  function bo(a, b) {\n    for (var c = 0; c < a.l.length; c++) try {\n      a.l[c](b);\n    } catch (d) {}\n  }\n\n  function eo(a, b) {\n    Va(a.l, function (c) {\n      return c == b;\n    });\n  }\n\n  function fo(a, b) {\n    a.h.push(b);\n    b.ma(function () {\n      Ua(a.h, b);\n    });\n    return b;\n  }\n\n  k = Yn.prototype;\n\n  k.Ga = function () {\n    var a = this;\n    return this.f ? this.f : this.f = fo(this, D().then(function () {\n      if (Pe() && !Ge()) return Be();\n      throw new t("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");\n    }).then(function () {\n      return a.m.g(a.w());\n    }).then(function (b) {\n      a.g = b;\n      return N(a.s, Dj, {});\n    }).then(function (b) {\n      a.a[Zn] = b.recaptchaSiteKey;\n    }).o(function (b) {\n      a.f = null;\n      throw b;\n    }));\n  };\n\n  k.render = function () {\n    go(this);\n    var a = this;\n    return fo(this, this.Ga().then(function () {\n      if (null === a.c) {\n        var b = a.u;\n\n        if (!a.i) {\n          var c = fc(b);\n          b = ic("DIV");\n          c.appendChild(b);\n        }\n\n        a.c = a.g.render(b, a.a);\n      }\n\n      return a.c;\n    }));\n  };\n\n  k.verify = function () {\n    go(this);\n    var a = this;\n    return fo(this, this.render().then(function (b) {\n      return new B(function (c) {\n        var d = a.g.getResponse(b);\n        if (d) c(d);else {\n          var e = function (f) {\n            f && (eo(a, e), c(f));\n          };\n\n          a.l.push(e);\n          a.i && a.g.execute(a.c);\n        }\n      });\n    }));\n  };\n\n  k.reset = function () {\n    go(this);\n    null !== this.c && this.g.reset(this.c);\n  };\n\n  function go(a) {\n    if (a.D) throw new t("internal-error", "RecaptchaVerifier instance has been destroyed.");\n  }\n\n  k.clear = function () {\n    go(this);\n    this.D = !0;\n    this.m.c();\n\n    for (var a = 0; a < this.h.length; a++) this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");\n\n    if (!this.i) {\n      a = fc(this.u);\n\n      for (var b; b = a.firstChild;) a.removeChild(b);\n    }\n  };\n\n  function ho(a, b, c) {\n    var d = !1;\n\n    try {\n      this.b = c || firebase.app();\n    } catch (g) {\n      throw new t("argument-error", "No firebase.app.App instance is currently initialized.");\n    }\n\n    if (this.b.options && this.b.options.apiKey) c = this.b.options.apiKey;else throw new t("invalid-api-key");\n    var e = this,\n        f = null;\n\n    try {\n      f = this.b.auth().Ea();\n    } catch (g) {}\n\n    try {\n      d = this.b.auth().settings.appVerificationDisabledForTesting;\n    } catch (g) {}\n\n    f = firebase.SDK_VERSION ? Le(firebase.SDK_VERSION, f) : null;\n    Yn.call(this, c, a, b, function () {\n      try {\n        var g = e.b.auth().ja();\n      } catch (h) {\n        g = null;\n      }\n\n      return g;\n    }, f, Aa(Ba), d);\n  }\n\n  r(ho, Yn);\n\n  function io(a, b, c, d) {\n    a: {\n      c = Array.prototype.slice.call(c);\n      var e = 0;\n\n      for (var f = !1, g = 0; g < b.length; g++) if (b[g].optional) f = !0;else {\n        if (f) throw new t("internal-error", "Argument validator encountered a required argument after an optional argument.");\n        e++;\n      }\n\n      f = b.length;\n      if (c.length < e || f < c.length) d = "Expected " + (e == f ? 1 == e ? "1 argument" : e + " arguments" : e + "-" + f + " arguments") + " but got " + c.length + ".";else {\n        for (e = 0; e < c.length; e++) if (f = b[e].optional && void 0 === c[e], !b[e].K(c[e]) && !f) {\n          b = b[e];\n          if (0 > e || e >= jo.length) throw new t("internal-error", "Argument validator received an unsupported number of arguments.");\n          c = jo[e];\n          d = (d ? "" : c + " argument ") + (b.name ? \'"\' + b.name + \'" \' : "") + "must be " + b.J + ".";\n          break a;\n        }\n\n        d = null;\n      }\n    }\n\n    if (d) throw new t("argument-error", a + " failed: " + d);\n  }\n\n  var jo = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");\n\n  function V(a, b) {\n    return {\n      name: a || "",\n      J: "a valid string",\n      optional: !!b,\n      K: function (c) {\n        return "string" === typeof c;\n      }\n    };\n  }\n\n  function ko(a, b) {\n    return {\n      name: a || "",\n      J: "a boolean",\n      optional: !!b,\n      K: function (c) {\n        return "boolean" === typeof c;\n      }\n    };\n  }\n\n  function W(a, b) {\n    return {\n      name: a || "",\n      J: "a valid object",\n      optional: !!b,\n      K: n\n    };\n  }\n\n  function lo(a, b) {\n    return {\n      name: a || "",\n      J: "a function",\n      optional: !!b,\n      K: function (c) {\n        return "function" === typeof c;\n      }\n    };\n  }\n\n  function mo(a, b) {\n    return {\n      name: a || "",\n      J: "null",\n      optional: !!b,\n      K: function (c) {\n        return null === c;\n      }\n    };\n  }\n\n  function no() {\n    return {\n      name: "",\n      J: "an HTML element",\n      optional: !1,\n      K: function (a) {\n        return !!(a && a instanceof Element);\n      }\n    };\n  }\n\n  function oo() {\n    return {\n      name: "auth",\n      J: "an instance of Firebase Auth",\n      optional: !0,\n      K: function (a) {\n        return !!(a && a instanceof un);\n      }\n    };\n  }\n\n  function po() {\n    return {\n      name: "app",\n      J: "an instance of Firebase App",\n      optional: !0,\n      K: function (a) {\n        return !!(a && a instanceof firebase.app.App);\n      }\n    };\n  }\n\n  function qo(a) {\n    return {\n      name: a ? a + "Credential" : "credential",\n      J: a ? "a valid " + a + " credential" : "a valid credential",\n      optional: !1,\n      K: function (b) {\n        if (!b) return !1;\n        var c = !a || b.providerId === a;\n        return !(!b.ia || !c);\n      }\n    };\n  }\n\n  function ro() {\n    return {\n      name: "multiFactorAssertion",\n      J: "a valid multiFactorAssertion",\n      optional: !1,\n      K: function (a) {\n        return a ? !!a.ob : !1;\n      }\n    };\n  }\n\n  function so() {\n    return {\n      name: "authProvider",\n      J: "a valid Auth provider",\n      optional: !1,\n      K: function (a) {\n        return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));\n      }\n    };\n  }\n\n  function to(a, b) {\n    return n(a) && "string" === typeof a.type && a.type === b && "function" === typeof a.Fa;\n  }\n\n  function uo(a) {\n    return n(a) && "string" === typeof a.uid;\n  }\n\n  function vo() {\n    return {\n      name: "applicationVerifier",\n      J: "an implementation of firebase.auth.ApplicationVerifier",\n      optional: !1,\n      K: function (a) {\n        return !(!a || "string" !== typeof a.type || "function" !== typeof a.verify);\n      }\n    };\n  }\n\n  function X(a, b, c, d) {\n    return {\n      name: c || "",\n      J: a.J + " or " + b.J,\n      optional: !!d,\n      K: function (e) {\n        return a.K(e) || b.K(e);\n      }\n    };\n  }\n\n  ;\n\n  function Y(a, b) {\n    for (var c in b) {\n      var d = b[c].name;\n      a[d] = wo(d, a[c], b[c].j);\n    }\n  }\n\n  function xo(a, b) {\n    for (var c in b) {\n      var d = b[c].name;\n      d !== c && Object.defineProperty(a, d, {\n        get: ta(function (e) {\n          return this[e];\n        }, c),\n        set: ta(function (e, f, g, h) {\n          io(e, [g], [h], !0);\n          this[f] = h;\n        }, d, c, b[c].gb),\n        enumerable: !0\n      });\n    }\n  }\n\n  function Z(a, b, c, d) {\n    a[b] = wo(b, c, d);\n  }\n\n  function wo(a, b, c) {\n    function d() {\n      var g = Array.prototype.slice.call(arguments);\n      io(e, c, g);\n      return b.apply(this, g);\n    }\n\n    if (!c) return b;\n    var e = yo(a),\n        f;\n\n    for (f in b) d[f] = b[f];\n\n    for (f in b.prototype) d.prototype[f] = b.prototype[f];\n\n    return d;\n  }\n\n  function yo(a) {\n    a = a.split(".");\n    return a[a.length - 1];\n  }\n\n  ;\n  Y(un.prototype, {\n    fb: {\n      name: "applyActionCode",\n      j: [V("code")]\n    },\n    Pa: {\n      name: "checkActionCode",\n      j: [V("code")]\n    },\n    jb: {\n      name: "confirmPasswordReset",\n      j: [V("code"), V("newPassword")]\n    },\n    cc: {\n      name: "createUserWithEmailAndPassword",\n      j: [V("email"), V("password")]\n    },\n    fc: {\n      name: "fetchSignInMethodsForEmail",\n      j: [V("email")]\n    },\n    pa: {\n      name: "getRedirectResult",\n      j: []\n    },\n    zc: {\n      name: "isSignInWithEmailLink",\n      j: [V("emailLink")]\n    },\n    Fc: {\n      name: "onAuthStateChanged",\n      j: [X(W(), lo(), "nextOrObserver"), lo("opt_error", !0), lo("opt_completed", !0)]\n    },\n    Gc: {\n      name: "onIdTokenChanged",\n      j: [X(W(), lo(), "nextOrObserver"), lo("opt_error", !0), lo("opt_completed", !0)]\n    },\n    rb: {\n      name: "sendPasswordResetEmail",\n      j: [V("email"), X(W("opt_actionCodeSettings", !0), mo(null, !0), "opt_actionCodeSettings", !0)]\n    },\n    sb: {\n      name: "sendSignInLinkToEmail",\n      j: [V("email"), W("actionCodeSettings")]\n    },\n    tb: {\n      name: "setPersistence",\n      j: [V("persistence")]\n    },\n    Qc: {\n      name: "signInAndRetrieveDataWithCredential",\n      j: [qo()]\n    },\n    vb: {\n      name: "signInAnonymously",\n      j: []\n    },\n    Ya: {\n      name: "signInWithCredential",\n      j: [qo()]\n    },\n    Rc: {\n      name: "signInWithCustomToken",\n      j: [V("token")]\n    },\n    Sc: {\n      name: "signInWithEmailAndPassword",\n      j: [V("email"), V("password")]\n    },\n    Tc: {\n      name: "signInWithEmailLink",\n      j: [V("email"), V("emailLink", !0)]\n    },\n    Uc: {\n      name: "signInWithPhoneNumber",\n      j: [V("phoneNumber"), vo()]\n    },\n    Vc: {\n      name: "signInWithPopup",\n      j: [so()]\n    },\n    Wc: {\n      name: "signInWithRedirect",\n      j: [so()]\n    },\n    bd: {\n      name: "updateCurrentUser",\n      j: [X(function (a) {\n        return {\n          name: "user",\n          J: "an instance of Firebase User",\n          optional: !!a,\n          K: function (b) {\n            return !!(b && b instanceof P);\n          }\n        };\n      }(), mo(), "user")]\n    },\n    wb: {\n      name: "signOut",\n      j: []\n    },\n    toJSON: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    },\n    dd: {\n      name: "useDeviceLanguage",\n      j: []\n    },\n    fd: {\n      name: "verifyPasswordResetCode",\n      j: [V("code")]\n    }\n  });\n  xo(un.prototype, {\n    lc: {\n      name: "languageCode",\n      gb: X(V(), mo(), "languageCode")\n    },\n    ti: {\n      name: "tenantId",\n      gb: X(V(), mo(), "tenantId")\n    }\n  });\n  un.Persistence = Kk;\n  un.Persistence.LOCAL = "local";\n  un.Persistence.SESSION = "session";\n  un.Persistence.NONE = "none";\n  Y(P.prototype, {\n    "delete": {\n      name: "delete",\n      j: []\n    },\n    mc: {\n      name: "getIdTokenResult",\n      j: [ko("opt_forceRefresh", !0)]\n    },\n    I: {\n      name: "getIdToken",\n      j: [ko("opt_forceRefresh", !0)]\n    },\n    Ac: {\n      name: "linkAndRetrieveDataWithCredential",\n      j: [qo()]\n    },\n    mb: {\n      name: "linkWithCredential",\n      j: [qo()]\n    },\n    Bc: {\n      name: "linkWithPhoneNumber",\n      j: [V("phoneNumber"), vo()]\n    },\n    Cc: {\n      name: "linkWithPopup",\n      j: [so()]\n    },\n    Dc: {\n      name: "linkWithRedirect",\n      j: [so()]\n    },\n    Jc: {\n      name: "reauthenticateAndRetrieveDataWithCredential",\n      j: [qo()]\n    },\n    pb: {\n      name: "reauthenticateWithCredential",\n      j: [qo()]\n    },\n    Kc: {\n      name: "reauthenticateWithPhoneNumber",\n      j: [V("phoneNumber"), vo()]\n    },\n    Lc: {\n      name: "reauthenticateWithPopup",\n      j: [so()]\n    },\n    Mc: {\n      name: "reauthenticateWithRedirect",\n      j: [so()]\n    },\n    reload: {\n      name: "reload",\n      j: []\n    },\n    qb: {\n      name: "sendEmailVerification",\n      j: [X(W("opt_actionCodeSettings", !0), mo(null, !0), "opt_actionCodeSettings", !0)]\n    },\n    toJSON: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    },\n    ad: {\n      name: "unlink",\n      j: [V("provider")]\n    },\n    xb: {\n      name: "updateEmail",\n      j: [V("email")]\n    },\n    yb: {\n      name: "updatePassword",\n      j: [V("password")]\n    },\n    cd: {\n      name: "updatePhoneNumber",\n      j: [qo("phone")]\n    },\n    zb: {\n      name: "updateProfile",\n      j: [W("profile")]\n    },\n    Ab: {\n      name: "verifyBeforeUpdateEmail",\n      j: [V("email"), X(W("opt_actionCodeSettings", !0), mo(null, !0), "opt_actionCodeSettings", !0)]\n    }\n  });\n  Y(Ln.prototype, {\n    execute: {\n      name: "execute"\n    },\n    render: {\n      name: "render"\n    },\n    reset: {\n      name: "reset"\n    },\n    getResponse: {\n      name: "getResponse"\n    }\n  });\n  Y(Kn.prototype, {\n    execute: {\n      name: "execute"\n    },\n    render: {\n      name: "render"\n    },\n    reset: {\n      name: "reset"\n    },\n    getResponse: {\n      name: "getResponse"\n    }\n  });\n  Y(B.prototype, {\n    ma: {\n      name: "finally"\n    },\n    o: {\n      name: "catch"\n    },\n    then: {\n      name: "then"\n    }\n  });\n  xo(Xl.prototype, {\n    appVerificationDisabled: {\n      name: "appVerificationDisabledForTesting",\n      gb: ko("appVerificationDisabledForTesting")\n    }\n  });\n  Y(Yl.prototype, {\n    confirm: {\n      name: "confirm",\n      j: [V("verificationCode")]\n    }\n  });\n  Z(yg, "fromJSON", function (a) {\n    a = "string" === typeof a ? JSON.parse(a) : a;\n\n    for (var b, c = [Jg, $g, gh, Gg], d = 0; d < c.length; d++) if (b = c[d](a)) return b;\n\n    return null;\n  }, [X(V(), W(), "json")]);\n  Z(Vg, "credential", function (a, b) {\n    return new Ug(a, b);\n  }, [V("email"), V("password")]);\n  Y(Ug.prototype, {\n    v: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    }\n  });\n  Y(Mg.prototype, {\n    Aa: {\n      name: "addScope",\n      j: [V("scope")]\n    },\n    Ia: {\n      name: "setCustomParameters",\n      j: [W("customOAuthParameters")]\n    }\n  });\n  Z(Mg, "credential", Ng, [X(V(), W(), "token")]);\n  Z(Vg, "credentialWithLink", ah, [V("email"), V("emailLink")]);\n  Y(Og.prototype, {\n    Aa: {\n      name: "addScope",\n      j: [V("scope")]\n    },\n    Ia: {\n      name: "setCustomParameters",\n      j: [W("customOAuthParameters")]\n    }\n  });\n  Z(Og, "credential", Pg, [X(V(), W(), "token")]);\n  Y(Qg.prototype, {\n    Aa: {\n      name: "addScope",\n      j: [V("scope")]\n    },\n    Ia: {\n      name: "setCustomParameters",\n      j: [W("customOAuthParameters")]\n    }\n  });\n  Z(Qg, "credential", Rg, [X(V(), X(W(), mo()), "idToken"), X(V(), mo(), "accessToken", !0)]);\n  Y(Sg.prototype, {\n    Ia: {\n      name: "setCustomParameters",\n      j: [W("customOAuthParameters")]\n    }\n  });\n  Z(Sg, "credential", Tg, [X(V(), W(), "token"), V("secret", !0)]);\n  Y(M.prototype, {\n    Aa: {\n      name: "addScope",\n      j: [V("scope")]\n    },\n    credential: {\n      name: "credential",\n      j: [X(V(), X(W(), mo()), "optionsOrIdToken"), X(V(), mo(), "accessToken", !0)]\n    },\n    Ia: {\n      name: "setCustomParameters",\n      j: [W("customOAuthParameters")]\n    }\n  });\n  Y(Hg.prototype, {\n    v: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    }\n  });\n  Y(Bg.prototype, {\n    v: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    }\n  });\n  Z(hh, "credential", lh, [V("verificationId"), V("verificationCode")]);\n  Y(hh.prototype, {\n    cb: {\n      name: "verifyPhoneNumber",\n      j: [X(V(), function (a, b) {\n        return {\n          name: a || "phoneInfoOptions",\n          J: "valid phone info options",\n          optional: !!b,\n          K: function (c) {\n            return c ? c.session && c.phoneNumber ? to(c.session, wg) && "string" === typeof c.phoneNumber : c.session && c.multiFactorHint ? to(c.session, xg) && uo(c.multiFactorHint) : c.session && c.multiFactorUid ? to(c.session, xg) && "string" === typeof c.multiFactorUid : c.phoneNumber ? "string" === typeof c.phoneNumber : !1 : !1;\n          }\n        };\n      }(), "phoneInfoOptions"), vo()]\n    }\n  });\n  Y(ch.prototype, {\n    v: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    }\n  });\n  Y(t.prototype, {\n    toJSON: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    }\n  });\n  Y(uh.prototype, {\n    toJSON: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    }\n  });\n  Y(th.prototype, {\n    toJSON: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    }\n  });\n  Y(dm.prototype, {\n    toJSON: {\n      name: "toJSON",\n      j: [V(null, !0)]\n    }\n  });\n  Y(am.prototype, {\n    Pc: {\n      name: "resolveSignIn",\n      j: [ro()]\n    }\n  });\n  Y(lm.prototype, {\n    Ob: {\n      name: "getSession",\n      j: []\n    },\n    dc: {\n      name: "enroll",\n      j: [ro(), V("displayName", !0)]\n    },\n    $c: {\n      name: "unenroll",\n      j: [X({\n        name: "multiFactorInfo",\n        J: "a valid multiFactorInfo",\n        optional: !1,\n        K: uo\n      }, V(), "multiFactorInfoIdentifier")]\n    }\n  });\n  Y(ho.prototype, {\n    clear: {\n      name: "clear",\n      j: []\n    },\n    render: {\n      name: "render",\n      j: []\n    },\n    verify: {\n      name: "verify",\n      j: []\n    }\n  });\n  Z(Gf, "parseLink", Of, [V("link")]);\n  Z(Rn, "assertion", function (a) {\n    return new jm(a);\n  }, [qo("phone")]);\n\n  (function () {\n    if ("undefined" !== typeof firebase && firebase.INTERNAL && firebase.INTERNAL.registerComponent) {\n      var a = {\n        ActionCodeInfo: {\n          Operation: {\n            EMAIL_SIGNIN: xf,\n            PASSWORD_RESET: "PASSWORD_RESET",\n            RECOVER_EMAIL: "RECOVER_EMAIL",\n            REVERT_SECOND_FACTOR_ADDITION: zf,\n            VERIFY_AND_CHANGE_EMAIL: yf,\n            VERIFY_EMAIL: "VERIFY_EMAIL"\n          }\n        },\n        Auth: un,\n        AuthCredential: yg,\n        Error: t\n      };\n      Z(a, "EmailAuthProvider", Vg, []);\n      Z(a, "FacebookAuthProvider", Mg, []);\n      Z(a, "GithubAuthProvider", Og, []);\n      Z(a, "GoogleAuthProvider", Qg, []);\n      Z(a, "TwitterAuthProvider", Sg, []);\n      Z(a, "OAuthProvider", M, [V("providerId")]);\n      Z(a, "SAMLAuthProvider", Lg, [V("providerId")]);\n      Z(a, "PhoneAuthProvider", hh, [oo()]);\n      Z(a, "RecaptchaVerifier", ho, [X(V(), no(), "recaptchaContainer"), W("recaptchaParameters", !0), po()]);\n      Z(a, "ActionCodeURL", Gf, []);\n      Z(a, "PhoneMultiFactorGenerator", Rn, []);\n      firebase.INTERNAL.registerComponent({\n        name: "auth",\n        instanceFactory: function (b) {\n          b = b.getProvider("app").getImmediate();\n          return new un(b);\n        },\n        multipleInstances: !1,\n        serviceProps: a,\n        instantiationMode: "LAZY",\n        type: "PUBLIC"\n      });\n      firebase.INTERNAL.registerComponent({\n        name: "auth-internal",\n        instanceFactory: function (b) {\n          b = b.getProvider("auth").getImmediate();\n          return {\n            getUid: q(b.getUid, b),\n            getToken: q(b.kc, b),\n            addAuthTokenListener: q(b.bc, b),\n            removeAuthTokenListener: q(b.Nc, b)\n          };\n        },\n        multipleInstances: !1,\n        instantiationMode: "LAZY",\n        type: "PRIVATE"\n      });\n      firebase.registerVersion("@firebase/auth", "0.14.9");\n      firebase.INTERNAL.extendNamespace({\n        User: P\n      });\n    } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");\n  })();\n}).apply(typeof global !== \'undefined\' ? global : typeof self !== \'undefined\' ? self : typeof window !== \'undefined\' ? window : {});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2F1dGgvZGlzdC9hdXRoLmpzPzJjZTEiXSwibmFtZXMiOlsiZmlyZWJhc2UiLCJyZXF1aXJlIiwiZGVmYXVsdCIsImsiLCJhYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImEiLCJiIiwiYyIsIkFycmF5IiwicHJvdG90eXBlIiwidmFsdWUiLCJiYSIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJsZW5ndGgiLCJNYXRoIiwiZ2xvYmFsVGhpcyIsImNhIiwiZGEiLCJzcGxpdCIsImQiLCJlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJlYSIsImRvbmUiLCJmYSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY2FsbCIsIm5leHQiLCJnIiwiaCIsImYiLCJyZXNvbHZlIiwicmVqZWN0IiwibSIsInB1c2giLCJzZXRUaW1lb3V0IiwicCIsInYiLCJUeXBlRXJyb3IiLCJzIiwidSIsInRoZW4iLCJ3IiwiaSIsIkVycm9yIiwibCIsIk9hIiwiQSIsIlEiLCJ3YSIsInVkIiwiQyIsImNhdGNoIiwicmFjZSIsImFsbCIsImhhIiwiaWEiLCJqYSIsImthIiwibGEiLCJ0b1N0cmluZyIsInNwbGljZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwibWEiLCJuYSIsIm4iLCJvYSIsImhhc093blByb3BlcnR5IiwicGEiLCJxYSIsInJhbmRvbSIsInJhIiwiYXBwbHkiLCJiaW5kIiwiYXJndW1lbnRzIiwic2EiLCJzbGljZSIsInVuc2hpZnQiLCJxIiwiRnVuY3Rpb24iLCJpbmRleE9mIiwidGEiLCJ1YSIsIkRhdGUiLCJub3ciLCJyIiwiWmEiLCJjb25zdHJ1Y3RvciIsInQiLCJjb2RlIiwidmEiLCJtZXNzYWdlIiwieGEiLCJzZXJ2ZXJSZXNwb25zZSIsInRvSlNPTiIsInlhIiwic3Vic3RyaW5nIiwidGltZW91dCIsInphIiwiaGQiLCJSYSIsIlhhIiwiVWEiLCJpZCIsInBkIiwicmQiLCJzZCIsIkFhIiwiZmlyZWJhc2VFbmRwb2ludCIsInNlY3VyZVRva2VuRW5kcG9pbnQiLCJpZGVudGl0eVBsYXRmb3JtRW5kcG9pbnQiLCJCYSIsIkNhIiwiJGdvb2dfVGhlbmFibGUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInN0YWNrIiwiU3RyaW5nIiwibmFtZSIsIkRhIiwiRWEiLCJGYSIsImdldCIsIkdhIiwiSGEiLCJKYSIsIklhIiwicmVzZXQiLCJhZGQiLCJzZXQiLCJLYSIsIkxhIiwiTWEiLCJmb3JFYWNoIiwiTmEiLCJmaWx0ZXIiLCJQYSIsIm1hcCIsIlFhIiwic29tZSIsIlNhIiwiY2hhckF0IiwiVGEiLCJWYSIsIldhIiwiY29uY2F0IiwiWWEiLCJ0cmltIiwiZXhlYyIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsIngiLCJmYiIsImdiIiwiaGIiLCJuYXZpZ2F0b3IiLCJpYiIsInVzZXJBZ2VudCIsInkiLCJqYiIsImtiIiwibGIiLCJtYiIsInoiLCJuYiIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIkVsZW1lbnQiLCJMb2NhdGlvbiIsImRpc3BsYXlOYW1lIiwib2IiLCJwYiIsInFiIiwicmIiLCJzYiIsInRiIiwidWIiLCJ2YiIsIndiIiwieGIiLCJ5YiIsInRlc3QiLCJyZXBsYWNlIiwiemIiLCJKU09OIiwic3RyaW5naWZ5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQWIiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwic3JjIiwiTWIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJub25jZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIk5iIiwic2hpZnQiLCJqb2luIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwidG9Mb3dlckNhc2UiLCJYYiIsIlliIiwiZG9jdW1lbnRNb2RlIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJwYXJzZUZsb2F0IiwiY2MiLCJtYXgiLCJwYXJzZUludCIsImRjIiwiT2Zmc2NyZWVuQ2FudmFzIiwiZ2V0Q29udGV4dCIsImVjIiwiTnVtYmVyIiwiZmMiLCJnZXRFbGVtZW50QnlJZCIsImdjIiwic3R5bGUiLCJjc3NUZXh0IiwiY2xhc3NOYW1lIiwiaHRtbEZvciIsImhjIiwibGFzdEluZGV4T2YiLCJjZWxscGFkZGluZyIsImNlbGxzcGFjaW5nIiwiY29sc3BhbiIsImZyYW1lYm9yZGVyIiwiaGVpZ2h0IiwibWF4bGVuZ3RoIiwicm9sZSIsInJvd3NwYW4iLCJ0eXBlIiwidXNlbWFwIiwidmFsaWduIiwid2lkdGgiLCJpYyIsImpjIiwiaXNBcnJheSIsImtjIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5vZGVUeXBlIiwibGMiLCJjb250ZW50VHlwZSIsImNyZWF0ZUVsZW1lbnQiLCJpdGVtIiwibWMiLCJuYyIsIm9jIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwbGF5IiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImNsb3NlIiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJvcmlnaW4iLCJkYXRhIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBjIiwicWMiLCJyYyIsInNjIiwiUHJvbWlzZSIsInRjIiwic2V0SW1tZWRpYXRlIiwiV2luZG93IiwiQiIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJEIiwiRSIsIkNjIiwiRGMiLCJFYyIsIkZjIiwicmVhc29uIiwiR2MiLCJIYyIsIm8iLCJjYW5jZWwiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIlljIiwiWmMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJmcmVlemUiLCJWYyIsIldjIiwiWGMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiRiIsInRhcmdldCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsInJlbGF0ZWRUYXJnZXQiLCJidXR0b24iLCJzY3JlZW5ZIiwic2NyZWVuWCIsImNsaWVudFkiLCJjbGllbnRYIiwia2V5IiwibWV0YUtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwiY2hhbmdlZFRvdWNoZXMiLCJzcmNFbGVtZW50Iiwibm9kZU5hbWUiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsInBhZ2VYIiwicGFnZVkiLCJyZXR1cm5WYWx1ZSIsImtleUNvZGUiLCIkYyIsImFkIiwiYmQiLCJsaXN0ZW5lciIsInByb3h5IiwiY2FwdHVyZSIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJqZCIsIm9uY2UiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwiYXR0YWNoRXZlbnQiLCJxZCIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJ0ZCIsInZkIiwiZGV0YWNoRXZlbnQiLCJ3ZCIsInhkIiwicGFyZW50Tm9kZSIsInlkIiwiaGFuZGxlRXZlbnQiLCJHIiwiZGlzcGF0Y2hFdmVudCIsInpkIiwiQWQiLCJCZCIsImNsZWFyVGltZW91dCIsIkNkIiwiViIsIkRkIiwiWCIsIkVkIiwiRmQiLCJHZCIsImNsZWFyIiwiSGQiLCJJZCIsIkpkIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiS2QiLCJMZCIsIk1kIiwiTmQiLCJPZCIsIm1hdGNoIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsIlVkIiwiVmQiLCJzdWJzdHIiLCJwb3AiLCJpc05hTiIsIldkIiwiWGQiLCJIIiwiWWQiLCJaZCIsIiRkIiwiZGVjb2RlVVJJIiwiZW5jb2RlVVJJIiwiYWUiLCJjaGFyQ29kZUF0IiwiYmUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImplIiwiQm9vbGVhbiIsInZhbHVlT2YiLCJrZSIsImlzRmluaXRlIiwibGUiLCJtZSIsIm5lIiwiSSIsIm9lIiwiaHJlZiIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJmbG9vciIsInNjcmVlbiIsImF2YWlsSGVpZ2h0IiwiYXZhaWxXaWR0aCIsInRvcCIsImxlZnQiLCJyZXNpemFibGUiLCJzdGF0dXNiYXIiLCJ0b29sYmFyIiwieGUiLCJzY3JvbGxiYXJzIiwic3RhbmRhbG9uZSIsIm5vcmVmZXJyZXIiLCJjcmVhdGVFdmVudCIsImluaXRNb3VzZUV2ZW50Iiwib3BlbmVyIiwibm9vcGVuZXIiLCJmb2N1cyIsInllIiwiY2xvc2VkIiwiemUiLCJBZSIsIkJlIiwicmVhZHlTdGF0ZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJXb3JrZXJHbG9iYWxTY29wZSIsImltcG9ydFNjcmlwdHMiLCJIZSIsIklOVEVSTkFMIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJzb3J0IiwiSiIsIk1lIiwibG9jYWxTdG9yYWdlIiwiTmUiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImluZGV4ZWREQiIsIk9lIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsInBhcnNlIiwiVWUiLCJWZSIsIl9fX2pzbCIsIkwiLCJDUCIsIldlIiwib25MaW5lIiwiY29ubmVjdGlvbiIsIm1pbiIsIlhlIiwidmlzaWJpbGl0eVN0YXRlIiwiWWUiLCJaZSIsImdldFRpbWUiLCJ0b1VUQ1N0cmluZyIsIiRlIiwiYWYiLCJzZXJ2aWNlV29ya2VyIiwiY29udHJvbGxlciIsImJmIiwicmVhZHkiLCJhY3RpdmUiLCJjZiIsImRmIiwiY29uc29sZSIsIndhcm4iLCJlZiIsImZmIiwiZW51bWVyYWJsZSIsImFiY2QiLCJLIiwiZ2YiLCJoZiIsImpmIiwia2YiLCJsZiIsIm1mIiwibmYiLCJvZiIsInBmIiwidWlkIiwiZmFjdG9ySWQiLCJlbnJvbGxtZW50VGltZSIsInFmIiwicmYiLCJwaG9uZU51bWJlciIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsIktmIiwiYXBpS2V5Iiwib3BlcmF0aW9uIiwiY29udGludWVVcmwiLCJMZiIsImxhbmd1YWdlQ29kZSIsIk1mIiwidGVuYW50SWQiLCJOZiIsInJlY292ZXJFbWFpbCIsInJlc2V0UGFzc3dvcmQiLCJyZXZlcnRTZWNvbmRGYWN0b3JBZGRpdGlvbiIsInNpZ25JbiIsInZlcmlmeUFuZENoYW5nZUVtYWlsIiwidmVyaWZ5RW1haWwiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCJjYW5IYW5kbGVDb2RlSW5BcHAiLCJhbmRyb2lkUGFja2FnZU5hbWUiLCJhbmRyb2lkTWluaW11bVZlcnNpb24iLCJhbmRyb2lkSW5zdGFsbEFwcCIsImlPU0J1bmRsZUlkIiwiZHluYW1pY0xpbmtEb21haW4iLCIkZiIsImFnIiwiYmciLCJjZyIsImZyb21DaGFyQ29kZSIsImRnIiwiZWciLCJmZyIsInN1YiIsImlzcyIsImF1ZCIsImV4cCIsInByb3ZpZGVyX2lkIiwic2lnbl9pbl9wcm92aWRlciIsInRlbmFudCIsImlzX2Fub255bW91cyIsIlMiLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwiaXNOZXdVc2VyIiwia2luZCIsInJhd1VzZXJJbmZvIiwicHJvdmlkZXJJZCIsInByb2ZpbGUiLCJsb2dpbiIsInNjcmVlbk5hbWUiLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsIm11bHRpRmFjdG9yU2Vzc2lvbiIsImlkVG9rZW4iLCJwZW5kaW5nQ3JlZGVudGlhbCIsInlnIiwiemciLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJwZW5kaW5nVG9rZW4iLCJyZXF1ZXN0VXJpIiwic2lnbkluTWV0aG9kIiwiR2ciLCJIZyIsImFjY2Vzc1Rva2VuIiwib2F1dGhUb2tlbiIsIm9hdXRoVG9rZW5TZWNyZXQiLCJJZyIsImlkX3Rva2VuIiwiYWNjZXNzX3Rva2VuIiwic2VjcmV0Iiwib2F1dGhfdG9rZW5fc2VjcmV0IiwicG9zdEJvZHkiLCJvYXV0aElkVG9rZW4iLCJvYXV0aEFjY2Vzc1Rva2VuIiwiSmciLCJLZyIsImlzT0F1dGhQcm92aWRlciIsIkxnIiwiTSIsImNyZWRlbnRpYWwiLCJyYXdOb25jZSIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRCIsIkVNQUlMX1BBU1NXT1JEX1NJR05fSU5fTUVUSE9EIiwiTiIsIldnIiwiZW1haWwiLCJvb2JDb2RlIiwiWGciLCJwYXNzd29yZCIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJQUk9WSURFUl9JRCIsImNoIiwiZGgiLCJlaCIsImZoIiwidmVyaWZpY2F0aW9uSWQiLCJ2ZXJpZmljYXRpb25Db2RlIiwidGVtcG9yYXJ5UHJvb2YiLCJnaCIsInNlc3Npb25JbmZvIiwiaGgiLCJhdXRoIiwidmVyaWZ5Iiwic2Vzc2lvbiIsImloIiwicGhvbmVFbnJvbGxtZW50SW5mbyIsInJlY2FwdGNoYVRva2VuIiwiamgiLCJtZmFQZW5kaW5nQ3JlZGVudGlhbCIsIm1mYUVucm9sbG1lbnRJZCIsIm11bHRpRmFjdG9ySGludCIsIm11bHRpRmFjdG9yVWlkIiwicGhvbmVTaWduSW5JbmZvIiwia2giLCJsaCIsIlBIT05FX1NJR05fSU5fTUVUSE9EIiwibWgiLCJuaCIsIm9oIiwiZ2V0VWlkIiwiZXZlbnRJZCIsInVybFJlc3BvbnNlIiwic2Vzc2lvbklkIiwiZXJyb3IiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJBY3RpdmVYT2JqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJCaCIsIlhEb21haW5SZXF1ZXN0IiwiQ2giLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJvbmxvYWQiLCJvbmVycm9yIiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsInNlbmQiLCJhYm9ydCIsInNldFJlcXVlc3RIZWFkZXIiLCJnZXRSZXNwb25zZUhlYWRlciIsIkRoIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwibG9nIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJIZWFkZXJzIiwiVWgiLCJoZWFkZXJzIiwibWV0aG9kIiwiY3JlZGVudGlhbHMiLCJjYWNoZSIsImJvZHkiLCJmZXRjaCIsIlJlcXVlc3QiLCJWaCIsImFycmF5QnVmZmVyIiwiUmVhZGFibGVTdHJlYW0iLCJnZXRSZWFkZXIiLCJUZXh0RGVjb2RlciIsIldoIiwidGV4dCIsInJlYWQiLCJkZWNvZGUiLCJVaW50OEFycmF5Iiwic3RyZWFtIiwiYXBwZW5kIiwiZW50cmllcyIsIlhoIiwiUCIsIk8iLCJZaCIsIlIiLCJaaCIsIiRoIiwiYWkiLCJ0b1VwcGVyQ2FzZSIsImJpIiwiY2kiLCJGb3JtRGF0YSIsIndpdGhDcmVkZW50aWFscyIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJnZXRSZXNwb25zZSIsIm1velJlc3BvbnNlQXJyYXlCdWZmZXIiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiYXR0cmlidXRlcyIsImNoYXJzZXQiLCJDaSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGFnTmFtZSIsInJlbW92ZUNoaWxkIiwiRGkiLCJFaSIsInNlY3VyZVRva2VuVGltZW91dCIsIkZpIiwic2VjdXJlVG9rZW5IZWFkZXJzIiwiR2kiLCJmaXJlYmFzZVRpbWVvdXQiLCJIaSIsImZpcmViYXNlSGVhZGVycyIsIklpIiwibm9kZSIsIkppIiwiS2kiLCJMaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiZ2FwaSIsImNsaWVudCIsInJlcXVlc3QiLCJzZXRBcGlLZXkiLCJnZXRUb2tlbiIsInNldFRva2VuIiwicGF0aCIsImF1dGhUeXBlIiwiY2FsbGJhY2siLCJRaSIsImdyYW50X3R5cGUiLCJyZWZyZXNoX3Rva2VuIiwiUmkiLCJTaSIsIlRpIiwiVWkiLCJWaSIsIldpIiwiaWRlbnRpZmllciIsImNvbnRpbnVlVXJpIiwic2lnbmluTWV0aG9kcyIsIlhpIiwiWWkiLCJhdXRob3JpemVkRG9tYWlucyIsIlppIiwiJGkiLCJhaiIsImJqIiwicGhvdG9VcmwiLCJkZWxldGVBdHRyaWJ1dGUiLCJyZXF1ZXN0VHlwZSIsImNqIiwiZGoiLCJlaiIsIm5ld0VtYWlsIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJwaG9uZVNlc3Npb25JbmZvIiwiamoiLCJwaG9uZVZlcmlmaWNhdGlvbkluZm8iLCJraiIsInBob25lUmVzcG9uc2VJbmZvIiwibGoiLCJtaiIsImRlbGV0ZVByb3ZpZGVyIiwibmoiLCJvaiIsInBqIiwibmVlZENvbmZpcm1hdGlvbiIsImVycm9yTWVzc2FnZSIsInFqIiwicmV0dXJuSWRwQ3JlZGVudGlhbCIsInJqIiwic2oiLCJhdXRvQ3JlYXRlIiwidGoiLCJ1aiIsInZqIiwibmV3UGFzc3dvcmQiLCJ3aiIsInhqIiwiZW5kcG9pbnQiLCJZIiwieWoiLCJVIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsInJlY2FwdGNoYVNpdGVLZXkiLCJFaiIsInRva2VuIiwiVVNFUl9OT1RfRk9VTkQiLCJGaiIsInJlZnJlc2hUb2tlbiIsInJldHVyblNlY3VyZVRva2VuIiwiZXJyb3JzIiwia2V5SW52YWxpZCIsImlwUmVmZXJlckJsb2NrZWQiLCJJTlZBTElEX0NVU1RPTV9UT0tFTiIsIkNSRURFTlRJQUxfTUlTTUFUQ0giLCJNSVNTSU5HX0NVU1RPTV9UT0tFTiIsIklOVkFMSURfSURFTlRJRklFUiIsIk1JU1NJTkdfQ09OVElOVUVfVVJJIiwiSU5WQUxJRF9FTUFJTCIsIklOVkFMSURfUEFTU1dPUkQiLCJVU0VSX0RJU0FCTEVEIiwiTUlTU0lOR19QQVNTV09SRCIsIkVNQUlMX0VYSVNUUyIsIlBBU1NXT1JEX0xPR0lOX0RJU0FCTEVEIiwiSU5WQUxJRF9JRFBfUkVTUE9OU0UiLCJJTlZBTElEX1BFTkRJTkdfVE9LRU4iLCJGRURFUkFURURfVVNFUl9JRF9BTFJFQURZX0xJTktFRCIsIk1JU1NJTkdfT1JfSU5WQUxJRF9OT05DRSIsIklOVkFMSURfTUVTU0FHRV9QQVlMT0FEIiwiSU5WQUxJRF9SRUNJUElFTlRfRU1BSUwiLCJJTlZBTElEX1NFTkRFUiIsIkVNQUlMX05PVF9GT1VORCIsIlJFU0VUX1BBU1NXT1JEX0VYQ0VFRF9MSU1JVCIsIkVYUElSRURfT09CX0NPREUiLCJJTlZBTElEX09PQl9DT0RFIiwiTUlTU0lOR19PT0JfQ09ERSIsIklOVkFMSURfUFJPVklERVJfSUQiLCJDUkVERU5USUFMX1RPT19PTERfTE9HSU5fQUdBSU4iLCJJTlZBTElEX0lEX1RPS0VOIiwiVE9LRU5fRVhQSVJFRCIsIkNPUlNfVU5TVVBQT1JURUQiLCJEWU5BTUlDX0xJTktfTk9UX0FDVElWQVRFRCIsIklOVkFMSURfQVBQX0lEIiwiVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSIiwiV0VBS19QQVNTV09SRCIsIk9QRVJBVElPTl9OT1RfQUxMT1dFRCIsIlVTRVJfQ0FOQ0VMTEVEIiwiQ0FQVENIQV9DSEVDS19GQUlMRUQiLCJJTlZBTElEX0FQUF9DUkVERU5USUFMIiwiSU5WQUxJRF9DT0RFIiwiSU5WQUxJRF9QSE9ORV9OVU1CRVIiLCJJTlZBTElEX1NFU1NJT05fSU5GTyIsIklOVkFMSURfVEVNUE9SQVJZX1BST09GIiwiTUlTU0lOR19BUFBfQ1JFREVOVElBTCIsIk1JU1NJTkdfQ09ERSIsIk1JU1NJTkdfUEhPTkVfTlVNQkVSIiwiTUlTU0lOR19TRVNTSU9OX0lORk8iLCJRVU9UQV9FWENFRURFRCIsIlNFU1NJT05fRVhQSVJFRCIsIlJFSkVDVEVEX0NSRURFTlRJQUwiLCJJTlZBTElEX0NPTlRJTlVFX1VSSSIsIk1JU1NJTkdfQU5EUk9JRF9QQUNLQUdFX05BTUUiLCJNSVNTSU5HX0lPU19CVU5ETEVfSUQiLCJVTkFVVEhPUklaRURfRE9NQUlOIiwiSU5WQUxJRF9EWU5BTUlDX0xJTktfRE9NQUlOIiwiSU5WQUxJRF9PQVVUSF9DTElFTlRfSUQiLCJJTlZBTElEX0NFUlRfSEFTSCIsIlVOU1VQUE9SVEVEX1RFTkFOVF9PUEVSQVRJT04iLCJJTlZBTElEX1RFTkFOVF9JRCIsIlRFTkFOVF9JRF9NSVNNQVRDSCIsIkFETUlOX09OTFlfT1BFUkFUSU9OIiwiSU5WQUxJRF9NRkFfUEVORElOR19DUkVERU5USUFMIiwiTUZBX0VOUk9MTE1FTlRfTk9UX0ZPVU5EIiwiTUlTU0lOR19NRkFfUEVORElOR19DUkVERU5USUFMIiwiTUlTU0lOR19NRkFfRU5ST0xMTUVOVF9JRCIsIkVNQUlMX0NIQU5HRV9ORUVEU19WRVJJRklDQVRJT04iLCJTRUNPTkRfRkFDVE9SX0VYSVNUUyIsIlNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQiLCJVTlNVUFBPUlRFRF9GSVJTVF9GQUNUT1IiLCJVTlZFUklGSUVEX0VNQUlMIiwiR2oiLCJIaiIsIklqIiwid2hlcmUiLCJ1cmwiLCJtZXNzYWdlSGFuZGxlcnNGaWx0ZXIiLCJwb3NpdGlvbiIsImRvbnRjbGVhciIsInJlc3R5bGUiLCJzZXRIaWRlT25MZWF2ZSIsIkpqIiwicGluZyIsIktqIiwiTGoiLCJyZWdpc3RlciIsIk1qIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJhcHAiLCJSaiIsIlNqIiwiVGoiLCJSZWdFeHAiLCJVaiIsIlZqIiwiV2oiLCJYaiIsIllqIiwiYXV0aEV2ZW50Iiwid2ViU3RvcmFnZVN1cHBvcnQiLCJaaiIsInJlYWN0TmF0aXZlIiwiQXN5bmNTdG9yYWdlIiwiZ2V0SXRlbSIsIlQiLCJhayIsImJrIiwiY2siLCJldmVudFR5cGUiLCJwb3J0cyIsImZ1bGZpbGxlZCIsImRrIiwiZWsiLCJmayIsImdrIiwicG93Iiwic3RhcnQiLCJtZXNzYWdlQ2hhbm5lbCIsIm9uTWVzc2FnZSIsImhrIiwiaWsiLCJqayIsImtrIiwia2V5UHJvY2Vzc2VkIiwibGsiLCJtayIsImRlbGV0ZURhdGFiYXNlIiwib25zdWNjZXNzIiwibmsiLCJvbnVwZ3JhZGVuZWVkZWQiLCJyZXN1bHQiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJvYmplY3RTdG9yZU5hbWVzIiwiY29udGFpbnMiLCJvayIsInBrIiwib2JqZWN0U3RvcmUiLCJxayIsInRyYW5zYWN0aW9uIiwicmsiLCJwdXQiLCJmYmFzZV9rZXkiLCJzayIsImdldEFsbCIsIm9wZW5DdXJzb3IiLCJ0ayIsInVrIiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwic2Vzc2lvblN0b3JhZ2UiLCJFayIsIkJyb3dzZXIiLCJGayIsIk5vZGUiLCJHayIsIlJlYWN0TmF0aXZlIiwiSGsiLCJXb3JrZXIiLCJJayIsIkprIiwiS2siLCJOT05FIiwiTGsiLCJNayIsIk5rIiwiT2siLCJQayIsIlFrIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJzZXRJbnRlcnZhbCIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJjbGVhckludGVydmFsIiwiVmsiLCJXayIsIlhrIiwiWWsiLCJaayIsIiRrIiwiYWwiLCJJbnQzMkFycmF5IiwiYmwiLCJjbCIsImRsIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJpbCIsImpsIiwia2wiLCJsbCIsIm1sIiwibmwiLCJvbCIsInBsIiwicWwiLCJybCIsImliaSIsImFwbiIsImFwcERpc3BsYXlOYW1lIiwic2wiLCJ0bCIsImhhbmRsZU9wZW5VUkwiLCJ1bCIsInZsIiwid2wiLCJ4bCIsInlsIiwiemwiLCJBbCIsIkJsIiwidW5rbm93biIsInNpZ25JblZpYVJlZGlyZWN0IiwibGlua1ZpYVJlZGlyZWN0IiwicmVhdXRoVmlhUmVkaXJlY3QiLCJzaWduSW5WaWFQb3B1cCIsImxpbmtWaWFQb3B1cCIsInJlYXV0aFZpYVBvcHVwIiwiQ2wiLCJTREtfVkVSU0lPTiIsIkRsIiwiRWwiLCJGbCIsIkdsIiwiSGwiLCJJbCIsIkpsIiwiS2wiLCJMbCIsIk1sIiwiTmwiLCJPbCIsIlBsIiwiUWwiLCJSbCIsIlNsIiwiVGwiLCJVbCIsInVzZXIiLCJWbCIsIldsIiwiWGwiLCJZbCIsImNvbmZpcm0iLCJabCIsIiRsIiwiYXV0aF90aW1lIiwiaWF0IiwiZXhwaXJhdGlvblRpbWUiLCJhdXRoVGltZSIsImlzc3VlZEF0VGltZSIsInNpZ25JblByb3ZpZGVyIiwic2lnbkluU2Vjb25kRmFjdG9yIiwic2lnbl9pbl9zZWNvbmRfZmFjdG9yIiwiY2xhaW1zIiwiYW0iLCJibSIsImNtIiwiZG0iLCJlbSIsImZtIiwiZ20iLCJobSIsImltIiwiam0iLCJrbSIsImxtIiwibXVsdGlGYWN0b3IiLCJlbnJvbGxlZEZhY3RvcnMiLCJ0b0lTT1N0cmluZyIsIm1tIiwibm0iLCJtZmFJbmZvIiwib20iLCJyZWxvYWQiLCJwbSIsInFtIiwicm0iLCJzdG9wIiwic20iLCJ0bSIsInVtIiwidm0iLCJ3bSIsInhtIiwibGFzdFNpZ25JblRpbWUiLCJjcmVhdGlvblRpbWUiLCJ5bSIsImxhc3RMb2dpbkF0IiwiY3JlYXRlZEF0Iiwiem0iLCJwaG90b1VSTCIsImFwcE5hbWUiLCJhdXRoRG9tYWluIiwiQW0iLCJCbSIsIkNtIiwiWiIsIlciLCJEbSIsIiQiLCJFbSIsIkZtIiwiR20iLCJIbSIsIkltIiwiSm0iLCJLbSIsIkxtIiwiZW1haWxWZXJpZmllZCIsImlzQW5vbnltb3VzIiwibWV0YWRhdGEiLCJwcm92aWRlckRhdGEiLCJNbSIsIk5tIiwiT20iLCJQbSIsIlFtIiwiUm0iLCJTbSIsIlRtIiwiVW0iLCJ1c2VycyIsImxvY2FsSWQiLCJWbSIsInBhc3N3b3JkSGFzaCIsInByb3ZpZGVyVXNlckluZm8iLCJyYXdJZCIsIldtIiwiWG0iLCJZbSIsImFkZGl0aW9uYWxVc2VySW5mbyIsIm9wZXJhdGlvblR5cGUiLCJkZWxldGUiLCJabSIsIiRtIiwiYW4iLCJnYSIsImJuIiwiY24iLCJkbiIsInN0c1Rva2VuTWFuYWdlciIsInJlZGlyZWN0RXZlbnRJZCIsImVuIiwiZm4iLCJnbiIsImhuIiwiam4iLCJrbiIsImxuIiwibW4iLCJubiIsIm9uIiwicG4iLCJxbiIsInJuIiwic24iLCJ0biIsInVuIiwib3B0aW9ucyIsImNyZWF0ZVN1YnNjcmliZSIsInZuIiwid24iLCJ4biIsInluIiwibG9nRnJhbWV3b3JrIiwiem4iLCJBbiIsIkJuIiwibGFuZ3VhZ2VzIiwibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJjdXJyZW50VXNlciIsIkNuIiwiRG4iLCJFbiIsIkZuIiwiR24iLCJIbiIsImFkZEF1dGhUb2tlbkxpc3RlbmVyIiwiSW4iLCJKbiIsIl9sYXQiLCJyZW1vdmVBdXRoVG9rZW5MaXN0ZW5lciIsIktuIiwicmVuZGVyIiwiZXhlY3V0ZSIsIkxuIiwiTW4iLCJObiIsIk9uIiwiUG4iLCJzaXplIiwiUW4iLCJSbiIsIlNuIiwiVG4iLCJVbiIsImdyZWNhcHRjaGEiLCJJbmZpbml0eSIsIlZuIiwiV24iLCJYbiIsIlluIiwidGhlbWUiLCJabiIsIiRuIiwiaGFzQ2hpbGROb2RlcyIsImFvIiwiYm8iLCJjbyIsImVvIiwiZm8iLCJnbyIsImZpcnN0Q2hpbGQiLCJobyIsInNldHRpbmdzIiwiYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWRGb3JUZXN0aW5nIiwiaW8iLCJvcHRpb25hbCIsImpvIiwia28iLCJsbyIsIm1vIiwibm8iLCJvbyIsInBvIiwiQXBwIiwicW8iLCJybyIsInNvIiwidG8iLCJ1byIsInZvIiwid28iLCJqIiwieG8iLCJ5byIsIlBlcnNpc3RlbmNlIiwiTE9DQUwiLCJTRVNTSU9OIiwiYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWQiLCJyZWdpc3RlckNvbXBvbmVudCIsIkFjdGlvbkNvZGVJbmZvIiwiT3BlcmF0aW9uIiwiRU1BSUxfU0lHTklOIiwiUEFTU1dPUkRfUkVTRVQiLCJSRUNPVkVSX0VNQUlMIiwiUkVWRVJUX1NFQ09ORF9GQUNUT1JfQURESVRJT04iLCJWRVJJRllfQU5EX0NIQU5HRV9FTUFJTCIsIlZFUklGWV9FTUFJTCIsIkF1dGgiLCJBdXRoQ3JlZGVudGlhbCIsImluc3RhbmNlRmFjdG9yeSIsImdldFByb3ZpZGVyIiwiZ2V0SW1tZWRpYXRlIiwibXVsdGlwbGVJbnN0YW5jZXMiLCJzZXJ2aWNlUHJvcHMiLCJpbnN0YW50aWF0aW9uTW9kZSIsInJlZ2lzdGVyVmVyc2lvbiIsImV4dGVuZE5hbWVzcGFjZSIsIlVzZXIiXSwibWFwcGluZ3MiOiJBQUFBLCtDQUFDLFlBQVc7QUFBQyxNQUFJQSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsQ0FBRCxDQUFQLENBQXlCQyxPQUF4QztBQUFnRDs7Ozs7O0FBSzdELE1BQUlDLENBQUo7QUFBQSxNQUFNQyxFQUFFLEdBQUMsY0FBWSxPQUFPQyxNQUFNLENBQUNDLGdCQUExQixHQUEyQ0QsTUFBTSxDQUFDRSxjQUFsRCxHQUFpRSxVQUFTQyxDQUFULEVBQVdDLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUNGLEtBQUMsSUFBRUcsS0FBSyxDQUFDQyxTQUFULElBQW9CSixDQUFDLElBQUVILE1BQU0sQ0FBQ08sU0FBOUIsS0FBMENKLENBQUMsQ0FBQ0MsQ0FBRCxDQUFELEdBQUtDLENBQUMsQ0FBQ0csS0FBakQ7QUFBd0QsR0FBbEo7O0FBQW1KLFdBQVNDLEVBQVQsQ0FBWU4sQ0FBWixFQUFjO0FBQUNBLEtBQUMsR0FBQyxDQUFDLFlBQVUsT0FBT08sTUFBakIsSUFBeUJBLE1BQTFCLEVBQWlDLFlBQVUsT0FBT0MsSUFBakIsSUFBdUJBLElBQXhELEVBQTZELFlBQVUsT0FBT0MsTUFBakIsSUFBeUJBLE1BQXRGLEVBQTZGVCxDQUE3RixDQUFGOztBQUFrRyxTQUFJLElBQUlDLENBQUMsR0FBQyxDQUFWLEVBQVlBLENBQUMsR0FBQ0QsQ0FBQyxDQUFDVSxNQUFoQixFQUF1QixFQUFFVCxDQUF6QixFQUEyQjtBQUFDLFVBQUlDLENBQUMsR0FBQ0YsQ0FBQyxDQUFDQyxDQUFELENBQVA7QUFBVyxVQUFHQyxDQUFDLElB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QUM5dkMsQ0FBQyxDQUFDNUUsQ0FBQyxDQUFDbU8sRUFBSCxFQUFNbk8sQ0FBTixDQUEvRDtBQUF3RTgwQyxtQ0FBdUIsRUFBQ2x3QyxDQUFDLENBQUM1RSxDQUFDLENBQUNvVSxFQUFILEVBQU1wVSxDQUFOO0FBQWpHLFdBQU47QUFBaUgsU0FENlY7QUFDNVZ1NUMseUJBQWlCLEVBQUMsQ0FBQyxDQUR5VTtBQUN2VUUseUJBQWlCLEVBQUMsTUFEcVQ7QUFDOVMzcEMsWUFBSSxFQUFDO0FBRHlTLE9BQXBDO0FBQ3pQdlEsY0FBUSxDQUFDbTZDLGVBQVQsQ0FBeUIsZ0JBQXpCLEVBQTBDLFFBQTFDO0FBQW9EbjZDLGNBQVEsQ0FBQ3lmLFFBQVQsQ0FBa0IyNkIsZUFBbEIsQ0FBa0M7QUFBQ0MsWUFBSSxFQUFDem1CO0FBQU4sT0FBbEM7QUFBNEMsS0FGeFUsTUFFNlUsTUFBTXp3QixLQUFLLENBQUMsNkZBQUQsQ0FBWDtBQUE0RyxHQUZyYztBQUUwYyxDQTlhMWMsRUE4YTRjNEIsS0E5YTVjLENBOGFrZCxPQUFPOUQsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBaEMsR0FBeUMsT0FBT0QsSUFBUCxLQUFnQixXQUFoQixHQUE4QkEsSUFBOUIsR0FBcUMsT0FBT0QsTUFBUCxLQUFrQixXQUFsQixHQUFnQ0EsTUFBaEMsR0FBeUMsRUE5YXprQixFIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge3ZhciBmaXJlYmFzZSA9IHJlcXVpcmUoJ0BmaXJlYmFzZS9hcHAnKS5kZWZhdWx0Oy8qXG5cbiBDb3B5cmlnaHQgVGhlIENsb3N1cmUgTGlicmFyeSBBdXRob3JzLlxuIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4qL1xudmFyIGssYWE9XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnRpZXM/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGEsYixjKXthIT1BcnJheS5wcm90b3R5cGUmJmEhPU9iamVjdC5wcm90b3R5cGUmJihhW2JdPWMudmFsdWUpfTtmdW5jdGlvbiBiYShhKXthPVtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3csXCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYsXCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLGFdO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7KytiKXt2YXIgYz1hW2JdO2lmKGMmJmMuTWF0aD09TWF0aClyZXR1cm4gY31yZXR1cm4gZ2xvYmFsVGhpc312YXIgY2E9YmEodGhpcyk7XG5mdW5jdGlvbiBkYShhLGIpe2lmKGIpe3ZhciBjPWNhO2E9YS5zcGxpdChcIi5cIik7Zm9yKHZhciBkPTA7ZDxhLmxlbmd0aC0xO2QrKyl7dmFyIGU9YVtkXTtlIGluIGN8fChjW2VdPXt9KTtjPWNbZV19YT1hW2EubGVuZ3RoLTFdO2Q9Y1thXTtiPWIoZCk7YiE9ZCYmbnVsbCE9YiYmYWEoYyxhLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6Yn0pfX1mdW5jdGlvbiBlYShhKXt2YXIgYj0wO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiPGEubGVuZ3RoP3tkb25lOiExLHZhbHVlOmFbYisrXX06e2RvbmU6ITB9fX1mdW5jdGlvbiBmYShhKXt2YXIgYj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3ImJmFbU3ltYm9sLml0ZXJhdG9yXTtyZXR1cm4gYj9iLmNhbGwoYSk6e25leHQ6ZWEoYSl9fVxuZGEoXCJQcm9taXNlXCIsZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihnKXt0aGlzLmI9MDt0aGlzLmM9dm9pZCAwO3RoaXMuYT1bXTt2YXIgaD10aGlzLmYoKTt0cnl7ZyhoLnJlc29sdmUsaC5yZWplY3QpfWNhdGNoKG0pe2gucmVqZWN0KG0pfX1mdW5jdGlvbiBjKCl7dGhpcy5hPW51bGx9ZnVuY3Rpb24gZChnKXtyZXR1cm4gZyBpbnN0YW5jZW9mIGI/ZzpuZXcgYihmdW5jdGlvbihoKXtoKGcpfSl9aWYoYSlyZXR1cm4gYTtjLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGcpe2lmKG51bGw9PXRoaXMuYSl7dGhpcy5hPVtdO3ZhciBoPXRoaXM7dGhpcy5jKGZ1bmN0aW9uKCl7aC5nKCl9KX10aGlzLmEucHVzaChnKX07dmFyIGU9Y2Euc2V0VGltZW91dDtjLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGcpe2UoZywwKX07Yy5wcm90b3R5cGUuZz1mdW5jdGlvbigpe2Zvcig7dGhpcy5hJiZ0aGlzLmEubGVuZ3RoOyl7dmFyIGc9dGhpcy5hO3RoaXMuYT1bXTtmb3IodmFyIGg9MDtoPGcubGVuZ3RoOysraCl7dmFyIG09XG5nW2hdO2dbaF09bnVsbDt0cnl7bSgpfWNhdGNoKHApe3RoaXMuZihwKX19fXRoaXMuYT1udWxsfTtjLnByb3RvdHlwZS5mPWZ1bmN0aW9uKGcpe3RoaXMuYyhmdW5jdGlvbigpe3Rocm93IGc7fSl9O2IucHJvdG90eXBlLmY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBnKHApe3JldHVybiBmdW5jdGlvbih2KXttfHwobT0hMCxwLmNhbGwoaCx2KSl9fXZhciBoPXRoaXMsbT0hMTtyZXR1cm57cmVzb2x2ZTpnKHRoaXMubSkscmVqZWN0OmcodGhpcy5nKX19O2IucHJvdG90eXBlLm09ZnVuY3Rpb24oZyl7aWYoZz09PXRoaXMpdGhpcy5nKG5ldyBUeXBlRXJyb3IoXCJBIFByb21pc2UgY2Fubm90IHJlc29sdmUgdG8gaXRzZWxmXCIpKTtlbHNlIGlmKGcgaW5zdGFuY2VvZiBiKXRoaXMucyhnKTtlbHNle2E6c3dpdGNoKHR5cGVvZiBnKXtjYXNlIFwib2JqZWN0XCI6dmFyIGg9bnVsbCE9ZzticmVhayBhO2Nhc2UgXCJmdW5jdGlvblwiOmg9ITA7YnJlYWsgYTtkZWZhdWx0Omg9ITF9aD90aGlzLnUoZyk6dGhpcy5oKGcpfX07XG5iLnByb3RvdHlwZS51PWZ1bmN0aW9uKGcpe3ZhciBoPXZvaWQgMDt0cnl7aD1nLnRoZW59Y2F0Y2gobSl7dGhpcy5nKG0pO3JldHVybn1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoP3RoaXMudyhoLGcpOnRoaXMuaChnKX07Yi5wcm90b3R5cGUuZz1mdW5jdGlvbihnKXt0aGlzLmkoMixnKX07Yi5wcm90b3R5cGUuaD1mdW5jdGlvbihnKXt0aGlzLmkoMSxnKX07Yi5wcm90b3R5cGUuaT1mdW5jdGlvbihnLGgpe2lmKDAhPXRoaXMuYil0aHJvdyBFcnJvcihcIkNhbm5vdCBzZXR0bGUoXCIrZytcIiwgXCIraCtcIik6IFByb21pc2UgYWxyZWFkeSBzZXR0bGVkIGluIHN0YXRlXCIrdGhpcy5iKTt0aGlzLmI9Zzt0aGlzLmM9aDt0aGlzLmwoKX07Yi5wcm90b3R5cGUubD1mdW5jdGlvbigpe2lmKG51bGwhPXRoaXMuYSl7Zm9yKHZhciBnPTA7Zzx0aGlzLmEubGVuZ3RoOysrZylmLmIodGhpcy5hW2ddKTt0aGlzLmE9bnVsbH19O3ZhciBmPW5ldyBjO2IucHJvdG90eXBlLnM9ZnVuY3Rpb24oZyl7dmFyIGg9dGhpcy5mKCk7XG5nLk9hKGgucmVzb2x2ZSxoLnJlamVjdCl9O2IucHJvdG90eXBlLnc9ZnVuY3Rpb24oZyxoKXt2YXIgbT10aGlzLmYoKTt0cnl7Zy5jYWxsKGgsbS5yZXNvbHZlLG0ucmVqZWN0KX1jYXRjaChwKXttLnJlamVjdChwKX19O2IucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oZyxoKXtmdW5jdGlvbiBtKEEsUSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgQT9mdW5jdGlvbih3YSl7dHJ5e3AoQSh3YSkpfWNhdGNoKHVkKXt2KHVkKX19OlF9dmFyIHAsdixDPW5ldyBiKGZ1bmN0aW9uKEEsUSl7cD1BO3Y9UX0pO3RoaXMuT2EobShnLHApLG0oaCx2KSk7cmV0dXJuIEN9O2IucHJvdG90eXBlLmNhdGNoPWZ1bmN0aW9uKGcpe3JldHVybiB0aGlzLnRoZW4odm9pZCAwLGcpfTtiLnByb3RvdHlwZS5PYT1mdW5jdGlvbihnLGgpe2Z1bmN0aW9uIG0oKXtzd2l0Y2gocC5iKXtjYXNlIDE6ZyhwLmMpO2JyZWFrO2Nhc2UgMjpoKHAuYyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVuZXhwZWN0ZWQgc3RhdGU6IFwiK1xucC5iKTt9fXZhciBwPXRoaXM7bnVsbD09dGhpcy5hP2YuYihtKTp0aGlzLmEucHVzaChtKX07Yi5yZXNvbHZlPWQ7Yi5yZWplY3Q9ZnVuY3Rpb24oZyl7cmV0dXJuIG5ldyBiKGZ1bmN0aW9uKGgsbSl7bShnKX0pfTtiLnJhY2U9ZnVuY3Rpb24oZyl7cmV0dXJuIG5ldyBiKGZ1bmN0aW9uKGgsbSl7Zm9yKHZhciBwPWZhKGcpLHY9cC5uZXh0KCk7IXYuZG9uZTt2PXAubmV4dCgpKWQodi52YWx1ZSkuT2EoaCxtKX0pfTtiLmFsbD1mdW5jdGlvbihnKXt2YXIgaD1mYShnKSxtPWgubmV4dCgpO3JldHVybiBtLmRvbmU/ZChbXSk6bmV3IGIoZnVuY3Rpb24ocCx2KXtmdW5jdGlvbiBDKHdhKXtyZXR1cm4gZnVuY3Rpb24odWQpe0Fbd2FdPXVkO1EtLTswPT1RJiZwKEEpfX12YXIgQT1bXSxRPTA7ZG8gQS5wdXNoKHZvaWQgMCksUSsrLGQobS52YWx1ZSkuT2EoQyhBLmxlbmd0aC0xKSx2KSxtPWgubmV4dCgpO3doaWxlKCFtLmRvbmUpfSl9O3JldHVybiBifSk7XG52YXIgaGE9aGF8fHt9LGw9dGhpc3x8c2VsZixpYT0vXltcXHcrL18tXStbPV17MCwyfSQvLGphPW51bGw7ZnVuY3Rpb24ga2EoKXt9XG5mdW5jdGlvbiBsYShhKXt2YXIgYj10eXBlb2YgYTtpZihcIm9iamVjdFwiPT1iKWlmKGEpe2lmKGEgaW5zdGFuY2VvZiBBcnJheSlyZXR1cm5cImFycmF5XCI7aWYoYSBpbnN0YW5jZW9mIE9iamVjdClyZXR1cm4gYjt2YXIgYz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSk7aWYoXCJbb2JqZWN0IFdpbmRvd11cIj09YylyZXR1cm5cIm9iamVjdFwiO2lmKFwiW29iamVjdCBBcnJheV1cIj09Y3x8XCJudW1iZXJcIj09dHlwZW9mIGEubGVuZ3RoJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5zcGxpY2UmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnByb3BlcnR5SXNFbnVtZXJhYmxlJiYhYS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcInNwbGljZVwiKSlyZXR1cm5cImFycmF5XCI7aWYoXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT1jfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5jYWxsJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5wcm9wZXJ0eUlzRW51bWVyYWJsZSYmIWEucHJvcGVydHlJc0VudW1lcmFibGUoXCJjYWxsXCIpKXJldHVyblwiZnVuY3Rpb25cIn1lbHNlIHJldHVyblwibnVsbFwiO1xuZWxzZSBpZihcImZ1bmN0aW9uXCI9PWImJlwidW5kZWZpbmVkXCI9PXR5cGVvZiBhLmNhbGwpcmV0dXJuXCJvYmplY3RcIjtyZXR1cm4gYn1mdW5jdGlvbiBtYShhKXt2YXIgYj1sYShhKTtyZXR1cm5cImFycmF5XCI9PWJ8fFwib2JqZWN0XCI9PWImJlwibnVtYmVyXCI9PXR5cGVvZiBhLmxlbmd0aH1mdW5jdGlvbiBuYShhKXtyZXR1cm5cImZ1bmN0aW9uXCI9PWxhKGEpfWZ1bmN0aW9uIG4oYSl7dmFyIGI9dHlwZW9mIGE7cmV0dXJuXCJvYmplY3RcIj09YiYmbnVsbCE9YXx8XCJmdW5jdGlvblwiPT1ifWZ1bmN0aW9uIG9hKGEpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxwYSkmJmFbcGFdfHwoYVtwYV09KytxYSl9dmFyIHBhPVwiY2xvc3VyZV91aWRfXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCkscWE9MDtmdW5jdGlvbiByYShhLGIsYyl7cmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIHNhKGEsYixjKXtpZighYSl0aHJvdyBFcnJvcigpO2lmKDI8YXJndW1lbnRzLmxlbmd0aCl7dmFyIGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7QXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoZSxkKTtyZXR1cm4gYS5hcHBseShiLGUpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShiLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHEoYSxiLGMpe0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kJiYtMSE9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQudG9TdHJpbmcoKS5pbmRleE9mKFwibmF0aXZlIGNvZGVcIik/cT1yYTpxPXNhO3JldHVybiBxLmFwcGx5KG51bGwsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIHRhKGEsYil7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBmdW5jdGlvbigpe3ZhciBkPWMuc2xpY2UoKTtkLnB1c2guYXBwbHkoZCxhcmd1bWVudHMpO3JldHVybiBhLmFwcGx5KHRoaXMsZCl9fXZhciB1YT1EYXRlLm5vd3x8ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGV9O2Z1bmN0aW9uIHIoYSxiKXtmdW5jdGlvbiBjKCl7fWMucHJvdG90eXBlPWIucHJvdG90eXBlO2EuWmE9Yi5wcm90b3R5cGU7YS5wcm90b3R5cGU9bmV3IGM7YS5wcm90b3R5cGUuY29uc3RydWN0b3I9YX07LypcblxuIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG5cbiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcblxuICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cbiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5mdW5jdGlvbiB0KGEsYixjKXt0aGlzLmNvZGU9dmErYTt0aGlzLm1lc3NhZ2U9Ynx8eGFbYV18fFwiXCI7dGhpcy5hPWN8fG51bGx9cih0LEVycm9yKTt0LnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dmFyIGE9e2NvZGU6dGhpcy5jb2RlLG1lc3NhZ2U6dGhpcy5tZXNzYWdlfTt0aGlzLmEmJihhLnNlcnZlclJlc3BvbnNlPXRoaXMuYSk7cmV0dXJuIGF9O3QucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnYoKX07ZnVuY3Rpb24geWEoYSl7dmFyIGI9YSYmYS5jb2RlO3JldHVybiBiP25ldyB0KGIuc3Vic3RyaW5nKHZhLmxlbmd0aCksYS5tZXNzYWdlLGEuc2VydmVyUmVzcG9uc2UpOm51bGx9XG52YXIgdmE9XCJhdXRoL1wiLHhhPXtcImFkbWluLXJlc3RyaWN0ZWQtb3BlcmF0aW9uXCI6XCJUaGlzIG9wZXJhdGlvbiBpcyByZXN0cmljdGVkIHRvIGFkbWluaXN0cmF0b3JzIG9ubHkuXCIsXCJhcmd1bWVudC1lcnJvclwiOlwiXCIsXCJhcHAtbm90LWF1dGhvcml6ZWRcIjpcIlRoaXMgYXBwLCBpZGVudGlmaWVkIGJ5IHRoZSBkb21haW4gd2hlcmUgaXQncyBob3N0ZWQsIGlzIG5vdCBhdXRob3JpemVkIHRvIHVzZSBGaXJlYmFzZSBBdXRoZW50aWNhdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBBUEkga2V5LiBSZXZpZXcgeW91ciBrZXkgY29uZmlndXJhdGlvbiBpbiB0aGUgR29vZ2xlIEFQSSBjb25zb2xlLlwiLFwiYXBwLW5vdC1pbnN0YWxsZWRcIjpcIlRoZSByZXF1ZXN0ZWQgbW9iaWxlIGFwcGxpY2F0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGlkZW50aWZpZXIgKEFuZHJvaWQgcGFja2FnZSBuYW1lIG9yIGlPUyBidW5kbGUgSUQpIHByb3ZpZGVkIGlzIG5vdCBpbnN0YWxsZWQgb24gdGhpcyBkZXZpY2UuXCIsXG5cImNhcHRjaGEtY2hlY2stZmFpbGVkXCI6XCJUaGUgcmVDQVBUQ0hBIHJlc3BvbnNlIHRva2VuIHByb3ZpZGVkIGlzIGVpdGhlciBpbnZhbGlkLCBleHBpcmVkLCBhbHJlYWR5IHVzZWQgb3IgdGhlIGRvbWFpbiBhc3NvY2lhdGVkIHdpdGggaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGxpc3Qgb2Ygd2hpdGVsaXN0ZWQgZG9tYWlucy5cIixcImNvZGUtZXhwaXJlZFwiOlwiVGhlIFNNUyBjb2RlIGhhcyBleHBpcmVkLiBQbGVhc2UgcmUtc2VuZCB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgdG8gdHJ5IGFnYWluLlwiLFwiY29yZG92YS1ub3QtcmVhZHlcIjpcIkNvcmRvdmEgZnJhbWV3b3JrIGlzIG5vdCByZWFkeS5cIixcImNvcnMtdW5zdXBwb3J0ZWRcIjpcIlRoaXMgYnJvd3NlciBpcyBub3Qgc3VwcG9ydGVkLlwiLFwiY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiOlwiVGhpcyBjcmVkZW50aWFsIGlzIGFscmVhZHkgYXNzb2NpYXRlZCB3aXRoIGEgZGlmZmVyZW50IHVzZXIgYWNjb3VudC5cIixcImN1c3RvbS10b2tlbi1taXNtYXRjaFwiOlwiVGhlIGN1c3RvbSB0b2tlbiBjb3JyZXNwb25kcyB0byBhIGRpZmZlcmVudCBhdWRpZW5jZS5cIixcblwicmVxdWlyZXMtcmVjZW50LWxvZ2luXCI6XCJUaGlzIG9wZXJhdGlvbiBpcyBzZW5zaXRpdmUgYW5kIHJlcXVpcmVzIHJlY2VudCBhdXRoZW50aWNhdGlvbi4gTG9nIGluIGFnYWluIGJlZm9yZSByZXRyeWluZyB0aGlzIHJlcXVlc3QuXCIsXCJkeW5hbWljLWxpbmstbm90LWFjdGl2YXRlZFwiOlwiUGxlYXNlIGFjdGl2YXRlIER5bmFtaWMgTGlua3MgaW4gdGhlIEZpcmViYXNlIENvbnNvbGUgYW5kIGFncmVlIHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucy5cIixcImVtYWlsLWNoYW5nZS1uZWVkcy12ZXJpZmljYXRpb25cIjpcIk11bHRpLWZhY3RvciB1c2VycyBtdXN0IGFsd2F5cyBoYXZlIGEgdmVyaWZpZWQgZW1haWwuXCIsXCJlbWFpbC1hbHJlYWR5LWluLXVzZVwiOlwiVGhlIGVtYWlsIGFkZHJlc3MgaXMgYWxyZWFkeSBpbiB1c2UgYnkgYW5vdGhlciBhY2NvdW50LlwiLFwiZXhwaXJlZC1hY3Rpb24tY29kZVwiOlwiVGhlIGFjdGlvbiBjb2RlIGhhcyBleHBpcmVkLiBcIixcImNhbmNlbGxlZC1wb3B1cC1yZXF1ZXN0XCI6XCJUaGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBjYW5jZWxsZWQgZHVlIHRvIGFub3RoZXIgY29uZmxpY3RpbmcgcG9wdXAgYmVpbmcgb3BlbmVkLlwiLFxuXCJpbnRlcm5hbC1lcnJvclwiOlwiQW4gaW50ZXJuYWwgZXJyb3IgaGFzIG9jY3VycmVkLlwiLFwiaW52YWxpZC1hcHAtY3JlZGVudGlhbFwiOlwiVGhlIHBob25lIHZlcmlmaWNhdGlvbiByZXF1ZXN0IGNvbnRhaW5zIGFuIGludmFsaWQgYXBwbGljYXRpb24gdmVyaWZpZXIuIFRoZSByZUNBUFRDSEEgdG9rZW4gcmVzcG9uc2UgaXMgZWl0aGVyIGludmFsaWQgb3IgZXhwaXJlZC5cIixcImludmFsaWQtYXBwLWlkXCI6XCJUaGUgbW9iaWxlIGFwcCBpZGVudGlmaWVyIGlzIG5vdCByZWdpc3RlZCBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdC5cIixcImludmFsaWQtdXNlci10b2tlblwiOlwiVGhpcyB1c2VyJ3MgY3JlZGVudGlhbCBpc24ndCB2YWxpZCBmb3IgdGhpcyBwcm9qZWN0LiBUaGlzIGNhbiBoYXBwZW4gaWYgdGhlIHVzZXIncyB0b2tlbiBoYXMgYmVlbiB0YW1wZXJlZCB3aXRoLCBvciBpZiB0aGUgdXNlciBpc24ndCBmb3IgdGhlIHByb2plY3QgYXNzb2NpYXRlZCB3aXRoIHRoaXMgQVBJIGtleS5cIixcImludmFsaWQtYXV0aC1ldmVudFwiOlwiQW4gaW50ZXJuYWwgZXJyb3IgaGFzIG9jY3VycmVkLlwiLFxuXCJpbnZhbGlkLXZlcmlmaWNhdGlvbi1jb2RlXCI6XCJUaGUgU01TIHZlcmlmaWNhdGlvbiBjb2RlIHVzZWQgdG8gY3JlYXRlIHRoZSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwgaXMgaW52YWxpZC4gUGxlYXNlIHJlc2VuZCB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgc21zIGFuZCBiZSBzdXJlIHVzZSB0aGUgdmVyaWZpY2F0aW9uIGNvZGUgcHJvdmlkZWQgYnkgdGhlIHVzZXIuXCIsXCJpbnZhbGlkLWNvbnRpbnVlLXVyaVwiOlwiVGhlIGNvbnRpbnVlIFVSTCBwcm92aWRlZCBpbiB0aGUgcmVxdWVzdCBpcyBpbnZhbGlkLlwiLFwiaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIjpcIlRoZSBmb2xsb3dpbmcgQ29yZG92YSBwbHVnaW5zIG11c3QgYmUgaW5zdGFsbGVkIHRvIGVuYWJsZSBPQXV0aCBzaWduLWluOiBjb3Jkb3ZhLXBsdWdpbi1idWlsZGluZm8sIGNvcmRvdmEtdW5pdmVyc2FsLWxpbmtzLXBsdWdpbiwgY29yZG92YS1wbHVnaW4tYnJvd3NlcnRhYiwgY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyIGFuZCBjb3Jkb3ZhLXBsdWdpbi1jdXN0b211cmxzY2hlbWUuXCIsXG5cImludmFsaWQtY3VzdG9tLXRva2VuXCI6XCJUaGUgY3VzdG9tIHRva2VuIGZvcm1hdCBpcyBpbmNvcnJlY3QuIFBsZWFzZSBjaGVjayB0aGUgZG9jdW1lbnRhdGlvbi5cIixcImludmFsaWQtZHluYW1pYy1saW5rLWRvbWFpblwiOlwiVGhlIHByb3ZpZGVkIGR5bmFtaWMgbGluayBkb21haW4gaXMgbm90IGNvbmZpZ3VyZWQgb3IgYXV0aG9yaXplZCBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdC5cIixcImludmFsaWQtZW1haWxcIjpcIlRoZSBlbWFpbCBhZGRyZXNzIGlzIGJhZGx5IGZvcm1hdHRlZC5cIixcImludmFsaWQtYXBpLWtleVwiOlwiWW91ciBBUEkga2V5IGlzIGludmFsaWQsIHBsZWFzZSBjaGVjayB5b3UgaGF2ZSBjb3BpZWQgaXQgY29ycmVjdGx5LlwiLFwiaW52YWxpZC1jZXJ0LWhhc2hcIjpcIlRoZSBTSEEtMSBjZXJ0aWZpY2F0ZSBoYXNoIHByb3ZpZGVkIGlzIGludmFsaWQuXCIsXCJpbnZhbGlkLWNyZWRlbnRpYWxcIjpcIlRoZSBzdXBwbGllZCBhdXRoIGNyZWRlbnRpYWwgaXMgbWFsZm9ybWVkIG9yIGhhcyBleHBpcmVkLlwiLFxuXCJpbnZhbGlkLW1lc3NhZ2UtcGF5bG9hZFwiOlwiVGhlIGVtYWlsIHRlbXBsYXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBhY3Rpb24gY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIGluIGl0cyBtZXNzYWdlLiBQbGVhc2UgZml4IGJ5IGdvaW5nIHRvIHRoZSBBdXRoIGVtYWlsIHRlbXBsYXRlcyBzZWN0aW9uIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlLlwiLFwiaW52YWxpZC1tdWx0aS1mYWN0b3Itc2Vzc2lvblwiOlwiVGhlIHJlcXVlc3QgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIHByb29mIG9mIGZpcnN0IGZhY3RvciBzdWNjZXNzZnVsIHNpZ24taW4uXCIsXCJpbnZhbGlkLW9hdXRoLXByb3ZpZGVyXCI6XCJFbWFpbEF1dGhQcm92aWRlciBpcyBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIG9wZXJhdGlvbi4gVGhpcyBvcGVyYXRpb24gb25seSBzdXBwb3J0cyBPQXV0aCBwcm92aWRlcnMuXCIsXCJpbnZhbGlkLW9hdXRoLWNsaWVudC1pZFwiOlwiVGhlIE9BdXRoIGNsaWVudCBJRCBwcm92aWRlZCBpcyBlaXRoZXIgaW52YWxpZCBvciBkb2VzIG5vdCBtYXRjaCB0aGUgc3BlY2lmaWVkIEFQSSBrZXkuXCIsXG5cInVuYXV0aG9yaXplZC1kb21haW5cIjpcIlRoaXMgZG9tYWluIGlzIG5vdCBhdXRob3JpemVkIGZvciBPQXV0aCBvcGVyYXRpb25zIGZvciB5b3VyIEZpcmViYXNlIHByb2plY3QuIEVkaXQgdGhlIGxpc3Qgb2YgYXV0aG9yaXplZCBkb21haW5zIGZyb20gdGhlIEZpcmViYXNlIGNvbnNvbGUuXCIsXCJpbnZhbGlkLWFjdGlvbi1jb2RlXCI6XCJUaGUgYWN0aW9uIGNvZGUgaXMgaW52YWxpZC4gVGhpcyBjYW4gaGFwcGVuIGlmIHRoZSBjb2RlIGlzIG1hbGZvcm1lZCwgZXhwaXJlZCwgb3IgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiLFwid3JvbmctcGFzc3dvcmRcIjpcIlRoZSBwYXNzd29yZCBpcyBpbnZhbGlkIG9yIHRoZSB1c2VyIGRvZXMgbm90IGhhdmUgYSBwYXNzd29yZC5cIixcImludmFsaWQtcGVyc2lzdGVuY2UtdHlwZVwiOlwiVGhlIHNwZWNpZmllZCBwZXJzaXN0ZW5jZSB0eXBlIGlzIGludmFsaWQuIEl0IGNhbiBvbmx5IGJlIGxvY2FsLCBzZXNzaW9uIG9yIG5vbmUuXCIsXCJpbnZhbGlkLXBob25lLW51bWJlclwiOlwiVGhlIGZvcm1hdCBvZiB0aGUgcGhvbmUgbnVtYmVyIHByb3ZpZGVkIGlzIGluY29ycmVjdC4gUGxlYXNlIGVudGVyIHRoZSBwaG9uZSBudW1iZXIgaW4gYSBmb3JtYXQgdGhhdCBjYW4gYmUgcGFyc2VkIGludG8gRS4xNjQgZm9ybWF0LiBFLjE2NCBwaG9uZSBudW1iZXJzIGFyZSB3cml0dGVuIGluIHRoZSBmb3JtYXQgWytdW2NvdW50cnkgY29kZV1bc3Vic2NyaWJlciBudW1iZXIgaW5jbHVkaW5nIGFyZWEgY29kZV0uXCIsXG5cImludmFsaWQtcHJvdmlkZXItaWRcIjpcIlRoZSBzcGVjaWZpZWQgcHJvdmlkZXIgSUQgaXMgaW52YWxpZC5cIixcImludmFsaWQtcmVjaXBpZW50LWVtYWlsXCI6XCJUaGUgZW1haWwgY29ycmVzcG9uZGluZyB0byB0aGlzIGFjdGlvbiBmYWlsZWQgdG8gc2VuZCBhcyB0aGUgcHJvdmlkZWQgcmVjaXBpZW50IGVtYWlsIGFkZHJlc3MgaXMgaW52YWxpZC5cIixcImludmFsaWQtc2VuZGVyXCI6XCJUaGUgZW1haWwgdGVtcGxhdGUgY29ycmVzcG9uZGluZyB0byB0aGlzIGFjdGlvbiBjb250YWlucyBhbiBpbnZhbGlkIHNlbmRlciBlbWFpbCBvciBuYW1lLiBQbGVhc2UgZml4IGJ5IGdvaW5nIHRvIHRoZSBBdXRoIGVtYWlsIHRlbXBsYXRlcyBzZWN0aW9uIGluIHRoZSBGaXJlYmFzZSBDb25zb2xlLlwiLFwiaW52YWxpZC12ZXJpZmljYXRpb24taWRcIjpcIlRoZSB2ZXJpZmljYXRpb24gSUQgdXNlZCB0byBjcmVhdGUgdGhlIHBob25lIGF1dGggY3JlZGVudGlhbCBpcyBpbnZhbGlkLlwiLFwiaW52YWxpZC10ZW5hbnQtaWRcIjpcIlRoZSBBdXRoIGluc3RhbmNlJ3MgdGVuYW50IElEIGlzIGludmFsaWQuXCIsXG5cIm11bHRpLWZhY3Rvci1pbmZvLW5vdC1mb3VuZFwiOlwiVGhlIHVzZXIgZG9lcyBub3QgaGF2ZSBhIHNlY29uZCBmYWN0b3IgbWF0Y2hpbmcgdGhlIGlkZW50aWZpZXIgcHJvdmlkZWQuXCIsXCJtdWx0aS1mYWN0b3ItYXV0aC1yZXF1aXJlZFwiOlwiUHJvb2Ygb2Ygb3duZXJzaGlwIG9mIGEgc2Vjb25kIGZhY3RvciBpcyByZXF1aXJlZCB0byBjb21wbGV0ZSBzaWduLWluLlwiLFwibWlzc2luZy1hbmRyb2lkLXBrZy1uYW1lXCI6XCJBbiBBbmRyb2lkIFBhY2thZ2UgTmFtZSBtdXN0IGJlIHByb3ZpZGVkIGlmIHRoZSBBbmRyb2lkIEFwcCBpcyByZXF1aXJlZCB0byBiZSBpbnN0YWxsZWQuXCIsXCJhdXRoLWRvbWFpbi1jb25maWctcmVxdWlyZWRcIjpcIkJlIHN1cmUgdG8gaW5jbHVkZSBhdXRoRG9tYWluIHdoZW4gY2FsbGluZyBmaXJlYmFzZS5pbml0aWFsaXplQXBwKCksIGJ5IGZvbGxvd2luZyB0aGUgaW5zdHJ1Y3Rpb25zIGluIHRoZSBGaXJlYmFzZSBjb25zb2xlLlwiLFwibWlzc2luZy1hcHAtY3JlZGVudGlhbFwiOlwiVGhlIHBob25lIHZlcmlmaWNhdGlvbiByZXF1ZXN0IGlzIG1pc3NpbmcgYW4gYXBwbGljYXRpb24gdmVyaWZpZXIgYXNzZXJ0aW9uLiBBIHJlQ0FQVENIQSByZXNwb25zZSB0b2tlbiBuZWVkcyB0byBiZSBwcm92aWRlZC5cIixcblwibWlzc2luZy12ZXJpZmljYXRpb24tY29kZVwiOlwiVGhlIHBob25lIGF1dGggY3JlZGVudGlhbCB3YXMgY3JlYXRlZCB3aXRoIGFuIGVtcHR5IFNNUyB2ZXJpZmljYXRpb24gY29kZS5cIixcIm1pc3NpbmctY29udGludWUtdXJpXCI6XCJBIGNvbnRpbnVlIFVSTCBtdXN0IGJlIHByb3ZpZGVkIGluIHRoZSByZXF1ZXN0LlwiLFwibWlzc2luZy1pZnJhbWUtc3RhcnRcIjpcIkFuIGludGVybmFsIGVycm9yIGhhcyBvY2N1cnJlZC5cIixcIm1pc3NpbmctaW9zLWJ1bmRsZS1pZFwiOlwiQW4gaU9TIEJ1bmRsZSBJRCBtdXN0IGJlIHByb3ZpZGVkIGlmIGFuIEFwcCBTdG9yZSBJRCBpcyBwcm92aWRlZC5cIixcIm1pc3NpbmctbXVsdGktZmFjdG9yLWluZm9cIjpcIk5vIHNlY29uZCBmYWN0b3IgaWRlbnRpZmllciBpcyBwcm92aWRlZC5cIixcIm1pc3NpbmctbXVsdGktZmFjdG9yLXNlc3Npb25cIjpcIlRoZSByZXF1ZXN0IGlzIG1pc3NpbmcgcHJvb2Ygb2YgZmlyc3QgZmFjdG9yIHN1Y2Nlc3NmdWwgc2lnbi1pbi5cIixcIm1pc3Npbmctb3ItaW52YWxpZC1ub25jZVwiOlwiVGhlIHJlcXVlc3QgZG9lcyBub3QgY29udGFpbiBhIHZhbGlkIG5vbmNlLiBUaGlzIGNhbiBvY2N1ciBpZiB0aGUgU0hBLTI1NiBoYXNoIG9mIHRoZSBwcm92aWRlZCByYXcgbm9uY2UgZG9lcyBub3QgbWF0Y2ggdGhlIGhhc2hlZCBub25jZSBpbiB0aGUgSUQgdG9rZW4gcGF5bG9hZC5cIixcblwibWlzc2luZy1waG9uZS1udW1iZXJcIjpcIlRvIHNlbmQgdmVyaWZpY2F0aW9uIGNvZGVzLCBwcm92aWRlIGEgcGhvbmUgbnVtYmVyIGZvciB0aGUgcmVjaXBpZW50LlwiLFwibWlzc2luZy12ZXJpZmljYXRpb24taWRcIjpcIlRoZSBwaG9uZSBhdXRoIGNyZWRlbnRpYWwgd2FzIGNyZWF0ZWQgd2l0aCBhbiBlbXB0eSB2ZXJpZmljYXRpb24gSUQuXCIsXCJhcHAtZGVsZXRlZFwiOlwiVGhpcyBpbnN0YW5jZSBvZiBGaXJlYmFzZUFwcCBoYXMgYmVlbiBkZWxldGVkLlwiLFwiYWNjb3VudC1leGlzdHMtd2l0aC1kaWZmZXJlbnQtY3JlZGVudGlhbFwiOlwiQW4gYWNjb3VudCBhbHJlYWR5IGV4aXN0cyB3aXRoIHRoZSBzYW1lIGVtYWlsIGFkZHJlc3MgYnV0IGRpZmZlcmVudCBzaWduLWluIGNyZWRlbnRpYWxzLiBTaWduIGluIHVzaW5nIGEgcHJvdmlkZXIgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZW1haWwgYWRkcmVzcy5cIixcIm5ldHdvcmstcmVxdWVzdC1mYWlsZWRcIjpcIkEgbmV0d29yayBlcnJvciAoc3VjaCBhcyB0aW1lb3V0LCBpbnRlcnJ1cHRlZCBjb25uZWN0aW9uIG9yIHVucmVhY2hhYmxlIGhvc3QpIGhhcyBvY2N1cnJlZC5cIixcblwibm8tYXV0aC1ldmVudFwiOlwiQW4gaW50ZXJuYWwgZXJyb3IgaGFzIG9jY3VycmVkLlwiLFwibm8tc3VjaC1wcm92aWRlclwiOlwiVXNlciB3YXMgbm90IGxpbmtlZCB0byBhbiBhY2NvdW50IHdpdGggdGhlIGdpdmVuIHByb3ZpZGVyLlwiLFwibnVsbC11c2VyXCI6XCJBIG51bGwgdXNlciBvYmplY3Qgd2FzIHByb3ZpZGVkIGFzIHRoZSBhcmd1bWVudCBmb3IgYW4gb3BlcmF0aW9uIHdoaWNoIHJlcXVpcmVzIGEgbm9uLW51bGwgdXNlciBvYmplY3QuXCIsXCJvcGVyYXRpb24tbm90LWFsbG93ZWRcIjpcIlRoZSBnaXZlbiBzaWduLWluIHByb3ZpZGVyIGlzIGRpc2FibGVkIGZvciB0aGlzIEZpcmViYXNlIHByb2plY3QuIEVuYWJsZSBpdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSwgdW5kZXIgdGhlIHNpZ24taW4gbWV0aG9kIHRhYiBvZiB0aGUgQXV0aCBzZWN0aW9uLlwiLFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiOidUaGlzIG9wZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBlbnZpcm9ubWVudCB0aGlzIGFwcGxpY2F0aW9uIGlzIHJ1bm5pbmcgb24uIFwibG9jYXRpb24ucHJvdG9jb2xcIiBtdXN0IGJlIGh0dHAsIGh0dHBzIG9yIGNocm9tZS1leHRlbnNpb24gYW5kIHdlYiBzdG9yYWdlIG11c3QgYmUgZW5hYmxlZC4nLFxuXCJwb3B1cC1ibG9ja2VkXCI6XCJVbmFibGUgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB3aXRoIHRoZSBwb3B1cC4gSXQgbWF5IGhhdmUgYmVlbiBibG9ja2VkIGJ5IHRoZSBicm93c2VyLlwiLFwicG9wdXAtY2xvc2VkLWJ5LXVzZXJcIjpcIlRoZSBwb3B1cCBoYXMgYmVlbiBjbG9zZWQgYnkgdGhlIHVzZXIgYmVmb3JlIGZpbmFsaXppbmcgdGhlIG9wZXJhdGlvbi5cIixcInByb3ZpZGVyLWFscmVhZHktbGlua2VkXCI6XCJVc2VyIGNhbiBvbmx5IGJlIGxpbmtlZCB0byBvbmUgaWRlbnRpdHkgZm9yIHRoZSBnaXZlbiBwcm92aWRlci5cIixcInF1b3RhLWV4Y2VlZGVkXCI6XCJUaGUgcHJvamVjdCdzIHF1b3RhIGZvciB0aGlzIG9wZXJhdGlvbiBoYXMgYmVlbiBleGNlZWRlZC5cIixcInJlZGlyZWN0LWNhbmNlbGxlZC1ieS11c2VyXCI6XCJUaGUgcmVkaXJlY3Qgb3BlcmF0aW9uIGhhcyBiZWVuIGNhbmNlbGxlZCBieSB0aGUgdXNlciBiZWZvcmUgZmluYWxpemluZy5cIixcInJlZGlyZWN0LW9wZXJhdGlvbi1wZW5kaW5nXCI6XCJBIHJlZGlyZWN0IHNpZ24taW4gb3BlcmF0aW9uIGlzIGFscmVhZHkgcGVuZGluZy5cIixcblwicmVqZWN0ZWQtY3JlZGVudGlhbFwiOlwiVGhlIHJlcXVlc3QgY29udGFpbnMgbWFsZm9ybWVkIG9yIG1pc21hdGNoaW5nIGNyZWRlbnRpYWxzLlwiLFwic2Vjb25kLWZhY3Rvci1hbHJlYWR5LWluLXVzZVwiOlwiVGhlIHNlY29uZCBmYWN0b3IgaXMgYWxyZWFkeSBlbnJvbGxlZCBvbiB0aGlzIGFjY291bnQuXCIsXCJtYXhpbXVtLXNlY29uZC1mYWN0b3ItY291bnQtZXhjZWVkZWRcIjpcIlRoZSBtYXhpbXVtIGFsbG93ZWQgbnVtYmVyIG9mIHNlY29uZCBmYWN0b3JzIG9uIGEgdXNlciBoYXMgYmVlbiBleGNlZWRlZC5cIixcInRlbmFudC1pZC1taXNtYXRjaFwiOlwiVGhlIHByb3ZpZGVkIHRlbmFudCBJRCBkb2VzIG5vdCBtYXRjaCB0aGUgQXV0aCBpbnN0YW5jZSdzIHRlbmFudCBJRFwiLHRpbWVvdXQ6XCJUaGUgb3BlcmF0aW9uIGhhcyB0aW1lZCBvdXQuXCIsXCJ1c2VyLXRva2VuLWV4cGlyZWRcIjpcIlRoZSB1c2VyJ3MgY3JlZGVudGlhbCBpcyBubyBsb25nZXIgdmFsaWQuIFRoZSB1c2VyIG11c3Qgc2lnbiBpbiBhZ2Fpbi5cIixcblwidG9vLW1hbnktcmVxdWVzdHNcIjpcIldlIGhhdmUgYmxvY2tlZCBhbGwgcmVxdWVzdHMgZnJvbSB0aGlzIGRldmljZSBkdWUgdG8gdW51c3VhbCBhY3Rpdml0eS4gVHJ5IGFnYWluIGxhdGVyLlwiLFwidW5hdXRob3JpemVkLWNvbnRpbnVlLXVyaVwiOlwiVGhlIGRvbWFpbiBvZiB0aGUgY29udGludWUgVVJMIGlzIG5vdCB3aGl0ZWxpc3RlZC4gIFBsZWFzZSB3aGl0ZWxpc3QgdGhlIGRvbWFpbiBpbiB0aGUgRmlyZWJhc2UgY29uc29sZS5cIixcInVuc3VwcG9ydGVkLWZpcnN0LWZhY3RvclwiOlwiRW5yb2xsaW5nIGEgc2Vjb25kIGZhY3RvciBvciBzaWduaW5nIGluIHdpdGggYSBtdWx0aS1mYWN0b3IgYWNjb3VudCByZXF1aXJlcyBzaWduLWluIHdpdGggYSBzdXBwb3J0ZWQgZmlyc3QgZmFjdG9yLlwiLFwidW5zdXBwb3J0ZWQtcGVyc2lzdGVuY2UtdHlwZVwiOlwiVGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgc3BlY2lmaWVkIHBlcnNpc3RlbmNlIHR5cGUuXCIsXCJ1bnN1cHBvcnRlZC10ZW5hbnQtb3BlcmF0aW9uXCI6XCJUaGlzIG9wZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIGEgbXVsdGktdGVuYW50IGNvbnRleHQuXCIsXG5cInVudmVyaWZpZWQtZW1haWxcIjpcIlRoZSBvcGVyYXRpb24gcmVxdWlyZXMgYSB2ZXJpZmllZCBlbWFpbC5cIixcInVzZXItY2FuY2VsbGVkXCI6XCJUaGUgdXNlciBkaWQgbm90IGdyYW50IHlvdXIgYXBwbGljYXRpb24gdGhlIHBlcm1pc3Npb25zIGl0IHJlcXVlc3RlZC5cIixcInVzZXItbm90LWZvdW5kXCI6XCJUaGVyZSBpcyBubyB1c2VyIHJlY29yZCBjb3JyZXNwb25kaW5nIHRvIHRoaXMgaWRlbnRpZmllci4gVGhlIHVzZXIgbWF5IGhhdmUgYmVlbiBkZWxldGVkLlwiLFwidXNlci1kaXNhYmxlZFwiOlwiVGhlIHVzZXIgYWNjb3VudCBoYXMgYmVlbiBkaXNhYmxlZCBieSBhbiBhZG1pbmlzdHJhdG9yLlwiLFwidXNlci1taXNtYXRjaFwiOlwiVGhlIHN1cHBsaWVkIGNyZWRlbnRpYWxzIGRvIG5vdCBjb3JyZXNwb25kIHRvIHRoZSBwcmV2aW91c2x5IHNpZ25lZCBpbiB1c2VyLlwiLFwidXNlci1zaWduZWQtb3V0XCI6XCJcIixcIndlYWstcGFzc3dvcmRcIjpcIlRoZSBwYXNzd29yZCBtdXN0IGJlIDYgY2hhcmFjdGVycyBsb25nIG9yIG1vcmUuXCIsXG5cIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCI6XCJUaGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZCBvciAzcmQgcGFydHkgY29va2llcyBhbmQgZGF0YSBtYXkgYmUgZGlzYWJsZWQuXCJ9O3ZhciB6YT17aGQ6e1JhOlwiaHR0cHM6Ly9zdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL2lkZW50aXR5dG9vbGtpdC92My9yZWx5aW5ncGFydHkvXCIsWGE6XCJodHRwczovL3N0YWdpbmctc2VjdXJldG9rZW4uc2FuZGJveC5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFVhOlwiaHR0cHM6Ly9zdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YyL1wiLGlkOlwiYlwifSxwZDp7UmE6XCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9pZGVudGl0eXRvb2xraXQvdjMvcmVseWluZ3BhcnR5L1wiLFhhOlwiaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFVhOlwiaHR0cHM6Ly9pZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb20vdjIvXCIsaWQ6XCJwXCJ9LHJkOntSYTpcImh0dHBzOi8vc3RhZ2luZy13d3cuc2FuZGJveC5nb29nbGVhcGlzLmNvbS9pZGVudGl0eXRvb2xraXQvdjMvcmVseWluZ3BhcnR5L1wiLFxuWGE6XCJodHRwczovL3N0YWdpbmctc2VjdXJldG9rZW4uc2FuZGJveC5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFVhOlwiaHR0cHM6Ly9zdGFnaW5nLWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YyL1wiLGlkOlwic1wifSxzZDp7UmE6XCJodHRwczovL3d3dy1nb29nbGVhcGlzLXRlc3Quc2FuZGJveC5nb29nbGUuY29tL2lkZW50aXR5dG9vbGtpdC92My9yZWx5aW5ncGFydHkvXCIsWGE6XCJodHRwczovL3Rlc3Qtc2VjdXJldG9rZW4uc2FuZGJveC5nb29nbGVhcGlzLmNvbS92MS90b2tlblwiLFVhOlwiaHR0cHM6Ly90ZXN0LWlkZW50aXR5dG9vbGtpdC5zYW5kYm94Lmdvb2dsZWFwaXMuY29tL3YyL1wiLGlkOlwidFwifX07XG5mdW5jdGlvbiBBYShhKXtmb3IodmFyIGIgaW4gemEpaWYoemFbYl0uaWQ9PT1hKXJldHVybiBhPXphW2JdLHtmaXJlYmFzZUVuZHBvaW50OmEuUmEsc2VjdXJlVG9rZW5FbmRwb2ludDphLlhhLGlkZW50aXR5UGxhdGZvcm1FbmRwb2ludDphLlVhfTtyZXR1cm4gbnVsbH12YXIgQmE7QmE9QWEoXCJfX0VJRF9fXCIpP1wiX19FSURfX1wiOnZvaWQgMDtmdW5jdGlvbiBDYShhKXtpZighYSlyZXR1cm4hMTt0cnl7cmV0dXJuISFhLiRnb29nX1RoZW5hYmxlfWNhdGNoKGIpe3JldHVybiExfX07ZnVuY3Rpb24gdShhKXtpZihFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLHUpO2Vsc2V7dmFyIGI9RXJyb3IoKS5zdGFjaztiJiYodGhpcy5zdGFjaz1iKX1hJiYodGhpcy5tZXNzYWdlPVN0cmluZyhhKSl9cih1LEVycm9yKTt1LnByb3RvdHlwZS5uYW1lPVwiQ3VzdG9tRXJyb3JcIjtmdW5jdGlvbiBEYShhLGIpe2E9YS5zcGxpdChcIiVzXCIpO2Zvcih2YXIgYz1cIlwiLGQ9YS5sZW5ndGgtMSxlPTA7ZTxkO2UrKyljKz1hW2VdKyhlPGIubGVuZ3RoP2JbZV06XCIlc1wiKTt1LmNhbGwodGhpcyxjK2FbZF0pfXIoRGEsdSk7RGEucHJvdG90eXBlLm5hbWU9XCJBc3NlcnRpb25FcnJvclwiO2Z1bmN0aW9uIEVhKGEsYil7dGhyb3cgbmV3IERhKFwiRmFpbHVyZVwiKyhhP1wiOiBcIithOlwiXCIpLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSk7fTtmdW5jdGlvbiBGYShhLGIpe3RoaXMuYz1hO3RoaXMuZj1iO3RoaXMuYj0wO3RoaXMuYT1udWxsfUZhLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXtpZigwPHRoaXMuYil7dGhpcy5iLS07dmFyIGE9dGhpcy5hO3RoaXMuYT1hLm5leHQ7YS5uZXh0PW51bGx9ZWxzZSBhPXRoaXMuYygpO3JldHVybiBhfTtmdW5jdGlvbiBHYShhLGIpe2EuZihiKTsxMDA+YS5iJiYoYS5iKyssYi5uZXh0PWEuYSxhLmE9Yil9O2Z1bmN0aW9uIEhhKCl7dGhpcy5iPXRoaXMuYT1udWxsfXZhciBKYT1uZXcgRmEoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IElhfSxmdW5jdGlvbihhKXthLnJlc2V0KCl9KTtIYS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGEsYil7dmFyIGM9SmEuZ2V0KCk7Yy5zZXQoYSxiKTt0aGlzLmI/dGhpcy5iLm5leHQ9Yzp0aGlzLmE9Yzt0aGlzLmI9Y307ZnVuY3Rpb24gS2EoKXt2YXIgYT1MYSxiPW51bGw7YS5hJiYoYj1hLmEsYS5hPWEuYS5uZXh0LGEuYXx8KGEuYj1udWxsKSxiLm5leHQ9bnVsbCk7cmV0dXJuIGJ9ZnVuY3Rpb24gSWEoKXt0aGlzLm5leHQ9dGhpcy5iPXRoaXMuYT1udWxsfUlhLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oYSxiKXt0aGlzLmE9YTt0aGlzLmI9Yjt0aGlzLm5leHQ9bnVsbH07SWEucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5uZXh0PXRoaXMuYj10aGlzLmE9bnVsbH07dmFyIE1hPUFycmF5LnByb3RvdHlwZS5pbmRleE9mP2Z1bmN0aW9uKGEsYil7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVyblwic3RyaW5nXCIhPT10eXBlb2YgYnx8MSE9Yi5sZW5ndGg/LTE6YS5pbmRleE9mKGIsMCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYyBpbiBhJiZhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0sdz1BcnJheS5wcm90b3R5cGUuZm9yRWFjaD9mdW5jdGlvbihhLGIsYyl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhLGIsYyl9OmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YS5sZW5ndGgsZT1cInN0cmluZ1wiPT09dHlwZW9mIGE/YS5zcGxpdChcIlwiKTphLGY9MDtmPGQ7ZisrKWYgaW4gZSYmYi5jYWxsKGMsZVtmXSxmLGEpfTtcbmZ1bmN0aW9uIE5hKGEsYil7Zm9yKHZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYT9hLnNwbGl0KFwiXCIpOmEsZD1hLmxlbmd0aC0xOzA8PWQ7LS1kKWQgaW4gYyYmYi5jYWxsKHZvaWQgMCxjW2RdLGQsYSl9XG52YXIgT2E9QXJyYXkucHJvdG90eXBlLmZpbHRlcj9mdW5jdGlvbihhLGIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYSxiLHZvaWQgMCl9OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9W10sZT0wLGY9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2Euc3BsaXQoXCJcIik6YSxnPTA7ZzxjO2crKylpZihnIGluIGYpe3ZhciBoPWZbZ107Yi5jYWxsKHZvaWQgMCxoLGcsYSkmJihkW2UrK109aCl9cmV0dXJuIGR9LFBhPUFycmF5LnByb3RvdHlwZS5tYXA/ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGEsYix2b2lkIDApfTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPUFycmF5KGMpLGU9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2Euc3BsaXQoXCJcIik6YSxmPTA7ZjxjO2YrKylmIGluIGUmJihkW2ZdPWIuY2FsbCh2b2lkIDAsZVtmXSxmLGEpKTtyZXR1cm4gZH0sUWE9QXJyYXkucHJvdG90eXBlLnNvbWU/ZnVuY3Rpb24oYSxcbmIpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKGEsYix2b2lkIDApfTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVwic3RyaW5nXCI9PT10eXBlb2YgYT9hLnNwbGl0KFwiXCIpOmEsZT0wO2U8YztlKyspaWYoZSBpbiBkJiZiLmNhbGwodm9pZCAwLGRbZV0sZSxhKSlyZXR1cm4hMDtyZXR1cm4hMX07ZnVuY3Rpb24gUmEoYSl7YTp7dmFyIGI9U2E7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9XCJzdHJpbmdcIj09PXR5cGVvZiBhP2Euc3BsaXQoXCJcIik6YSxlPTA7ZTxjO2UrKylpZihlIGluIGQmJmIuY2FsbCh2b2lkIDAsZFtlXSxlLGEpKXtiPWU7YnJlYWsgYX1iPS0xfXJldHVybiAwPmI/bnVsbDpcInN0cmluZ1wiPT09dHlwZW9mIGE/YS5jaGFyQXQoYik6YVtiXX1mdW5jdGlvbiBUYShhLGIpe3JldHVybiAwPD1NYShhLGIpfVxuZnVuY3Rpb24gVWEoYSxiKXtiPU1hKGEsYik7dmFyIGM7KGM9MDw9YikmJkFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhLGIsMSk7cmV0dXJuIGN9ZnVuY3Rpb24gVmEoYSxiKXt2YXIgYz0wO05hKGEsZnVuY3Rpb24oZCxlKXtiLmNhbGwodm9pZCAwLGQsZSxhKSYmMT09QXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGEsZSwxKS5sZW5ndGgmJmMrK30pfWZ1bmN0aW9uIFdhKGEpe3JldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLGFyZ3VtZW50cyl9ZnVuY3Rpb24gWGEoYSl7dmFyIGI9YS5sZW5ndGg7aWYoMDxiKXtmb3IodmFyIGM9QXJyYXkoYiksZD0wO2Q8YjtkKyspY1tkXT1hW2RdO3JldHVybiBjfXJldHVybltdfTt2YXIgWWE9U3RyaW5nLnByb3RvdHlwZS50cmltP2Z1bmN0aW9uKGEpe3JldHVybiBhLnRyaW0oKX06ZnVuY3Rpb24oYSl7cmV0dXJuL15bXFxzXFx4YTBdKihbXFxzXFxTXSo/KVtcXHNcXHhhMF0qJC8uZXhlYyhhKVsxXX0sWmE9LyYvZywkYT0vPC9nLGFiPS8+L2csYmI9L1wiL2csY2I9LycvZyxkYj0vXFx4MDAvZyxlYj0vW1xceDAwJjw+XCInXS87ZnVuY3Rpb24geChhLGIpe3JldHVybi0xIT1hLmluZGV4T2YoYil9ZnVuY3Rpb24gZmIoYSxiKXtyZXR1cm4gYTxiPy0xOmE+Yj8xOjB9O3ZhciBnYjthOnt2YXIgaGI9bC5uYXZpZ2F0b3I7aWYoaGIpe3ZhciBpYj1oYi51c2VyQWdlbnQ7aWYoaWIpe2diPWliO2JyZWFrIGF9fWdiPVwiXCJ9ZnVuY3Rpb24geShhKXtyZXR1cm4geChnYixhKX07ZnVuY3Rpb24gamIoYSxiKXtmb3IodmFyIGMgaW4gYSliLmNhbGwodm9pZCAwLGFbY10sYyxhKX1mdW5jdGlvbiBrYihhKXtmb3IodmFyIGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBsYihhKXt2YXIgYj17fSxjO2ZvcihjIGluIGEpYltjXT1hW2NdO3JldHVybiBifXZhciBtYj1cImNvbnN0cnVjdG9yIGhhc093blByb3BlcnR5IGlzUHJvdG90eXBlT2YgcHJvcGVydHlJc0VudW1lcmFibGUgdG9Mb2NhbGVTdHJpbmcgdG9TdHJpbmcgdmFsdWVPZlwiLnNwbGl0KFwiIFwiKTtmdW5jdGlvbiB6KGEsYil7Zm9yKHZhciBjLGQsZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe2Q9YXJndW1lbnRzW2VdO2ZvcihjIGluIGQpYVtjXT1kW2NdO2Zvcih2YXIgZj0wO2Y8bWIubGVuZ3RoO2YrKyljPW1iW2ZdLE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkLGMpJiYoYVtjXT1kW2NdKX19O2Z1bmN0aW9uIG5iKGEsYil7YTp7dHJ5e3ZhciBjPWEmJmEub3duZXJEb2N1bWVudCxkPWMmJihjLmRlZmF1bHRWaWV3fHxjLnBhcmVudFdpbmRvdyk7ZD1kfHxsO2lmKGQuRWxlbWVudCYmZC5Mb2NhdGlvbil7dmFyIGU9ZDticmVhayBhfX1jYXRjaChnKXt9ZT1udWxsfWlmKGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBlW2JdJiYoIWF8fCEoYSBpbnN0YW5jZW9mIGVbYl0pJiYoYSBpbnN0YW5jZW9mIGUuTG9jYXRpb258fGEgaW5zdGFuY2VvZiBlLkVsZW1lbnQpKSl7aWYobihhKSl0cnl7dmFyIGY9YS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZXx8YS5jb25zdHJ1Y3Rvci5uYW1lfHxPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSl9Y2F0Y2goZyl7Zj1cIjxvYmplY3QgY291bGQgbm90IGJlIHN0cmluZ2lmaWVkPlwifWVsc2UgZj12b2lkIDA9PT1hP1widW5kZWZpbmVkXCI6bnVsbD09PWE/XCJudWxsXCI6dHlwZW9mIGE7RWEoXCJBcmd1bWVudCBpcyBub3QgYSAlcyAob3IgYSBub24tRWxlbWVudCwgbm9uLUxvY2F0aW9uIG1vY2spOyBnb3Q6ICVzXCIsXG5iLGYpfX07ZnVuY3Rpb24gb2IoYSxiKXt0aGlzLmE9YT09PXBiJiZifHxcIlwiO3RoaXMuYj1xYn1vYi5wcm90b3R5cGUucmE9ITA7b2IucHJvdG90eXBlLnFhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYX07b2IucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJDb25zdHtcIit0aGlzLmErXCJ9XCJ9O2Z1bmN0aW9uIHJiKGEpe2lmKGEgaW5zdGFuY2VvZiBvYiYmYS5jb25zdHJ1Y3Rvcj09PW9iJiZhLmI9PT1xYilyZXR1cm4gYS5hO0VhKFwiZXhwZWN0ZWQgb2JqZWN0IG9mIHR5cGUgQ29uc3QsIGdvdCAnXCIrYStcIidcIik7cmV0dXJuXCJ0eXBlX2Vycm9yOkNvbnN0XCJ9dmFyIHFiPXt9LHBiPXt9LHNiPW5ldyBvYihwYixcIlwiKTtmdW5jdGlvbiB0YihhLGIpe3RoaXMuYT1hPT09dWImJmJ8fFwiXCI7dGhpcy5iPXZifXRiLnByb3RvdHlwZS5yYT0hMDt0Yi5wcm90b3R5cGUucWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hLnRvU3RyaW5nKCl9O3RiLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiVHJ1c3RlZFJlc291cmNlVXJse1wiK3RoaXMuYStcIn1cIn07ZnVuY3Rpb24gd2IoYSl7aWYoYSBpbnN0YW5jZW9mIHRiJiZhLmNvbnN0cnVjdG9yPT09dGImJmEuYj09PXZiKXJldHVybiBhLmE7RWEoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBUcnVzdGVkUmVzb3VyY2VVcmwsIGdvdCAnXCIrYStcIicgb2YgdHlwZSBcIitsYShhKSk7cmV0dXJuXCJ0eXBlX2Vycm9yOlRydXN0ZWRSZXNvdXJjZVVybFwifVxuZnVuY3Rpb24geGIoYSxiKXt2YXIgYz1yYihhKTtpZigheWIudGVzdChjKSl0aHJvdyBFcnJvcihcIkludmFsaWQgVHJ1c3RlZFJlc291cmNlVXJsIGZvcm1hdDogXCIrYyk7YT1jLnJlcGxhY2UoemIsZnVuY3Rpb24oZCxlKXtpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsZSkpdGhyb3cgRXJyb3IoJ0ZvdW5kIG1hcmtlciwgXCInK2UrJ1wiLCBpbiBmb3JtYXQgc3RyaW5nLCBcIicrYysnXCIsIGJ1dCBubyB2YWxpZCBsYWJlbCBtYXBwaW5nIGZvdW5kIGluIGFyZ3M6ICcrSlNPTi5zdHJpbmdpZnkoYikpO2Q9YltlXTtyZXR1cm4gZCBpbnN0YW5jZW9mIG9iP3JiKGQpOmVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZCkpfSk7cmV0dXJuIG5ldyB0Yih1YixhKX1cbnZhciB6Yj0vJXsoXFx3Kyl9L2cseWI9L14oKGh0dHBzOik/XFwvXFwvWzAtOWEtei46W1xcXS1dK1xcL3xcXC9bXi9cXFxcXXxbXjovXFxcXCVdK1xcL3xbXjovXFxcXCVdKls/I118YWJvdXQ6YmxhbmsjKS9pLHZiPXt9LHViPXt9O2Z1bmN0aW9uIEFiKGEsYil7dGhpcy5hPWE9PT1CYiYmYnx8XCJcIjt0aGlzLmI9Q2J9QWIucHJvdG90eXBlLnJhPSEwO0FiLnByb3RvdHlwZS5xYT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmEudG9TdHJpbmcoKX07QWIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJTYWZlVXJse1wiK3RoaXMuYStcIn1cIn07ZnVuY3Rpb24gRGIoYSl7aWYoYSBpbnN0YW5jZW9mIEFiJiZhLmNvbnN0cnVjdG9yPT09QWImJmEuYj09PUNiKXJldHVybiBhLmE7RWEoXCJleHBlY3RlZCBvYmplY3Qgb2YgdHlwZSBTYWZlVXJsLCBnb3QgJ1wiK2ErXCInIG9mIHR5cGUgXCIrbGEoYSkpO3JldHVyblwidHlwZV9lcnJvcjpTYWZlVXJsXCJ9dmFyIEViPS9eKD86KD86aHR0cHM/fG1haWx0b3xmdHApOnxbXjovPyNdKig/OlsvPyNdfCQpKS9pO1xuZnVuY3Rpb24gRmIoYSl7aWYoYSBpbnN0YW5jZW9mIEFiKXJldHVybiBhO2E9XCJvYmplY3RcIj09dHlwZW9mIGEmJmEucmE/YS5xYSgpOlN0cmluZyhhKTtFYi50ZXN0KGEpfHwoYT1cImFib3V0OmludmFsaWQjekNsb3N1cmV6XCIpO3JldHVybiBuZXcgQWIoQmIsYSl9dmFyIENiPXt9LEJiPXt9O2Z1bmN0aW9uIEdiKCl7dGhpcy5hPVwiXCI7dGhpcy5iPUhifUdiLnByb3RvdHlwZS5yYT0hMDtHYi5wcm90b3R5cGUucWE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hLnRvU3RyaW5nKCl9O0diLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiU2FmZUh0bWx7XCIrdGhpcy5hK1wifVwifTtmdW5jdGlvbiBJYihhKXtpZihhIGluc3RhbmNlb2YgR2ImJmEuY29uc3RydWN0b3I9PT1HYiYmYS5iPT09SGIpcmV0dXJuIGEuYTtFYShcImV4cGVjdGVkIG9iamVjdCBvZiB0eXBlIFNhZmVIdG1sLCBnb3QgJ1wiK2ErXCInIG9mIHR5cGUgXCIrbGEoYSkpO3JldHVyblwidHlwZV9lcnJvcjpTYWZlSHRtbFwifXZhciBIYj17fTtmdW5jdGlvbiBKYihhKXt2YXIgYj1uZXcgR2I7Yi5hPWE7cmV0dXJuIGJ9SmIoXCI8IURPQ1RZUEUgaHRtbD5cIik7dmFyIEtiPUpiKFwiXCIpO0piKFwiPGJyPlwiKTtmdW5jdGlvbiBMYihhKXt2YXIgYj1uZXcgdGIodWIscmIoc2IpKTtuYihhLFwiSFRNTElGcmFtZUVsZW1lbnRcIik7YS5zcmM9d2IoYikudG9TdHJpbmcoKX1mdW5jdGlvbiBNYihhLGIpe25iKGEsXCJIVE1MU2NyaXB0RWxlbWVudFwiKTthLnNyYz13YihiKTtpZihudWxsPT09amEpYjp7Yj1sLmRvY3VtZW50O2lmKChiPWIucXVlcnlTZWxlY3RvciYmYi5xdWVyeVNlbGVjdG9yKFwic2NyaXB0W25vbmNlXVwiKSkmJihiPWIubm9uY2V8fGIuZ2V0QXR0cmlidXRlKFwibm9uY2VcIikpJiZpYS50ZXN0KGIpKXtqYT1iO2JyZWFrIGJ9amE9XCJcIn1iPWphO2ImJmEuc2V0QXR0cmlidXRlKFwibm9uY2VcIixiKX07ZnVuY3Rpb24gTmIoYSxiKXtmb3IodmFyIGM9YS5zcGxpdChcIiVzXCIpLGQ9XCJcIixlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtlLmxlbmd0aCYmMTxjLmxlbmd0aDspZCs9Yy5zaGlmdCgpK2Uuc2hpZnQoKTtyZXR1cm4gZCtjLmpvaW4oXCIlc1wiKX1mdW5jdGlvbiBPYihhKXtlYi50ZXN0KGEpJiYoLTEhPWEuaW5kZXhPZihcIiZcIikmJihhPWEucmVwbGFjZShaYSxcIiZhbXA7XCIpKSwtMSE9YS5pbmRleE9mKFwiPFwiKSYmKGE9YS5yZXBsYWNlKCRhLFwiJmx0O1wiKSksLTEhPWEuaW5kZXhPZihcIj5cIikmJihhPWEucmVwbGFjZShhYixcIiZndDtcIikpLC0xIT1hLmluZGV4T2YoJ1wiJykmJihhPWEucmVwbGFjZShiYixcIiZxdW90O1wiKSksLTEhPWEuaW5kZXhPZihcIidcIikmJihhPWEucmVwbGFjZShjYixcIiYjMzk7XCIpKSwtMSE9YS5pbmRleE9mKFwiXFx4MDBcIikmJihhPWEucmVwbGFjZShkYixcIiYjMDtcIikpKTtyZXR1cm4gYX07ZnVuY3Rpb24gUGIoYSl7UGJbXCIgXCJdKGEpO3JldHVybiBhfVBiW1wiIFwiXT1rYTtmdW5jdGlvbiBRYihhLGIpe3ZhciBjPVJiO3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYyxhKT9jW2FdOmNbYV09YihhKX07dmFyIFNiPXkoXCJPcGVyYVwiKSxUYj15KFwiVHJpZGVudFwiKXx8eShcIk1TSUVcIiksVWI9eShcIkVkZ2VcIiksVmI9VWJ8fFRiLFdiPXkoXCJHZWNrb1wiKSYmISh4KGdiLnRvTG93ZXJDYXNlKCksXCJ3ZWJraXRcIikmJiF5KFwiRWRnZVwiKSkmJiEoeShcIlRyaWRlbnRcIil8fHkoXCJNU0lFXCIpKSYmIXkoXCJFZGdlXCIpLFhiPXgoZ2IudG9Mb3dlckNhc2UoKSxcIndlYmtpdFwiKSYmIXkoXCJFZGdlXCIpO2Z1bmN0aW9uIFliKCl7dmFyIGE9bC5kb2N1bWVudDtyZXR1cm4gYT9hLmRvY3VtZW50TW9kZTp2b2lkIDB9dmFyIFpiO1xuYTp7dmFyICRiPVwiXCIsYWM9ZnVuY3Rpb24oKXt2YXIgYT1nYjtpZihXYilyZXR1cm4vcnY6KFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoVWIpcmV0dXJuL0VkZ2VcXC8oW1xcZFxcLl0rKS8uZXhlYyhhKTtpZihUYilyZXR1cm4vXFxiKD86TVNJRXxydilbOiBdKFteXFwpO10rKShcXCl8OykvLmV4ZWMoYSk7aWYoWGIpcmV0dXJuL1dlYktpdFxcLyhcXFMrKS8uZXhlYyhhKTtpZihTYilyZXR1cm4vKD86VmVyc2lvbilbIFxcL10/KFxcUyspLy5leGVjKGEpfSgpO2FjJiYoJGI9YWM/YWNbMV06XCJcIik7aWYoVGIpe3ZhciBiYz1ZYigpO2lmKG51bGwhPWJjJiZiYz5wYXJzZUZsb2F0KCRiKSl7WmI9U3RyaW5nKGJjKTticmVhayBhfX1aYj0kYn12YXIgUmI9e307XG5mdW5jdGlvbiBjYyhhKXtyZXR1cm4gUWIoYSxmdW5jdGlvbigpe2Zvcih2YXIgYj0wLGM9WWEoU3RyaW5nKFpiKSkuc3BsaXQoXCIuXCIpLGQ9WWEoU3RyaW5nKGEpKS5zcGxpdChcIi5cIiksZT1NYXRoLm1heChjLmxlbmd0aCxkLmxlbmd0aCksZj0wOzA9PWImJmY8ZTtmKyspe3ZhciBnPWNbZl18fFwiXCIsaD1kW2ZdfHxcIlwiO2Rve2c9LyhcXGQqKShcXEQqKSguKikvLmV4ZWMoZyl8fFtcIlwiLFwiXCIsXCJcIixcIlwiXTtoPS8oXFxkKikoXFxEKikoLiopLy5leGVjKGgpfHxbXCJcIixcIlwiLFwiXCIsXCJcIl07aWYoMD09Z1swXS5sZW5ndGgmJjA9PWhbMF0ubGVuZ3RoKWJyZWFrO2I9ZmIoMD09Z1sxXS5sZW5ndGg/MDpwYXJzZUludChnWzFdLDEwKSwwPT1oWzFdLmxlbmd0aD8wOnBhcnNlSW50KGhbMV0sMTApKXx8ZmIoMD09Z1syXS5sZW5ndGgsMD09aFsyXS5sZW5ndGgpfHxmYihnWzJdLGhbMl0pO2c9Z1szXTtoPWhbM119d2hpbGUoMD09Yil9cmV0dXJuIDA8PWJ9KX12YXIgZGM7XG5kYz1sLmRvY3VtZW50JiZUYj9ZYigpOnZvaWQgMDt0cnl7KG5ldyBzZWxmLk9mZnNjcmVlbkNhbnZhcygwLDApKS5nZXRDb250ZXh0KFwiMmRcIil9Y2F0Y2goYSl7fXZhciBlYz0hVGJ8fDk8PU51bWJlcihkYyk7ZnVuY3Rpb24gZmMoYSl7dmFyIGI9ZG9jdW1lbnQ7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhP2IuZ2V0RWxlbWVudEJ5SWQoYSk6YX1mdW5jdGlvbiBnYyhhLGIpe2piKGIsZnVuY3Rpb24oYyxkKXtjJiZcIm9iamVjdFwiPT10eXBlb2YgYyYmYy5yYSYmKGM9Yy5xYSgpKTtcInN0eWxlXCI9PWQ/YS5zdHlsZS5jc3NUZXh0PWM6XCJjbGFzc1wiPT1kP2EuY2xhc3NOYW1lPWM6XCJmb3JcIj09ZD9hLmh0bWxGb3I9YzpoYy5oYXNPd25Qcm9wZXJ0eShkKT9hLnNldEF0dHJpYnV0ZShoY1tkXSxjKTowPT1kLmxhc3RJbmRleE9mKFwiYXJpYS1cIiwwKXx8MD09ZC5sYXN0SW5kZXhPZihcImRhdGEtXCIsMCk/YS5zZXRBdHRyaWJ1dGUoZCxjKTphW2RdPWN9KX1cbnZhciBoYz17Y2VsbHBhZGRpbmc6XCJjZWxsUGFkZGluZ1wiLGNlbGxzcGFjaW5nOlwiY2VsbFNwYWNpbmdcIixjb2xzcGFuOlwiY29sU3BhblwiLGZyYW1lYm9yZGVyOlwiZnJhbWVCb3JkZXJcIixoZWlnaHQ6XCJoZWlnaHRcIixtYXhsZW5ndGg6XCJtYXhMZW5ndGhcIixub25jZTpcIm5vbmNlXCIscm9sZTpcInJvbGVcIixyb3dzcGFuOlwicm93U3BhblwiLHR5cGU6XCJ0eXBlXCIsdXNlbWFwOlwidXNlTWFwXCIsdmFsaWduOlwidkFsaWduXCIsd2lkdGg6XCJ3aWR0aFwifTtcbmZ1bmN0aW9uIGljKGEsYixjKXt2YXIgZD1hcmd1bWVudHMsZT1kb2N1bWVudCxmPVN0cmluZyhkWzBdKSxnPWRbMV07aWYoIWVjJiZnJiYoZy5uYW1lfHxnLnR5cGUpKXtmPVtcIjxcIixmXTtnLm5hbWUmJmYucHVzaCgnIG5hbWU9XCInLE9iKGcubmFtZSksJ1wiJyk7aWYoZy50eXBlKXtmLnB1c2goJyB0eXBlPVwiJyxPYihnLnR5cGUpLCdcIicpO3ZhciBoPXt9O3ooaCxnKTtkZWxldGUgaC50eXBlO2c9aH1mLnB1c2goXCI+XCIpO2Y9Zi5qb2luKFwiXCIpfWY9amMoZSxmKTtnJiYoXCJzdHJpbmdcIj09PXR5cGVvZiBnP2YuY2xhc3NOYW1lPWc6QXJyYXkuaXNBcnJheShnKT9mLmNsYXNzTmFtZT1nLmpvaW4oXCIgXCIpOmdjKGYsZykpOzI8ZC5sZW5ndGgmJmtjKGUsZixkKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIGtjKGEsYixjKXtmdW5jdGlvbiBkKGcpe2cmJmIuYXBwZW5kQ2hpbGQoXCJzdHJpbmdcIj09PXR5cGVvZiBnP2EuY3JlYXRlVGV4dE5vZGUoZyk6Zyl9Zm9yKHZhciBlPTI7ZTxjLmxlbmd0aDtlKyspe3ZhciBmPWNbZV07IW1hKGYpfHxuKGYpJiYwPGYubm9kZVR5cGU/ZChmKTp3KGxjKGYpP1hhKGYpOmYsZCl9fWZ1bmN0aW9uIGpjKGEsYil7Yj1TdHJpbmcoYik7XCJhcHBsaWNhdGlvbi94aHRtbCt4bWxcIj09PWEuY29udGVudFR5cGUmJihiPWIudG9Mb3dlckNhc2UoKSk7cmV0dXJuIGEuY3JlYXRlRWxlbWVudChiKX1mdW5jdGlvbiBsYyhhKXtpZihhJiZcIm51bWJlclwiPT10eXBlb2YgYS5sZW5ndGgpe2lmKG4oYSkpcmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgYS5pdGVtfHxcInN0cmluZ1wiPT10eXBlb2YgYS5pdGVtO2lmKG5hKGEpKXJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGEuaXRlbX1yZXR1cm4hMX07ZnVuY3Rpb24gbWMoYSl7bC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9LDApfXZhciBuYztcbmZ1bmN0aW9uIG9jKCl7dmFyIGE9bC5NZXNzYWdlQ2hhbm5lbDtcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEmJlwidW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cucG9zdE1lc3NhZ2UmJndpbmRvdy5hZGRFdmVudExpc3RlbmVyJiYheShcIlByZXN0b1wiKSYmKGE9ZnVuY3Rpb24oKXt2YXIgZT1qYyhkb2N1bWVudCxcIklGUkFNRVwiKTtlLnN0eWxlLmRpc3BsYXk9XCJub25lXCI7TGIoZSk7ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKGUpO3ZhciBmPWUuY29udGVudFdpbmRvdztlPWYuZG9jdW1lbnQ7ZS5vcGVuKCk7ZS53cml0ZShJYihLYikpO2UuY2xvc2UoKTt2YXIgZz1cImNhbGxJbW1lZGlhdGVcIitNYXRoLnJhbmRvbSgpLGg9XCJmaWxlOlwiPT1mLmxvY2F0aW9uLnByb3RvY29sP1wiKlwiOmYubG9jYXRpb24ucHJvdG9jb2wrXCIvL1wiK2YubG9jYXRpb24uaG9zdDtlPXEoZnVuY3Rpb24obSl7aWYoKFwiKlwiPT1ofHxtLm9yaWdpbj09aCkmJm0uZGF0YT09Zyl0aGlzLnBvcnQxLm9ubWVzc2FnZSgpfSxcbnRoaXMpO2YuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixlLCExKTt0aGlzLnBvcnQxPXt9O3RoaXMucG9ydDI9e3Bvc3RNZXNzYWdlOmZ1bmN0aW9uKCl7Zi5wb3N0TWVzc2FnZShnLGgpfX19KTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEmJiF5KFwiVHJpZGVudFwiKSYmIXkoXCJNU0lFXCIpKXt2YXIgYj1uZXcgYSxjPXt9LGQ9YztiLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKHZvaWQgMCE9PWMubmV4dCl7Yz1jLm5leHQ7dmFyIGU9Yy5EYjtjLkRiPW51bGw7ZSgpfX07cmV0dXJuIGZ1bmN0aW9uKGUpe2QubmV4dD17RGI6ZX07ZD1kLm5leHQ7Yi5wb3J0Mi5wb3N0TWVzc2FnZSgwKX19cmV0dXJuIGZ1bmN0aW9uKGUpe2wuc2V0VGltZW91dChlLDApfX07ZnVuY3Rpb24gcGMoYSxiKXtxY3x8cmMoKTtzY3x8KHFjKCksc2M9ITApO0xhLmFkZChhLGIpfXZhciBxYztmdW5jdGlvbiByYygpe2lmKGwuUHJvbWlzZSYmbC5Qcm9taXNlLnJlc29sdmUpe3ZhciBhPWwuUHJvbWlzZS5yZXNvbHZlKHZvaWQgMCk7cWM9ZnVuY3Rpb24oKXthLnRoZW4odGMpfX1lbHNlIHFjPWZ1bmN0aW9uKCl7dmFyIGI9dGM7IW5hKGwuc2V0SW1tZWRpYXRlKXx8bC5XaW5kb3cmJmwuV2luZG93LnByb3RvdHlwZSYmIXkoXCJFZGdlXCIpJiZsLldpbmRvdy5wcm90b3R5cGUuc2V0SW1tZWRpYXRlPT1sLnNldEltbWVkaWF0ZT8obmN8fChuYz1vYygpKSxuYyhiKSk6bC5zZXRJbW1lZGlhdGUoYil9fXZhciBzYz0hMSxMYT1uZXcgSGE7ZnVuY3Rpb24gdGMoKXtmb3IodmFyIGE7YT1LYSgpOyl7dHJ5e2EuYS5jYWxsKGEuYil9Y2F0Y2goYil7bWMoYil9R2EoSmEsYSl9c2M9ITF9O2Z1bmN0aW9uIEIoYSxiKXt0aGlzLmE9dWM7dGhpcy5pPXZvaWQgMDt0aGlzLmY9dGhpcy5iPXRoaXMuYz1udWxsO3RoaXMuZz10aGlzLmg9ITE7aWYoYSE9a2EpdHJ5e3ZhciBjPXRoaXM7YS5jYWxsKGIsZnVuY3Rpb24oZCl7dmMoYyx3YyxkKX0sZnVuY3Rpb24oZCl7aWYoIShkIGluc3RhbmNlb2YgeGMpKXRyeXtpZihkIGluc3RhbmNlb2YgRXJyb3IpdGhyb3cgZDt0aHJvdyBFcnJvcihcIlByb21pc2UgcmVqZWN0ZWQuXCIpO31jYXRjaChlKXt9dmMoYyx5YyxkKX0pfWNhdGNoKGQpe3ZjKHRoaXMseWMsZCl9fXZhciB1Yz0wLHdjPTIseWM9MztmdW5jdGlvbiB6Yygpe3RoaXMubmV4dD10aGlzLmY9dGhpcy5iPXRoaXMuZz10aGlzLmE9bnVsbDt0aGlzLmM9ITF9emMucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5mPXRoaXMuYj10aGlzLmc9dGhpcy5hPW51bGw7dGhpcy5jPSExfTt2YXIgQWM9bmV3IEZhKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB6Y30sZnVuY3Rpb24oYSl7YS5yZXNldCgpfSk7XG5mdW5jdGlvbiBCYyhhLGIsYyl7dmFyIGQ9QWMuZ2V0KCk7ZC5nPWE7ZC5iPWI7ZC5mPWM7cmV0dXJuIGR9ZnVuY3Rpb24gRChhKXtpZihhIGluc3RhbmNlb2YgQilyZXR1cm4gYTt2YXIgYj1uZXcgQihrYSk7dmMoYix3YyxhKTtyZXR1cm4gYn1mdW5jdGlvbiBFKGEpe3JldHVybiBuZXcgQihmdW5jdGlvbihiLGMpe2MoYSl9KX1mdW5jdGlvbiBDYyhhLGIsYyl7RGMoYSxiLGMsbnVsbCl8fHBjKHRhKGIsYSkpfWZ1bmN0aW9uIEVjKGEpe3JldHVybiBuZXcgQihmdW5jdGlvbihiLGMpe3ZhciBkPWEubGVuZ3RoLGU9W107aWYoZClmb3IodmFyIGY9ZnVuY3Rpb24ocCx2KXtkLS07ZVtwXT12OzA9PWQmJmIoZSl9LGc9ZnVuY3Rpb24ocCl7YyhwKX0saD0wLG07aDxhLmxlbmd0aDtoKyspbT1hW2hdLENjKG0sdGEoZixoKSxnKTtlbHNlIGIoZSl9KX1cbmZ1bmN0aW9uIEZjKGEpe3JldHVybiBuZXcgQihmdW5jdGlvbihiKXt2YXIgYz1hLmxlbmd0aCxkPVtdO2lmKGMpZm9yKHZhciBlPWZ1bmN0aW9uKGgsbSxwKXtjLS07ZFtoXT1tP3tNYjohMCx2YWx1ZTpwfTp7TWI6ITEscmVhc29uOnB9OzA9PWMmJmIoZCl9LGY9MCxnO2Y8YS5sZW5ndGg7ZisrKWc9YVtmXSxDYyhnLHRhKGUsZiwhMCksdGEoZSxmLCExKSk7ZWxzZSBiKGQpfSl9Qi5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIEdjKHRoaXMsbmEoYSk/YTpudWxsLG5hKGIpP2I6bnVsbCxjKX07Qi5wcm90b3R5cGUuJGdvb2dfVGhlbmFibGU9ITA7az1CLnByb3RvdHlwZTtrLm1hPWZ1bmN0aW9uKGEsYil7YT1CYyhhLGEsYik7YS5jPSEwO0hjKHRoaXMsYSk7cmV0dXJuIHRoaXN9O2subz1mdW5jdGlvbihhLGIpe3JldHVybiBHYyh0aGlzLG51bGwsYSxiKX07XG5rLmNhbmNlbD1mdW5jdGlvbihhKXtpZih0aGlzLmE9PXVjKXt2YXIgYj1uZXcgeGMoYSk7cGMoZnVuY3Rpb24oKXtJYyh0aGlzLGIpfSx0aGlzKX19O2Z1bmN0aW9uIEljKGEsYil7aWYoYS5hPT11YylpZihhLmMpe3ZhciBjPWEuYztpZihjLmIpe2Zvcih2YXIgZD0wLGU9bnVsbCxmPW51bGwsZz1jLmI7ZyYmKGcuY3x8KGQrKyxnLmE9PWEmJihlPWcpLCEoZSYmMTxkKSkpO2c9Zy5uZXh0KWV8fChmPWcpO2UmJihjLmE9PXVjJiYxPT1kP0ljKGMsYik6KGY/KGQ9ZixkLm5leHQ9PWMuZiYmKGMuZj1kKSxkLm5leHQ9ZC5uZXh0Lm5leHQpOkpjKGMpLEtjKGMsZSx5YyxiKSkpfWEuYz1udWxsfWVsc2UgdmMoYSx5YyxiKX1mdW5jdGlvbiBIYyhhLGIpe2EuYnx8YS5hIT13YyYmYS5hIT15Y3x8TGMoYSk7YS5mP2EuZi5uZXh0PWI6YS5iPWI7YS5mPWJ9XG5mdW5jdGlvbiBHYyhhLGIsYyxkKXt2YXIgZT1CYyhudWxsLG51bGwsbnVsbCk7ZS5hPW5ldyBCKGZ1bmN0aW9uKGYsZyl7ZS5nPWI/ZnVuY3Rpb24oaCl7dHJ5e3ZhciBtPWIuY2FsbChkLGgpO2YobSl9Y2F0Y2gocCl7ZyhwKX19OmY7ZS5iPWM/ZnVuY3Rpb24oaCl7dHJ5e3ZhciBtPWMuY2FsbChkLGgpO3ZvaWQgMD09PW0mJmggaW5zdGFuY2VvZiB4Yz9nKGgpOmYobSl9Y2F0Y2gocCl7ZyhwKX19Omd9KTtlLmEuYz1hO0hjKGEsZSk7cmV0dXJuIGUuYX1rLlljPWZ1bmN0aW9uKGEpe3RoaXMuYT11Yzt2Yyh0aGlzLHdjLGEpfTtrLlpjPWZ1bmN0aW9uKGEpe3RoaXMuYT11Yzt2Yyh0aGlzLHljLGEpfTtcbmZ1bmN0aW9uIHZjKGEsYixjKXthLmE9PXVjJiYoYT09PWMmJihiPXljLGM9bmV3IFR5cGVFcnJvcihcIlByb21pc2UgY2Fubm90IHJlc29sdmUgdG8gaXRzZWxmXCIpKSxhLmE9MSxEYyhjLGEuWWMsYS5aYyxhKXx8KGEuaT1jLGEuYT1iLGEuYz1udWxsLExjKGEpLGIhPXljfHxjIGluc3RhbmNlb2YgeGN8fE1jKGEsYykpKX1mdW5jdGlvbiBEYyhhLGIsYyxkKXtpZihhIGluc3RhbmNlb2YgQilyZXR1cm4gSGMoYSxCYyhifHxrYSxjfHxudWxsLGQpKSwhMDtpZihDYShhKSlyZXR1cm4gYS50aGVuKGIsYyxkKSwhMDtpZihuKGEpKXRyeXt2YXIgZT1hLnRoZW47aWYobmEoZSkpcmV0dXJuIE5jKGEsZSxiLGMsZCksITB9Y2F0Y2goZil7cmV0dXJuIGMuY2FsbChkLGYpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gTmMoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKG0pe2h8fChoPSEwLGQuY2FsbChlLG0pKX1mdW5jdGlvbiBnKG0pe2h8fChoPSEwLGMuY2FsbChlLG0pKX12YXIgaD0hMTt0cnl7Yi5jYWxsKGEsZyxmKX1jYXRjaChtKXtmKG0pfX1mdW5jdGlvbiBMYyhhKXthLmh8fChhLmg9ITAscGMoYS5lYyxhKSl9ZnVuY3Rpb24gSmMoYSl7dmFyIGI9bnVsbDthLmImJihiPWEuYixhLmI9Yi5uZXh0LGIubmV4dD1udWxsKTthLmJ8fChhLmY9bnVsbCk7cmV0dXJuIGJ9ay5lYz1mdW5jdGlvbigpe2Zvcih2YXIgYTthPUpjKHRoaXMpOylLYyh0aGlzLGEsdGhpcy5hLHRoaXMuaSk7dGhpcy5oPSExfTtcbmZ1bmN0aW9uIEtjKGEsYixjLGQpe2lmKGM9PXljJiZiLmImJiFiLmMpZm9yKDthJiZhLmc7YT1hLmMpYS5nPSExO2lmKGIuYSliLmEuYz1udWxsLE9jKGIsYyxkKTtlbHNlIHRyeXtiLmM/Yi5nLmNhbGwoYi5mKTpPYyhiLGMsZCl9Y2F0Y2goZSl7UGMuY2FsbChudWxsLGUpfUdhKEFjLGIpfWZ1bmN0aW9uIE9jKGEsYixjKXtiPT13Yz9hLmcuY2FsbChhLmYsYyk6YS5iJiZhLmIuY2FsbChhLmYsYyl9ZnVuY3Rpb24gTWMoYSxiKXthLmc9ITA7cGMoZnVuY3Rpb24oKXthLmcmJlBjLmNhbGwobnVsbCxiKX0pfXZhciBQYz1tYztmdW5jdGlvbiB4YyhhKXt1LmNhbGwodGhpcyxhKX1yKHhjLHUpO3hjLnByb3RvdHlwZS5uYW1lPVwiY2FuY2VsXCI7ZnVuY3Rpb24gUWMoKXswIT1SYyYmKFNjW29hKHRoaXMpXT10aGlzKTt0aGlzLndhPXRoaXMud2E7dGhpcy5uYT10aGlzLm5hfXZhciBSYz0wLFNjPXt9O1FjLnByb3RvdHlwZS53YT0hMTtmdW5jdGlvbiBUYyhhKXtpZighYS53YSYmKGEud2E9ITAsYS5CYSgpLDAhPVJjKSl7dmFyIGI9b2EoYSk7aWYoMCE9UmMmJmEubmEmJjA8YS5uYS5sZW5ndGgpdGhyb3cgRXJyb3IoYStcIiBkaWQgbm90IGVtcHR5IGl0cyBvbkRpc3Bvc2VDYWxsYmFja3MgcXVldWUuIFRoaXMgcHJvYmFibHkgbWVhbnMgaXQgb3ZlcnJvZGUgZGlzcG9zZSgpIG9yIGRpc3Bvc2VJbnRlcm5hbCgpIHdpdGhvdXQgY2FsbGluZyB0aGUgc3VwZXJjbGFzcycgbWV0aG9kLlwiKTtkZWxldGUgU2NbYl19fVFjLnByb3RvdHlwZS5CYT1mdW5jdGlvbigpe2lmKHRoaXMubmEpZm9yKDt0aGlzLm5hLmxlbmd0aDspdGhpcy5uYS5zaGlmdCgpKCl9O3ZhciBVYz1PYmplY3QuZnJlZXplfHxmdW5jdGlvbihhKXtyZXR1cm4gYX07dmFyIFZjPSFUYnx8OTw9TnVtYmVyKGRjKSxXYz1UYiYmIWNjKFwiOVwiKSxYYz1mdW5jdGlvbigpe2lmKCFsLmFkZEV2ZW50TGlzdGVuZXJ8fCFPYmplY3QuZGVmaW5lUHJvcGVydHkpcmV0dXJuITE7dmFyIGE9ITEsYj1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe2E9ITB9fSk7dHJ5e2wuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixrYSxiKSxsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsa2EsYil9Y2F0Y2goYyl7fXJldHVybiBhfSgpO2Z1bmN0aW9uIEYoYSxiKXt0aGlzLnR5cGU9YTt0aGlzLmI9dGhpcy50YXJnZXQ9Yjt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITF9Ri5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITB9O2Z1bmN0aW9uIFljKGEsYil7Ri5jYWxsKHRoaXMsYT9hLnR5cGU6XCJcIik7dGhpcy5yZWxhdGVkVGFyZ2V0PXRoaXMuYj10aGlzLnRhcmdldD1udWxsO3RoaXMuYnV0dG9uPXRoaXMuc2NyZWVuWT10aGlzLnNjcmVlblg9dGhpcy5jbGllbnRZPXRoaXMuY2xpZW50WD0wO3RoaXMua2V5PVwiXCI7dGhpcy5tZXRhS2V5PXRoaXMuc2hpZnRLZXk9dGhpcy5hbHRLZXk9dGhpcy5jdHJsS2V5PSExO3RoaXMucG9pbnRlcklkPTA7dGhpcy5wb2ludGVyVHlwZT1cIlwiO3RoaXMuYT1udWxsO2lmKGEpe3ZhciBjPXRoaXMudHlwZT1hLnR5cGUsZD1hLmNoYW5nZWRUb3VjaGVzJiZhLmNoYW5nZWRUb3VjaGVzLmxlbmd0aD9hLmNoYW5nZWRUb3VjaGVzWzBdOm51bGw7dGhpcy50YXJnZXQ9YS50YXJnZXR8fGEuc3JjRWxlbWVudDt0aGlzLmI9YjtpZihiPWEucmVsYXRlZFRhcmdldCl7aWYoV2Ipe2E6e3RyeXtQYihiLm5vZGVOYW1lKTt2YXIgZT0hMDticmVhayBhfWNhdGNoKGYpe31lPSExfWV8fChiPW51bGwpfX1lbHNlXCJtb3VzZW92ZXJcIj09XG5jP2I9YS5mcm9tRWxlbWVudDpcIm1vdXNlb3V0XCI9PWMmJihiPWEudG9FbGVtZW50KTt0aGlzLnJlbGF0ZWRUYXJnZXQ9YjtkPyh0aGlzLmNsaWVudFg9dm9pZCAwIT09ZC5jbGllbnRYP2QuY2xpZW50WDpkLnBhZ2VYLHRoaXMuY2xpZW50WT12b2lkIDAhPT1kLmNsaWVudFk/ZC5jbGllbnRZOmQucGFnZVksdGhpcy5zY3JlZW5YPWQuc2NyZWVuWHx8MCx0aGlzLnNjcmVlblk9ZC5zY3JlZW5ZfHwwKToodGhpcy5jbGllbnRYPXZvaWQgMCE9PWEuY2xpZW50WD9hLmNsaWVudFg6YS5wYWdlWCx0aGlzLmNsaWVudFk9dm9pZCAwIT09YS5jbGllbnRZP2EuY2xpZW50WTphLnBhZ2VZLHRoaXMuc2NyZWVuWD1hLnNjcmVlblh8fDAsdGhpcy5zY3JlZW5ZPWEuc2NyZWVuWXx8MCk7dGhpcy5idXR0b249YS5idXR0b247dGhpcy5rZXk9YS5rZXl8fFwiXCI7dGhpcy5jdHJsS2V5PWEuY3RybEtleTt0aGlzLmFsdEtleT1hLmFsdEtleTt0aGlzLnNoaWZ0S2V5PWEuc2hpZnRLZXk7dGhpcy5tZXRhS2V5PVxuYS5tZXRhS2V5O3RoaXMucG9pbnRlcklkPWEucG9pbnRlcklkfHwwO3RoaXMucG9pbnRlclR5cGU9XCJzdHJpbmdcIj09PXR5cGVvZiBhLnBvaW50ZXJUeXBlP2EucG9pbnRlclR5cGU6WmNbYS5wb2ludGVyVHlwZV18fFwiXCI7dGhpcy5hPWE7YS5kZWZhdWx0UHJldmVudGVkJiZ0aGlzLnByZXZlbnREZWZhdWx0KCl9fXIoWWMsRik7dmFyIFpjPVVjKHsyOlwidG91Y2hcIiwzOlwicGVuXCIsNDpcIm1vdXNlXCJ9KTtZYy5wcm90b3R5cGUucHJldmVudERlZmF1bHQ9ZnVuY3Rpb24oKXtZYy5aYS5wcmV2ZW50RGVmYXVsdC5jYWxsKHRoaXMpO3ZhciBhPXRoaXMuYTtpZihhLnByZXZlbnREZWZhdWx0KWEucHJldmVudERlZmF1bHQoKTtlbHNlIGlmKGEucmV0dXJuVmFsdWU9ITEsV2MpdHJ5e2lmKGEuY3RybEtleXx8MTEyPD1hLmtleUNvZGUmJjEyMz49YS5rZXlDb2RlKWEua2V5Q29kZT0tMX1jYXRjaChiKXt9fTtZYy5wcm90b3R5cGUuZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmF9O3ZhciAkYz1cImNsb3N1cmVfbGlzdGVuYWJsZV9cIisoMUU2Kk1hdGgucmFuZG9tKCl8MCksYWQ9MDtmdW5jdGlvbiBiZChhLGIsYyxkLGUpe3RoaXMubGlzdGVuZXI9YTt0aGlzLnByb3h5PW51bGw7dGhpcy5zcmM9Yjt0aGlzLnR5cGU9Yzt0aGlzLmNhcHR1cmU9ISFkO3RoaXMuVGE9ZTt0aGlzLmtleT0rK2FkO3RoaXMudWE9dGhpcy5OYT0hMX1mdW5jdGlvbiBjZChhKXthLnVhPSEwO2EubGlzdGVuZXI9bnVsbDthLnByb3h5PW51bGw7YS5zcmM9bnVsbDthLlRhPW51bGx9O2Z1bmN0aW9uIGRkKGEpe3RoaXMuc3JjPWE7dGhpcy5hPXt9O3RoaXMuYj0wfWRkLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLnRvU3RyaW5nKCk7YT10aGlzLmFbZl07YXx8KGE9dGhpcy5hW2ZdPVtdLHRoaXMuYisrKTt2YXIgZz1lZChhLGIsZCxlKTstMTxnPyhiPWFbZ10sY3x8KGIuTmE9ITEpKTooYj1uZXcgYmQoYix0aGlzLnNyYyxmLCEhZCxlKSxiLk5hPWMsYS5wdXNoKGIpKTtyZXR1cm4gYn07ZnVuY3Rpb24gZmQoYSxiKXt2YXIgYz1iLnR5cGU7YyBpbiBhLmEmJlVhKGEuYVtjXSxiKSYmKGNkKGIpLDA9PWEuYVtjXS5sZW5ndGgmJihkZWxldGUgYS5hW2NdLGEuYi0tKSl9ZnVuY3Rpb24gZWQoYSxiLGMsZCl7Zm9yKHZhciBlPTA7ZTxhLmxlbmd0aDsrK2Upe3ZhciBmPWFbZV07aWYoIWYudWEmJmYubGlzdGVuZXI9PWImJmYuY2FwdHVyZT09ISFjJiZmLlRhPT1kKXJldHVybiBlfXJldHVybi0xfTt2YXIgZ2Q9XCJjbG9zdXJlX2xtX1wiKygxRTYqTWF0aC5yYW5kb20oKXwwKSxoZD17fSxpZD0wO2Z1bmN0aW9uIGpkKGEsYixjLGQsZSl7aWYoZCYmZC5vbmNlKWtkKGEsYixjLGQsZSk7ZWxzZSBpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKWpkKGEsYltmXSxjLGQsZSk7ZWxzZSBjPWxkKGMpLGEmJmFbJGNdP21kKGEsYixjLG4oZCk/ISFkLmNhcHR1cmU6ISFkLGUpOm5kKGEsYixjLCExLGQsZSl9XG5mdW5jdGlvbiBuZChhLGIsYyxkLGUsZil7aWYoIWIpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGV2ZW50IHR5cGVcIik7dmFyIGc9bihlKT8hIWUuY2FwdHVyZTohIWUsaD1vZChhKTtofHwoYVtnZF09aD1uZXcgZGQoYSkpO2M9aC5hZGQoYixjLGQsZyxmKTtpZighYy5wcm94eSl7ZD1wZCgpO2MucHJveHk9ZDtkLnNyYz1hO2QubGlzdGVuZXI9YztpZihhLmFkZEV2ZW50TGlzdGVuZXIpWGN8fChlPWcpLHZvaWQgMD09PWUmJihlPSExKSxhLmFkZEV2ZW50TGlzdGVuZXIoYi50b1N0cmluZygpLGQsZSk7ZWxzZSBpZihhLmF0dGFjaEV2ZW50KWEuYXR0YWNoRXZlbnQocWQoYi50b1N0cmluZygpKSxkKTtlbHNlIGlmKGEuYWRkTGlzdGVuZXImJmEucmVtb3ZlTGlzdGVuZXIpYS5hZGRMaXN0ZW5lcihkKTtlbHNlIHRocm93IEVycm9yKFwiYWRkRXZlbnRMaXN0ZW5lciBhbmQgYXR0YWNoRXZlbnQgYXJlIHVuYXZhaWxhYmxlLlwiKTtpZCsrfX1cbmZ1bmN0aW9uIHBkKCl7dmFyIGE9cmQsYj1WYz9mdW5jdGlvbihjKXtyZXR1cm4gYS5jYWxsKGIuc3JjLGIubGlzdGVuZXIsYyl9OmZ1bmN0aW9uKGMpe2M9YS5jYWxsKGIuc3JjLGIubGlzdGVuZXIsYyk7aWYoIWMpcmV0dXJuIGN9O3JldHVybiBifWZ1bmN0aW9uIGtkKGEsYixjLGQsZSl7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrKylrZChhLGJbZl0sYyxkLGUpO2Vsc2UgYz1sZChjKSxhJiZhWyRjXT9zZChhLGIsYyxuKGQpPyEhZC5jYXB0dXJlOiEhZCxlKTpuZChhLGIsYywhMCxkLGUpfVxuZnVuY3Rpb24gdGQoYSxiLGMsZCxlKXtpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7ZisrKXRkKGEsYltmXSxjLGQsZSk7ZWxzZShkPW4oZCk/ISFkLmNhcHR1cmU6ISFkLGM9bGQoYyksYSYmYVskY10pPyhhPWEudSxiPVN0cmluZyhiKS50b1N0cmluZygpLGIgaW4gYS5hJiYoZj1hLmFbYl0sYz1lZChmLGMsZCxlKSwtMTxjJiYoY2QoZltjXSksQXJyYXkucHJvdG90eXBlLnNwbGljZS5jYWxsKGYsYywxKSwwPT1mLmxlbmd0aCYmKGRlbGV0ZSBhLmFbYl0sYS5iLS0pKSkpOmEmJihhPW9kKGEpKSYmKGI9YS5hW2IudG9TdHJpbmcoKV0sYT0tMSxiJiYoYT1lZChiLGMsZCxlKSksKGM9LTE8YT9iW2FdOm51bGwpJiZ2ZChjKSl9XG5mdW5jdGlvbiB2ZChhKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGEmJmEmJiFhLnVhKXt2YXIgYj1hLnNyYztpZihiJiZiWyRjXSlmZChiLnUsYSk7ZWxzZXt2YXIgYz1hLnR5cGUsZD1hLnByb3h5O2IucmVtb3ZlRXZlbnRMaXN0ZW5lcj9iLnJlbW92ZUV2ZW50TGlzdGVuZXIoYyxkLGEuY2FwdHVyZSk6Yi5kZXRhY2hFdmVudD9iLmRldGFjaEV2ZW50KHFkKGMpLGQpOmIuYWRkTGlzdGVuZXImJmIucmVtb3ZlTGlzdGVuZXImJmIucmVtb3ZlTGlzdGVuZXIoZCk7aWQtLTsoYz1vZChiKSk/KGZkKGMsYSksMD09Yy5iJiYoYy5zcmM9bnVsbCxiW2dkXT1udWxsKSk6Y2QoYSl9fX1mdW5jdGlvbiBxZChhKXtyZXR1cm4gYSBpbiBoZD9oZFthXTpoZFthXT1cIm9uXCIrYX1cbmZ1bmN0aW9uIHdkKGEsYixjLGQpe3ZhciBlPSEwO2lmKGE9b2QoYSkpaWYoYj1hLmFbYi50b1N0cmluZygpXSlmb3IoYj1iLmNvbmNhdCgpLGE9MDthPGIubGVuZ3RoO2ErKyl7dmFyIGY9YlthXTtmJiZmLmNhcHR1cmU9PWMmJiFmLnVhJiYoZj14ZChmLGQpLGU9ZSYmITEhPT1mKX1yZXR1cm4gZX1mdW5jdGlvbiB4ZChhLGIpe3ZhciBjPWEubGlzdGVuZXIsZD1hLlRhfHxhLnNyYzthLk5hJiZ2ZChhKTtyZXR1cm4gYy5jYWxsKGQsYil9XG5mdW5jdGlvbiByZChhLGIpe2lmKGEudWEpcmV0dXJuITA7aWYoIVZjKXtpZighYilhOntiPVtcIndpbmRvd1wiLFwiZXZlbnRcIl07Zm9yKHZhciBjPWwsZD0wO2Q8Yi5sZW5ndGg7ZCsrKWlmKGM9Y1tiW2RdXSxudWxsPT1jKXtiPW51bGw7YnJlYWsgYX1iPWN9ZD1iO2I9bmV3IFljKGQsdGhpcyk7Yz0hMDtpZighKDA+ZC5rZXlDb2RlfHx2b2lkIDAhPWQucmV0dXJuVmFsdWUpKXthOnt2YXIgZT0hMTtpZigwPT1kLmtleUNvZGUpdHJ5e2Qua2V5Q29kZT0tMTticmVhayBhfWNhdGNoKGcpe2U9ITB9aWYoZXx8dm9pZCAwPT1kLnJldHVyblZhbHVlKWQucmV0dXJuVmFsdWU9ITB9ZD1bXTtmb3IoZT1iLmI7ZTtlPWUucGFyZW50Tm9kZSlkLnB1c2goZSk7YT1hLnR5cGU7Zm9yKGU9ZC5sZW5ndGgtMTswPD1lO2UtLSl7Yi5iPWRbZV07dmFyIGY9d2QoZFtlXSxhLCEwLGIpO2M9YyYmZn1mb3IoZT0wO2U8ZC5sZW5ndGg7ZSsrKWIuYj1kW2VdLGY9d2QoZFtlXSxhLCExLGIpLGM9YyYmZn1yZXR1cm4gY31yZXR1cm4geGQoYSxcbm5ldyBZYyhiLHRoaXMpKX1mdW5jdGlvbiBvZChhKXthPWFbZ2RdO3JldHVybiBhIGluc3RhbmNlb2YgZGQ/YTpudWxsfXZhciB5ZD1cIl9fY2xvc3VyZV9ldmVudHNfZm5fXCIrKDFFOSpNYXRoLnJhbmRvbSgpPj4+MCk7ZnVuY3Rpb24gbGQoYSl7aWYobmEoYSkpcmV0dXJuIGE7YVt5ZF18fChhW3lkXT1mdW5jdGlvbihiKXtyZXR1cm4gYS5oYW5kbGVFdmVudChiKX0pO3JldHVybiBhW3lkXX07ZnVuY3Rpb24gRygpe1FjLmNhbGwodGhpcyk7dGhpcy51PW5ldyBkZCh0aGlzKTt0aGlzLlliPXRoaXM7dGhpcy5lYj1udWxsfXIoRyxRYyk7Ry5wcm90b3R5cGVbJGNdPSEwO0cucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oYSxiLGMsZCl7amQodGhpcyxhLGIsYyxkKX07Ry5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihhLGIsYyxkKXt0ZCh0aGlzLGEsYixjLGQpfTtcbkcucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oYSl7dmFyIGIsYz10aGlzLmViO2lmKGMpZm9yKGI9W107YztjPWMuZWIpYi5wdXNoKGMpO2M9dGhpcy5ZYjt2YXIgZD1hLnR5cGV8fGE7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWE9bmV3IEYoYSxjKTtlbHNlIGlmKGEgaW5zdGFuY2VvZiBGKWEudGFyZ2V0PWEudGFyZ2V0fHxjO2Vsc2V7dmFyIGU9YTthPW5ldyBGKGQsYyk7eihhLGUpfWU9ITA7aWYoYilmb3IodmFyIGY9Yi5sZW5ndGgtMTswPD1mO2YtLSl7dmFyIGc9YS5iPWJbZl07ZT16ZChnLGQsITAsYSkmJmV9Zz1hLmI9YztlPXpkKGcsZCwhMCxhKSYmZTtlPXpkKGcsZCwhMSxhKSYmZTtpZihiKWZvcihmPTA7ZjxiLmxlbmd0aDtmKyspZz1hLmI9YltmXSxlPXpkKGcsZCwhMSxhKSYmZTtyZXR1cm4gZX07XG5HLnByb3RvdHlwZS5CYT1mdW5jdGlvbigpe0cuWmEuQmEuY2FsbCh0aGlzKTtpZih0aGlzLnUpe3ZhciBhPXRoaXMudSxiPTAsYztmb3IoYyBpbiBhLmEpe2Zvcih2YXIgZD1hLmFbY10sZT0wO2U8ZC5sZW5ndGg7ZSsrKSsrYixjZChkW2VdKTtkZWxldGUgYS5hW2NdO2EuYi0tfX10aGlzLmViPW51bGx9O2Z1bmN0aW9uIG1kKGEsYixjLGQsZSl7YS51LmFkZChTdHJpbmcoYiksYywhMSxkLGUpfWZ1bmN0aW9uIHNkKGEsYixjLGQsZSl7YS51LmFkZChTdHJpbmcoYiksYywhMCxkLGUpfVxuZnVuY3Rpb24gemQoYSxiLGMsZCl7Yj1hLnUuYVtTdHJpbmcoYildO2lmKCFiKXJldHVybiEwO2I9Yi5jb25jYXQoKTtmb3IodmFyIGU9ITAsZj0wO2Y8Yi5sZW5ndGg7KytmKXt2YXIgZz1iW2ZdO2lmKGcmJiFnLnVhJiZnLmNhcHR1cmU9PWMpe3ZhciBoPWcubGlzdGVuZXIsbT1nLlRhfHxnLnNyYztnLk5hJiZmZChhLnUsZyk7ZT0hMSE9PWguY2FsbChtLGQpJiZlfX1yZXR1cm4gZSYmIWQuZGVmYXVsdFByZXZlbnRlZH07ZnVuY3Rpb24gQWQoYSxiLGMpe2lmKG5hKGEpKWMmJihhPXEoYSxjKSk7ZWxzZSBpZihhJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmhhbmRsZUV2ZW50KWE9cShhLmhhbmRsZUV2ZW50LGEpO2Vsc2UgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGxpc3RlbmVyIGFyZ3VtZW50XCIpO3JldHVybiAyMTQ3NDgzNjQ3PE51bWJlcihiKT8tMTpsLnNldFRpbWVvdXQoYSxifHwwKX1mdW5jdGlvbiBCZChhKXt2YXIgYj1udWxsO3JldHVybihuZXcgQihmdW5jdGlvbihjLGQpe2I9QWQoZnVuY3Rpb24oKXtjKHZvaWQgMCl9LGEpOy0xPT1iJiZkKEVycm9yKFwiRmFpbGVkIHRvIHNjaGVkdWxlIHRpbWVyLlwiKSl9KSkubyhmdW5jdGlvbihjKXtsLmNsZWFyVGltZW91dChiKTt0aHJvdyBjO30pfTtmdW5jdGlvbiBDZChhKXtpZihhLlYmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuVilyZXR1cm4gYS5WKCk7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhLnNwbGl0KFwiXCIpO2lmKG1hKGEpKXtmb3IodmFyIGI9W10sYz1hLmxlbmd0aCxkPTA7ZDxjO2QrKyliLnB1c2goYVtkXSk7cmV0dXJuIGJ9Yj1bXTtjPTA7Zm9yKGQgaW4gYSliW2MrK109YVtkXTtyZXR1cm4gYn1mdW5jdGlvbiBEZChhKXtpZihhLlgmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEuWClyZXR1cm4gYS5YKCk7aWYoIWEuVnx8XCJmdW5jdGlvblwiIT10eXBlb2YgYS5WKXtpZihtYShhKXx8XCJzdHJpbmdcIj09PXR5cGVvZiBhKXt2YXIgYj1bXTthPWEubGVuZ3RoO2Zvcih2YXIgYz0wO2M8YTtjKyspYi5wdXNoKGMpO3JldHVybiBifWI9W107Yz0wO2Zvcih2YXIgZCBpbiBhKWJbYysrXT1kO3JldHVybiBifX1cbmZ1bmN0aW9uIEVkKGEsYil7aWYoYS5mb3JFYWNoJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmZvckVhY2gpYS5mb3JFYWNoKGIsdm9pZCAwKTtlbHNlIGlmKG1hKGEpfHxcInN0cmluZ1wiPT09dHlwZW9mIGEpdyhhLGIsdm9pZCAwKTtlbHNlIGZvcih2YXIgYz1EZChhKSxkPUNkKGEpLGU9ZC5sZW5ndGgsZj0wO2Y8ZTtmKyspYi5jYWxsKHZvaWQgMCxkW2ZdLGMmJmNbZl0sYSl9O2Z1bmN0aW9uIEZkKGEsYil7dGhpcy5iPXt9O3RoaXMuYT1bXTt0aGlzLmM9MDt2YXIgYz1hcmd1bWVudHMubGVuZ3RoO2lmKDE8Yyl7aWYoYyUyKXRocm93IEVycm9yKFwiVW5ldmVuIG51bWJlciBvZiBhcmd1bWVudHNcIik7Zm9yKHZhciBkPTA7ZDxjO2QrPTIpdGhpcy5zZXQoYXJndW1lbnRzW2RdLGFyZ3VtZW50c1tkKzFdKX1lbHNlIGlmKGEpaWYoYSBpbnN0YW5jZW9mIEZkKWZvcihjPWEuWCgpLGQ9MDtkPGMubGVuZ3RoO2QrKyl0aGlzLnNldChjW2RdLGEuZ2V0KGNbZF0pKTtlbHNlIGZvcihkIGluIGEpdGhpcy5zZXQoZCxhW2RdKX1rPUZkLnByb3RvdHlwZTtrLlY9ZnVuY3Rpb24oKXtHZCh0aGlzKTtmb3IodmFyIGE9W10sYj0wO2I8dGhpcy5hLmxlbmd0aDtiKyspYS5wdXNoKHRoaXMuYlt0aGlzLmFbYl1dKTtyZXR1cm4gYX07ay5YPWZ1bmN0aW9uKCl7R2QodGhpcyk7cmV0dXJuIHRoaXMuYS5jb25jYXQoKX07XG5rLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5iPXt9O3RoaXMuYz10aGlzLmEubGVuZ3RoPTB9O2Z1bmN0aW9uIEdkKGEpe2lmKGEuYyE9YS5hLmxlbmd0aCl7Zm9yKHZhciBiPTAsYz0wO2I8YS5hLmxlbmd0aDspe3ZhciBkPWEuYVtiXTtIZChhLmIsZCkmJihhLmFbYysrXT1kKTtiKyt9YS5hLmxlbmd0aD1jfWlmKGEuYyE9YS5hLmxlbmd0aCl7dmFyIGU9e307Zm9yKGM9Yj0wO2I8YS5hLmxlbmd0aDspZD1hLmFbYl0sSGQoZSxkKXx8KGEuYVtjKytdPWQsZVtkXT0xKSxiKys7YS5hLmxlbmd0aD1jfX1rLmdldD1mdW5jdGlvbihhLGIpe3JldHVybiBIZCh0aGlzLmIsYSk/dGhpcy5iW2FdOmJ9O2suc2V0PWZ1bmN0aW9uKGEsYil7SGQodGhpcy5iLGEpfHwodGhpcy5jKyssdGhpcy5hLnB1c2goYSkpO3RoaXMuYlthXT1ifTtcbmsuZm9yRWFjaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLlgoKSxkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj10aGlzLmdldChlKTthLmNhbGwoYixmLGUsdGhpcyl9fTtmdW5jdGlvbiBIZChhLGIpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxiKX07dmFyIElkPS9eKD86KFteOi8/Iy5dKyk6KT8oPzpcXC9cXC8oPzooW14vPyNdKilAKT8oW14vIz9dKj8pKD86OihbMC05XSspKT8oPz1bL1xcXFwjP118JCkpPyhbXj8jXSspPyg/OlxcPyhbXiNdKikpPyg/OiMoW1xcc1xcU10qKSk/JC87ZnVuY3Rpb24gSmQoYSxiKXtpZihhKXthPWEuc3BsaXQoXCImXCIpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLmluZGV4T2YoXCI9XCIpLGU9bnVsbDtpZigwPD1kKXt2YXIgZj1hW2NdLnN1YnN0cmluZygwLGQpO2U9YVtjXS5zdWJzdHJpbmcoZCsxKX1lbHNlIGY9YVtjXTtiKGYsZT9kZWNvZGVVUklDb21wb25lbnQoZS5yZXBsYWNlKC9cXCsvZyxcIiBcIikpOlwiXCIpfX19O2Z1bmN0aW9uIEtkKGEsYil7dGhpcy5iPXRoaXMuaT10aGlzLmY9XCJcIjt0aGlzLmw9bnVsbDt0aGlzLmc9dGhpcy5jPVwiXCI7dGhpcy5oPSExO3ZhciBjO2EgaW5zdGFuY2VvZiBLZD8odGhpcy5oPXZvaWQgMCE9PWI/YjphLmgsTGQodGhpcyxhLmYpLHRoaXMuaT1hLmksdGhpcy5iPWEuYixNZCh0aGlzLGEubCksdGhpcy5jPWEuYyxOZCh0aGlzLE9kKGEuYSkpLHRoaXMuZz1hLmcpOmEmJihjPVN0cmluZyhhKS5tYXRjaChJZCkpPyh0aGlzLmg9ISFiLExkKHRoaXMsY1sxXXx8XCJcIiwhMCksdGhpcy5pPVBkKGNbMl18fFwiXCIpLHRoaXMuYj1QZChjWzNdfHxcIlwiLCEwKSxNZCh0aGlzLGNbNF0pLHRoaXMuYz1QZChjWzVdfHxcIlwiLCEwKSxOZCh0aGlzLGNbNl18fFwiXCIsITApLHRoaXMuZz1QZChjWzddfHxcIlwiKSk6KHRoaXMuaD0hIWIsdGhpcy5hPW5ldyBRZChudWxsLHRoaXMuaCkpfVxuS2QucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIGE9W10sYj10aGlzLmY7YiYmYS5wdXNoKFJkKGIsU2QsITApLFwiOlwiKTt2YXIgYz10aGlzLmI7aWYoY3x8XCJmaWxlXCI9PWIpYS5wdXNoKFwiLy9cIiksKGI9dGhpcy5pKSYmYS5wdXNoKFJkKGIsU2QsITApLFwiQFwiKSxhLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjKSkucmVwbGFjZSgvJTI1KFswLTlhLWZBLUZdezJ9KS9nLFwiJSQxXCIpKSxjPXRoaXMubCxudWxsIT1jJiZhLnB1c2goXCI6XCIsU3RyaW5nKGMpKTtpZihjPXRoaXMuYyl0aGlzLmImJlwiL1wiIT1jLmNoYXJBdCgwKSYmYS5wdXNoKFwiL1wiKSxhLnB1c2goUmQoYyxcIi9cIj09Yy5jaGFyQXQoMCk/VGQ6VWQsITApKTsoYz10aGlzLmEudG9TdHJpbmcoKSkmJmEucHVzaChcIj9cIixjKTsoYz10aGlzLmcpJiZhLnB1c2goXCIjXCIsUmQoYyxWZCkpO3JldHVybiBhLmpvaW4oXCJcIil9O1xuS2QucHJvdG90eXBlLnJlc29sdmU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtkKHRoaXMpLGM9ISFhLmY7Yz9MZChiLGEuZik6Yz0hIWEuaTtjP2IuaT1hLmk6Yz0hIWEuYjtjP2IuYj1hLmI6Yz1udWxsIT1hLmw7dmFyIGQ9YS5jO2lmKGMpTWQoYixhLmwpO2Vsc2UgaWYoYz0hIWEuYyl7aWYoXCIvXCIhPWQuY2hhckF0KDApKWlmKHRoaXMuYiYmIXRoaXMuYylkPVwiL1wiK2Q7ZWxzZXt2YXIgZT1iLmMubGFzdEluZGV4T2YoXCIvXCIpOy0xIT1lJiYoZD1iLmMuc3Vic3RyKDAsZSsxKStkKX1lPWQ7aWYoXCIuLlwiPT1lfHxcIi5cIj09ZSlkPVwiXCI7ZWxzZSBpZih4KGUsXCIuL1wiKXx8eChlLFwiLy5cIikpe2Q9MD09ZS5sYXN0SW5kZXhPZihcIi9cIiwwKTtlPWUuc3BsaXQoXCIvXCIpO2Zvcih2YXIgZj1bXSxnPTA7ZzxlLmxlbmd0aDspe3ZhciBoPWVbZysrXTtcIi5cIj09aD9kJiZnPT1lLmxlbmd0aCYmZi5wdXNoKFwiXCIpOlwiLi5cIj09aD8oKDE8Zi5sZW5ndGh8fDE9PWYubGVuZ3RoJiZcIlwiIT1mWzBdKSYmZi5wb3AoKSxcbmQmJmc9PWUubGVuZ3RoJiZmLnB1c2goXCJcIikpOihmLnB1c2goaCksZD0hMCl9ZD1mLmpvaW4oXCIvXCIpfWVsc2UgZD1lfWM/Yi5jPWQ6Yz1cIlwiIT09YS5hLnRvU3RyaW5nKCk7Yz9OZChiLE9kKGEuYSkpOmM9ISFhLmc7YyYmKGIuZz1hLmcpO3JldHVybiBifTtmdW5jdGlvbiBMZChhLGIsYyl7YS5mPWM/UGQoYiwhMCk6YjthLmYmJihhLmY9YS5mLnJlcGxhY2UoLzokLyxcIlwiKSl9ZnVuY3Rpb24gTWQoYSxiKXtpZihiKXtiPU51bWJlcihiKTtpZihpc05hTihiKXx8MD5iKXRocm93IEVycm9yKFwiQmFkIHBvcnQgbnVtYmVyIFwiK2IpO2EubD1ifWVsc2UgYS5sPW51bGx9ZnVuY3Rpb24gTmQoYSxiLGMpe2IgaW5zdGFuY2VvZiBRZD8oYS5hPWIsV2QoYS5hLGEuaCkpOihjfHwoYj1SZChiLFhkKSksYS5hPW5ldyBRZChiLGEuaCkpfWZ1bmN0aW9uIEgoYSxiLGMpe2EuYS5zZXQoYixjKX1mdW5jdGlvbiBZZChhLGIpe3JldHVybiBhLmEuZ2V0KGIpfVxuZnVuY3Rpb24gWmQoYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBLZD9uZXcgS2QoYSk6bmV3IEtkKGEsdm9pZCAwKX1mdW5jdGlvbiAkZChhLGIpe3ZhciBjPW5ldyBLZChudWxsLHZvaWQgMCk7TGQoYyxcImh0dHBzXCIpO2EmJihjLmI9YSk7YiYmKGMuYz1iKTtyZXR1cm4gY31mdW5jdGlvbiBQZChhLGIpe3JldHVybiBhP2I/ZGVjb2RlVVJJKGEucmVwbGFjZSgvJTI1L2csXCIlMjUyNVwiKSk6ZGVjb2RlVVJJQ29tcG9uZW50KGEpOlwiXCJ9ZnVuY3Rpb24gUmQoYSxiLGMpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYT8oYT1lbmNvZGVVUkkoYSkucmVwbGFjZShiLGFlKSxjJiYoYT1hLnJlcGxhY2UoLyUyNShbMC05YS1mQS1GXXsyfSkvZyxcIiUkMVwiKSksYSk6bnVsbH1mdW5jdGlvbiBhZShhKXthPWEuY2hhckNvZGVBdCgwKTtyZXR1cm5cIiVcIisoYT4+NCYxNSkudG9TdHJpbmcoMTYpKyhhJjE1KS50b1N0cmluZygxNil9XG52YXIgU2Q9L1sjXFwvXFw/QF0vZyxVZD0vWyNcXD86XS9nLFRkPS9bI1xcP10vZyxYZD0vWyNcXD9AXS9nLFZkPS8jL2c7ZnVuY3Rpb24gUWQoYSxiKXt0aGlzLmI9dGhpcy5hPW51bGw7dGhpcy5jPWF8fG51bGw7dGhpcy5mPSEhYn1mdW5jdGlvbiBiZShhKXthLmF8fChhLmE9bmV3IEZkLGEuYj0wLGEuYyYmSmQoYS5jLGZ1bmN0aW9uKGIsYyl7YS5hZGQoZGVjb2RlVVJJQ29tcG9uZW50KGIucmVwbGFjZSgvXFwrL2csXCIgXCIpKSxjKX0pKX1mdW5jdGlvbiBjZShhKXt2YXIgYj1EZChhKTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgYil0aHJvdyBFcnJvcihcIktleXMgYXJlIHVuZGVmaW5lZFwiKTt2YXIgYz1uZXcgUWQobnVsbCx2b2lkIDApO2E9Q2QoYSk7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF0sZj1hW2RdO0FycmF5LmlzQXJyYXkoZik/ZGUoYyxlLGYpOmMuYWRkKGUsZil9cmV0dXJuIGN9az1RZC5wcm90b3R5cGU7XG5rLmFkZD1mdW5jdGlvbihhLGIpe2JlKHRoaXMpO3RoaXMuYz1udWxsO2E9ZWUodGhpcyxhKTt2YXIgYz10aGlzLmEuZ2V0KGEpO2N8fHRoaXMuYS5zZXQoYSxjPVtdKTtjLnB1c2goYik7dGhpcy5iKz0xO3JldHVybiB0aGlzfTtmdW5jdGlvbiBmZShhLGIpe2JlKGEpO2I9ZWUoYSxiKTtIZChhLmEuYixiKSYmKGEuYz1udWxsLGEuYi09YS5hLmdldChiKS5sZW5ndGgsYT1hLmEsSGQoYS5iLGIpJiYoZGVsZXRlIGEuYltiXSxhLmMtLSxhLmEubGVuZ3RoPjIqYS5jJiZHZChhKSkpfWsuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLmE9dGhpcy5jPW51bGw7dGhpcy5iPTB9O2Z1bmN0aW9uIGdlKGEsYil7YmUoYSk7Yj1lZShhLGIpO3JldHVybiBIZChhLmEuYixiKX1rLmZvckVhY2g9ZnVuY3Rpb24oYSxiKXtiZSh0aGlzKTt0aGlzLmEuZm9yRWFjaChmdW5jdGlvbihjLGQpe3coYyxmdW5jdGlvbihlKXthLmNhbGwoYixlLGQsdGhpcyl9LHRoaXMpfSx0aGlzKX07XG5rLlg9ZnVuY3Rpb24oKXtiZSh0aGlzKTtmb3IodmFyIGE9dGhpcy5hLlYoKSxiPXRoaXMuYS5YKCksYz1bXSxkPTA7ZDxiLmxlbmd0aDtkKyspZm9yKHZhciBlPWFbZF0sZj0wO2Y8ZS5sZW5ndGg7ZisrKWMucHVzaChiW2RdKTtyZXR1cm4gY307ay5WPWZ1bmN0aW9uKGEpe2JlKHRoaXMpO3ZhciBiPVtdO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnZSh0aGlzLGEpJiYoYj1XYShiLHRoaXMuYS5nZXQoZWUodGhpcyxhKSkpKTtlbHNle2E9dGhpcy5hLlYoKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyliPVdhKGIsYVtjXSl9cmV0dXJuIGJ9O2suc2V0PWZ1bmN0aW9uKGEsYil7YmUodGhpcyk7dGhpcy5jPW51bGw7YT1lZSh0aGlzLGEpO2dlKHRoaXMsYSkmJih0aGlzLmItPXRoaXMuYS5nZXQoYSkubGVuZ3RoKTt0aGlzLmEuc2V0KGEsW2JdKTt0aGlzLmIrPTE7cmV0dXJuIHRoaXN9O1xuay5nZXQ9ZnVuY3Rpb24oYSxiKXtpZighYSlyZXR1cm4gYjthPXRoaXMuVihhKTtyZXR1cm4gMDxhLmxlbmd0aD9TdHJpbmcoYVswXSk6Yn07ZnVuY3Rpb24gZGUoYSxiLGMpe2ZlKGEsYik7MDxjLmxlbmd0aCYmKGEuYz1udWxsLGEuYS5zZXQoZWUoYSxiKSxYYShjKSksYS5iKz1jLmxlbmd0aCl9ay50b1N0cmluZz1mdW5jdGlvbigpe2lmKHRoaXMuYylyZXR1cm4gdGhpcy5jO2lmKCF0aGlzLmEpcmV0dXJuXCJcIjtmb3IodmFyIGE9W10sYj10aGlzLmEuWCgpLGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YltjXSxlPWVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZCkpO2Q9dGhpcy5WKGQpO2Zvcih2YXIgZj0wO2Y8ZC5sZW5ndGg7ZisrKXt2YXIgZz1lO1wiXCIhPT1kW2ZdJiYoZys9XCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhkW2ZdKSkpO2EucHVzaChnKX19cmV0dXJuIHRoaXMuYz1hLmpvaW4oXCImXCIpfTtcbmZ1bmN0aW9uIE9kKGEpe3ZhciBiPW5ldyBRZDtiLmM9YS5jO2EuYSYmKGIuYT1uZXcgRmQoYS5hKSxiLmI9YS5iKTtyZXR1cm4gYn1mdW5jdGlvbiBlZShhLGIpe2I9U3RyaW5nKGIpO2EuZiYmKGI9Yi50b0xvd2VyQ2FzZSgpKTtyZXR1cm4gYn1mdW5jdGlvbiBXZChhLGIpe2ImJiFhLmYmJihiZShhKSxhLmM9bnVsbCxhLmEuZm9yRWFjaChmdW5jdGlvbihjLGQpe3ZhciBlPWQudG9Mb3dlckNhc2UoKTtkIT1lJiYoZmUodGhpcyxkKSxkZSh0aGlzLGUsYykpfSxhKSk7YS5mPWJ9O2Z1bmN0aW9uIGhlKGEpe3ZhciBiPVtdO2llKG5ldyBqZSxhLGIpO3JldHVybiBiLmpvaW4oXCJcIil9ZnVuY3Rpb24gamUoKXt9XG5mdW5jdGlvbiBpZShhLGIsYyl7aWYobnVsbD09YiljLnB1c2goXCJudWxsXCIpO2Vsc2V7aWYoXCJvYmplY3RcIj09dHlwZW9mIGIpe2lmKEFycmF5LmlzQXJyYXkoYikpe3ZhciBkPWI7Yj1kLmxlbmd0aDtjLnB1c2goXCJbXCIpO2Zvcih2YXIgZT1cIlwiLGY9MDtmPGI7ZisrKWMucHVzaChlKSxpZShhLGRbZl0sYyksZT1cIixcIjtjLnB1c2goXCJdXCIpO3JldHVybn1pZihiIGluc3RhbmNlb2YgU3RyaW5nfHxiIGluc3RhbmNlb2YgTnVtYmVyfHxiIGluc3RhbmNlb2YgQm9vbGVhbiliPWIudmFsdWVPZigpO2Vsc2V7Yy5wdXNoKFwie1wiKTtlPVwiXCI7Zm9yKGQgaW4gYilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYixkKSYmKGY9YltkXSxcImZ1bmN0aW9uXCIhPXR5cGVvZiBmJiYoYy5wdXNoKGUpLGtlKGQsYyksYy5wdXNoKFwiOlwiKSxpZShhLGYsYyksZT1cIixcIikpO2MucHVzaChcIn1cIik7cmV0dXJufX1zd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJzdHJpbmdcIjprZShiLGMpO2JyZWFrO2Nhc2UgXCJudW1iZXJcIjpjLnB1c2goaXNGaW5pdGUoYikmJlxuIWlzTmFOKGIpP1N0cmluZyhiKTpcIm51bGxcIik7YnJlYWs7Y2FzZSBcImJvb2xlYW5cIjpjLnB1c2goU3RyaW5nKGIpKTticmVhaztjYXNlIFwiZnVuY3Rpb25cIjpjLnB1c2goXCJudWxsXCIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJVbmtub3duIHR5cGU6IFwiK3R5cGVvZiBiKTt9fX12YXIgbGU9eydcIic6J1xcXFxcIicsXCJcXFxcXCI6XCJcXFxcXFxcXFwiLFwiL1wiOlwiXFxcXC9cIixcIlxcYlwiOlwiXFxcXGJcIixcIlxcZlwiOlwiXFxcXGZcIixcIlxcblwiOlwiXFxcXG5cIixcIlxcclwiOlwiXFxcXHJcIixcIlxcdFwiOlwiXFxcXHRcIixcIlxceDBCXCI6XCJcXFxcdTAwMGJcIn0sbWU9L1xcdWZmZmYvLnRlc3QoXCJcXHVmZmZmXCIpPy9bXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHVmZmZmXS9nOi9bXFxcXFwiXFx4MDAtXFx4MWZcXHg3Zi1cXHhmZl0vZztcbmZ1bmN0aW9uIGtlKGEsYil7Yi5wdXNoKCdcIicsYS5yZXBsYWNlKG1lLGZ1bmN0aW9uKGMpe3ZhciBkPWxlW2NdO2R8fChkPVwiXFxcXHVcIisoYy5jaGFyQ29kZUF0KDApfDY1NTM2KS50b1N0cmluZygxNikuc3Vic3RyKDEpLGxlW2NdPWQpO3JldHVybiBkfSksJ1wiJyl9O2Z1bmN0aW9uIG5lKCl7dmFyIGE9SSgpO3JldHVybiBUYiYmISFkYyYmMTE9PWRjfHwvRWRnZVxcL1xcZCsvLnRlc3QoYSl9ZnVuY3Rpb24gb2UoKXtyZXR1cm4gbC53aW5kb3cmJmwud2luZG93LmxvY2F0aW9uLmhyZWZ8fHNlbGYmJnNlbGYubG9jYXRpb24mJnNlbGYubG9jYXRpb24uaHJlZnx8XCJcIn1mdW5jdGlvbiBwZShhLGIpe2I9Ynx8bC53aW5kb3c7dmFyIGM9XCJhYm91dDpibGFua1wiO2EmJihjPURiKEZiKGEpKSk7Yi5sb2NhdGlvbi5ocmVmPWN9ZnVuY3Rpb24gcWUoYSxiKXt2YXIgYz1bXSxkO2ZvcihkIGluIGEpZCBpbiBiP3R5cGVvZiBhW2RdIT10eXBlb2YgYltkXT9jLnB1c2goZCk6XCJvYmplY3RcIj09dHlwZW9mIGFbZF0mJm51bGwhPWFbZF0mJm51bGwhPWJbZF0/MDxxZShhW2RdLGJbZF0pLmxlbmd0aCYmYy5wdXNoKGQpOmFbZF0hPT1iW2RdJiZjLnB1c2goZCk6Yy5wdXNoKGQpO2ZvcihkIGluIGIpZCBpbiBhfHxjLnB1c2goZCk7cmV0dXJuIGN9XG5mdW5jdGlvbiByZSgpe3ZhciBhPUkoKTthPXNlKGEpIT10ZT9udWxsOihhPWEubWF0Y2goL1xcc0Nocm9tZVxcLyhcXGQrKS9pKSkmJjI9PWEubGVuZ3RoP3BhcnNlSW50KGFbMV0sMTApOm51bGw7cmV0dXJuIGEmJjMwPmE/ITE6IVRifHwhZGN8fDk8ZGN9ZnVuY3Rpb24gdWUoYSl7YT0oYXx8SSgpKS50b0xvd2VyQ2FzZSgpO3JldHVybiBhLm1hdGNoKC9hbmRyb2lkLyl8fGEubWF0Y2goL3dlYm9zLyl8fGEubWF0Y2goL2lwaG9uZXxpcGFkfGlwb2QvKXx8YS5tYXRjaCgvYmxhY2tiZXJyeS8pfHxhLm1hdGNoKC93aW5kb3dzIHBob25lLyl8fGEubWF0Y2goL2llbW9iaWxlLyk/ITA6ITF9ZnVuY3Rpb24gdmUoYSl7YT1hfHxsLndpbmRvdzt0cnl7YS5jbG9zZSgpfWNhdGNoKGIpe319XG5mdW5jdGlvbiB3ZShhLGIsYyl7dmFyIGQ9TWF0aC5mbG9vcigxRTkqTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoKTtiPWJ8fDUwMDtjPWN8fDYwMDt2YXIgZT0od2luZG93LnNjcmVlbi5hdmFpbEhlaWdodC1jKS8yLGY9KHdpbmRvdy5zY3JlZW4uYXZhaWxXaWR0aC1iKS8yO2I9e3dpZHRoOmIsaGVpZ2h0OmMsdG9wOjA8ZT9lOjAsbGVmdDowPGY/ZjowLGxvY2F0aW9uOiEwLHJlc2l6YWJsZTohMCxzdGF0dXNiYXI6ITAsdG9vbGJhcjohMX07Yz1JKCkudG9Mb3dlckNhc2UoKTtkJiYoYi50YXJnZXQ9ZCx4KGMsXCJjcmlvcy9cIikmJihiLnRhcmdldD1cIl9ibGFua1wiKSk7c2UoSSgpKT09eGUmJihhPWF8fFwiaHR0cDovL2xvY2FsaG9zdFwiLGIuc2Nyb2xsYmFycz0hMCk7Yz1hfHxcIlwiOyhhPWIpfHwoYT17fSk7ZD13aW5kb3c7Yj1jIGluc3RhbmNlb2YgQWI/YzpGYihcInVuZGVmaW5lZFwiIT10eXBlb2YgYy5ocmVmP2MuaHJlZjpTdHJpbmcoYykpO2M9YS50YXJnZXR8fGMudGFyZ2V0O2U9W107XG5mb3IoZyBpbiBhKXN3aXRjaChnKXtjYXNlIFwid2lkdGhcIjpjYXNlIFwiaGVpZ2h0XCI6Y2FzZSBcInRvcFwiOmNhc2UgXCJsZWZ0XCI6ZS5wdXNoKGcrXCI9XCIrYVtnXSk7YnJlYWs7Y2FzZSBcInRhcmdldFwiOmNhc2UgXCJub29wZW5lclwiOmNhc2UgXCJub3JlZmVycmVyXCI6YnJlYWs7ZGVmYXVsdDplLnB1c2goZytcIj1cIisoYVtnXT8xOjApKX12YXIgZz1lLmpvaW4oXCIsXCIpO2lmKCh5KFwiaVBob25lXCIpJiYheShcImlQb2RcIikmJiF5KFwiaVBhZFwiKXx8eShcImlQYWRcIil8fHkoXCJpUG9kXCIpKSYmZC5uYXZpZ2F0b3ImJmQubmF2aWdhdG9yLnN0YW5kYWxvbmUmJmMmJlwiX3NlbGZcIiE9YylnPWpjKGRvY3VtZW50LFwiQVwiKSxuYihnLFwiSFRNTEFuY2hvckVsZW1lbnRcIiksYiBpbnN0YW5jZW9mIEFifHxiIGluc3RhbmNlb2YgQWJ8fChiPVwib2JqZWN0XCI9PXR5cGVvZiBiJiZiLnJhP2IucWEoKTpTdHJpbmcoYiksRWIudGVzdChiKXx8KGI9XCJhYm91dDppbnZhbGlkI3pDbG9zdXJlelwiKSxiPW5ldyBBYihCYixiKSksZy5ocmVmPVxuRGIoYiksZy5zZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIixjKSxhLm5vcmVmZXJyZXImJmcuc2V0QXR0cmlidXRlKFwicmVsXCIsXCJub3JlZmVycmVyXCIpLGE9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50XCIpLGEuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCEwLCEwLGQsMSksZy5kaXNwYXRjaEV2ZW50KGEpLGc9e307ZWxzZSBpZihhLm5vcmVmZXJyZXIpe2lmKGc9ZC5vcGVuKFwiXCIsYyxnKSxhPURiKGIpLGcmJihWYiYmeChhLFwiO1wiKSYmKGE9XCInXCIrYS5yZXBsYWNlKC8nL2csXCIlMjdcIikrXCInXCIpLGcub3BlbmVyPW51bGwsYT1KYignPG1ldGEgbmFtZT1cInJlZmVycmVyXCIgY29udGVudD1cIm5vLXJlZmVycmVyXCI+PG1ldGEgaHR0cC1lcXVpdj1cInJlZnJlc2hcIiBjb250ZW50PVwiMDsgdXJsPScrT2IoYSkrJ1wiPicpLGQ9Zy5kb2N1bWVudCkpZC53cml0ZShJYihhKSksZC5jbG9zZSgpfWVsc2UoZz1kLm9wZW4oRGIoYiksYyxnKSkmJmEubm9vcGVuZXImJihnLm9wZW5lcj1udWxsKTtpZihnKXRyeXtnLmZvY3VzKCl9Y2F0Y2goaCl7fXJldHVybiBnfVxuZnVuY3Rpb24geWUoYSl7cmV0dXJuIG5ldyBCKGZ1bmN0aW9uKGIpe2Z1bmN0aW9uIGMoKXtCZCgyRTMpLnRoZW4oZnVuY3Rpb24oKXtpZighYXx8YS5jbG9zZWQpYigpO2Vsc2UgcmV0dXJuIGMoKX0pfXJldHVybiBjKCl9KX12YXIgemU9L15cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM31cXC5cXGR7MSwzfSQvLEFlPS9eW15AXStAW15AXSskLztmdW5jdGlvbiBCZSgpe3ZhciBhPW51bGw7cmV0dXJuKG5ldyBCKGZ1bmN0aW9uKGIpe1wiY29tcGxldGVcIj09bC5kb2N1bWVudC5yZWFkeVN0YXRlP2IoKTooYT1mdW5jdGlvbigpe2IoKX0sa2Qod2luZG93LFwibG9hZFwiLGEpKX0pKS5vKGZ1bmN0aW9uKGIpe3RkKHdpbmRvdyxcImxvYWRcIixhKTt0aHJvdyBiO30pfVxuZnVuY3Rpb24gQ2UoKXtyZXR1cm4gRGUodm9pZCAwKT9CZSgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEIoZnVuY3Rpb24oYSxiKXt2YXIgYz1sLmRvY3VtZW50LGQ9c2V0VGltZW91dChmdW5jdGlvbigpe2IoRXJyb3IoXCJDb3Jkb3ZhIGZyYW1ld29yayBpcyBub3QgcmVhZHkuXCIpKX0sMUUzKTtjLmFkZEV2ZW50TGlzdGVuZXIoXCJkZXZpY2VyZWFkeVwiLGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGQpO2EoKX0sITEpfSl9KTpFKEVycm9yKFwiQ29yZG92YSBtdXN0IHJ1biBpbiBhbiBBbmRyb2lkIG9yIGlPUyBmaWxlIHNjaGVtZS5cIikpfWZ1bmN0aW9uIERlKGEpe2E9YXx8SSgpO3JldHVybiEoXCJmaWxlOlwiIT09RWUoKSYmXCJpb25pYzpcIiE9PUVlKCl8fCFhLnRvTG93ZXJDYXNlKCkubWF0Y2goL2lwaG9uZXxpcGFkfGlwb2R8YW5kcm9pZC8pKX1mdW5jdGlvbiBGZSgpe3ZhciBhPWwud2luZG93O3RyeXtyZXR1cm4hKCFhfHxhPT1hLnRvcCl9Y2F0Y2goYil7cmV0dXJuITF9fVxuZnVuY3Rpb24gR2UoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIGwuV29ya2VyR2xvYmFsU2NvcGUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsLmltcG9ydFNjcmlwdHN9ZnVuY3Rpb24gSGUoKXtyZXR1cm4gZmlyZWJhc2UuSU5URVJOQUwuaGFzT3duUHJvcGVydHkoXCJyZWFjdE5hdGl2ZVwiKT9cIlJlYWN0TmF0aXZlXCI6ZmlyZWJhc2UuSU5URVJOQUwuaGFzT3duUHJvcGVydHkoXCJub2RlXCIpP1wiTm9kZVwiOkdlKCk/XCJXb3JrZXJcIjpcIkJyb3dzZXJcIn1mdW5jdGlvbiBJZSgpe3ZhciBhPUhlKCk7cmV0dXJuXCJSZWFjdE5hdGl2ZVwiPT09YXx8XCJOb2RlXCI9PT1hfWZ1bmN0aW9uIEplKCl7Zm9yKHZhciBhPTUwLGI9W107MDxhOyliLnB1c2goXCIxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiLmNoYXJBdChNYXRoLmZsb29yKDYyKk1hdGgucmFuZG9tKCkpKSksYS0tO3JldHVybiBiLmpvaW4oXCJcIil9XG52YXIgeGU9XCJGaXJlZm94XCIsdGU9XCJDaHJvbWVcIjtcbmZ1bmN0aW9uIHNlKGEpe3ZhciBiPWEudG9Mb3dlckNhc2UoKTtpZih4KGIsXCJvcGVyYS9cIil8fHgoYixcIm9wci9cIil8fHgoYixcIm9waW9zL1wiKSlyZXR1cm5cIk9wZXJhXCI7aWYoeChiLFwiaWVtb2JpbGVcIikpcmV0dXJuXCJJRU1vYmlsZVwiO2lmKHgoYixcIm1zaWVcIil8fHgoYixcInRyaWRlbnQvXCIpKXJldHVyblwiSUVcIjtpZih4KGIsXCJlZGdlL1wiKSlyZXR1cm5cIkVkZ2VcIjtpZih4KGIsXCJmaXJlZm94L1wiKSlyZXR1cm4geGU7aWYoeChiLFwic2lsay9cIikpcmV0dXJuXCJTaWxrXCI7aWYoeChiLFwiYmxhY2tiZXJyeVwiKSlyZXR1cm5cIkJsYWNrYmVycnlcIjtpZih4KGIsXCJ3ZWJvc1wiKSlyZXR1cm5cIldlYm9zXCI7aWYoIXgoYixcInNhZmFyaS9cIil8fHgoYixcImNocm9tZS9cIil8fHgoYixcImNyaW9zL1wiKXx8eChiLFwiYW5kcm9pZFwiKSlpZigheChiLFwiY2hyb21lL1wiKSYmIXgoYixcImNyaW9zL1wiKXx8eChiLFwiZWRnZS9cIikpe2lmKHgoYixcImFuZHJvaWRcIikpcmV0dXJuXCJBbmRyb2lkXCI7aWYoKGE9YS5tYXRjaCgvKFthLXpBLVpcXGRcXC5dKylcXC9bYS16QS1aXFxkXFwuXSokLykpJiZcbjI9PWEubGVuZ3RoKXJldHVybiBhWzFdfWVsc2UgcmV0dXJuIHRlO2Vsc2UgcmV0dXJuXCJTYWZhcmlcIjtyZXR1cm5cIk90aGVyXCJ9dmFyIEtlPXtqZDpcIkZpcmViYXNlQ29yZS13ZWJcIixsZDpcIkZpcmViYXNlVUktd2ViXCJ9O2Z1bmN0aW9uIExlKGEsYil7Yj1ifHxbXTt2YXIgYz1bXSxkPXt9LGU7Zm9yKGUgaW4gS2UpZFtLZVtlXV09ITA7Zm9yKGU9MDtlPGIubGVuZ3RoO2UrKylcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRbYltlXV0mJihkZWxldGUgZFtiW2VdXSxjLnB1c2goYltlXSkpO2Muc29ydCgpO2I9YztiLmxlbmd0aHx8KGI9W1wiRmlyZWJhc2VDb3JlLXdlYlwiXSk7Yz1IZSgpO1wiQnJvd3NlclwiPT09Yz8oZD1JKCksYz1zZShkKSk6XCJXb3JrZXJcIj09PWMmJihkPUkoKSxjPXNlKGQpK1wiLVwiK2MpO3JldHVybiBjK1wiL0pzQ29yZS9cIithK1wiL1wiK2Iuam9pbihcIixcIil9ZnVuY3Rpb24gSSgpe3JldHVybiBsLm5hdmlnYXRvciYmbC5uYXZpZ2F0b3IudXNlckFnZW50fHxcIlwifVxuZnVuY3Rpb24gSihhLGIpe2E9YS5zcGxpdChcIi5cIik7Yj1ifHxsO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGgmJlwib2JqZWN0XCI9PXR5cGVvZiBiJiZudWxsIT1iO2MrKyliPWJbYVtjXV07YyE9YS5sZW5ndGgmJihiPXZvaWQgMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gTWUoKXt0cnl7dmFyIGE9bC5sb2NhbFN0b3JhZ2UsYj1OZSgpO2lmKGEpcmV0dXJuIGEuc2V0SXRlbShiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oYiksbmUoKT8hIWwuaW5kZXhlZERCOiEwfWNhdGNoKGMpe3JldHVybiBHZSgpJiYhIWwuaW5kZXhlZERCfXJldHVybiExfWZ1bmN0aW9uIE9lKCl7cmV0dXJuKFBlKCl8fFwiY2hyb21lLWV4dGVuc2lvbjpcIj09PUVlKCl8fERlKCkpJiYhSWUoKSYmTWUoKSYmIUdlKCl9ZnVuY3Rpb24gUGUoKXtyZXR1cm5cImh0dHA6XCI9PT1FZSgpfHxcImh0dHBzOlwiPT09RWUoKX1mdW5jdGlvbiBFZSgpe3JldHVybiBsLmxvY2F0aW9uJiZsLmxvY2F0aW9uLnByb3RvY29sfHxudWxsfVxuZnVuY3Rpb24gUWUoYSl7YT1hfHxJKCk7cmV0dXJuIHVlKGEpfHxzZShhKT09eGU/ITE6ITB9ZnVuY3Rpb24gUmUoYSl7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP251bGw6aGUoYSl9ZnVuY3Rpb24gU2UoYSl7dmFyIGI9e30sYztmb3IoYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPT1hW2NdJiZ2b2lkIDAhPT1hW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1mdW5jdGlvbiBUZShhKXtpZihudWxsIT09YSlyZXR1cm4gSlNPTi5wYXJzZShhKX1mdW5jdGlvbiBOZShhKXtyZXR1cm4gYT9hOk1hdGguZmxvb3IoMUU5Kk1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKCl9ZnVuY3Rpb24gVWUoYSl7YT1hfHxJKCk7cmV0dXJuXCJTYWZhcmlcIj09c2UoYSl8fGEudG9Mb3dlckNhc2UoKS5tYXRjaCgvaXBob25lfGlwYWR8aXBvZC8pPyExOiEwfVxuZnVuY3Rpb24gVmUoKXt2YXIgYT1sLl9fX2pzbDtpZihhJiZhLkgpZm9yKHZhciBiIGluIGEuSClpZihhLkhbYl0ucj1hLkhbYl0ucnx8W10sYS5IW2JdLkw9YS5IW2JdLkx8fFtdLGEuSFtiXS5yPWEuSFtiXS5MLmNvbmNhdCgpLGEuQ1ApZm9yKHZhciBjPTA7YzxhLkNQLmxlbmd0aDtjKyspYS5DUFtjXT1udWxsfWZ1bmN0aW9uIFdlKGEsYil7aWYoYT5iKXRocm93IEVycm9yKFwiU2hvcnQgZGVsYXkgc2hvdWxkIGJlIGxlc3MgdGhhbiBsb25nIGRlbGF5IVwiKTt0aGlzLmE9YTt0aGlzLmM9YjthPUkoKTtiPUhlKCk7dGhpcy5iPXVlKGEpfHxcIlJlYWN0TmF0aXZlXCI9PT1ifVxuV2UucHJvdG90eXBlLmdldD1mdW5jdGlvbigpe3ZhciBhPWwubmF2aWdhdG9yO3JldHVybihhJiZcImJvb2xlYW5cIj09PXR5cGVvZiBhLm9uTGluZSYmKFBlKCl8fFwiY2hyb21lLWV4dGVuc2lvbjpcIj09PUVlKCl8fFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYS5jb25uZWN0aW9uKT9hLm9uTGluZToxKT90aGlzLmI/dGhpcy5jOnRoaXMuYTpNYXRoLm1pbig1RTMsdGhpcy5hKX07ZnVuY3Rpb24gWGUoKXt2YXIgYT1sLmRvY3VtZW50O3JldHVybiBhJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEudmlzaWJpbGl0eVN0YXRlP1widmlzaWJsZVwiPT1hLnZpc2liaWxpdHlTdGF0ZTohMH1cbmZ1bmN0aW9uIFllKCl7dmFyIGE9bC5kb2N1bWVudCxiPW51bGw7cmV0dXJuIFhlKCl8fCFhP0QoKToobmV3IEIoZnVuY3Rpb24oYyl7Yj1mdW5jdGlvbigpe1hlKCkmJihhLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsYiwhMSksYygpKX07YS5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGIsITEpfSkpLm8oZnVuY3Rpb24oYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLGIsITEpO3Rocm93IGM7fSl9ZnVuY3Rpb24gWmUoYSl7dHJ5e3ZhciBiPW5ldyBEYXRlKHBhcnNlSW50KGEsMTApKTtpZighaXNOYU4oYi5nZXRUaW1lKCkpJiYhL1teMC05XS8udGVzdChhKSlyZXR1cm4gYi50b1VUQ1N0cmluZygpfWNhdGNoKGMpe31yZXR1cm4gbnVsbH1mdW5jdGlvbiAkZSgpe3JldHVybiEoIUooXCJmaXJlYXV0aC5vYXV0aGhlbHBlclwiLGwpJiYhSihcImZpcmVhdXRoLmlmcmFtZVwiLGwpKX1cbmZ1bmN0aW9uIGFmKCl7dmFyIGE9bC5uYXZpZ2F0b3I7cmV0dXJuIGEmJmEuc2VydmljZVdvcmtlciYmYS5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXJ8fG51bGx9ZnVuY3Rpb24gYmYoKXt2YXIgYT1sLm5hdmlnYXRvcjtyZXR1cm4gYSYmYS5zZXJ2aWNlV29ya2VyP0QoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuc2VydmljZVdvcmtlci5yZWFkeX0pLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGIuYWN0aXZlfHxudWxsfSkubyhmdW5jdGlvbigpe3JldHVybiBudWxsfSk6RChudWxsKX07dmFyIGNmPXt9O2Z1bmN0aW9uIGRmKGEpe2NmW2FdfHwoY2ZbYV09ITAsXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oYSkpfTt2YXIgZWY7dHJ5e3ZhciBmZj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZmYsXCJhYmNkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOjF9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZmYsXCJhYmNkXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOjJ9KTtlZj0yPT1mZi5hYmNkfWNhdGNoKGEpe2VmPSExfWZ1bmN0aW9uIEsoYSxiLGMpe2VmP09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOmN9KTphW2JdPWN9ZnVuY3Rpb24gTChhLGIpe2lmKGIpZm9yKHZhciBjIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShjKSYmSyhhLGMsYltjXSl9ZnVuY3Rpb24gZ2YoYSl7dmFyIGI9e307TChiLGEpO3JldHVybiBifWZ1bmN0aW9uIGhmKGEpe3ZhciBiPXt9LGM7Zm9yKGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGpmKGEsYil7aWYoIWJ8fCFiLmxlbmd0aClyZXR1cm4hMDtpZighYSlyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoO2MrKyl7dmFyIGQ9YVtiW2NdXTtpZih2b2lkIDA9PT1kfHxudWxsPT09ZHx8XCJcIj09PWQpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24ga2YoYSl7dmFyIGI9YTtpZihcIm9iamVjdFwiPT10eXBlb2YgYSYmbnVsbCE9YSl7Yj1cImxlbmd0aFwiaW4gYT9bXTp7fTtmb3IodmFyIGMgaW4gYSlLKGIsYyxrZihhW2NdKSl9cmV0dXJuIGJ9Oy8qXG5cbiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZnVuY3Rpb24gbGYoYSl7dmFyIGI9YSYmKGFbbWZdP1wicGhvbmVcIjpudWxsKTtpZihiJiZhJiZhW25mXSl7Syh0aGlzLFwidWlkXCIsYVtuZl0pO0sodGhpcyxcImRpc3BsYXlOYW1lXCIsYVtvZl18fG51bGwpO3ZhciBjPW51bGw7YVtwZl0mJihjPShuZXcgRGF0ZShhW3BmXSkpLnRvVVRDU3RyaW5nKCkpO0sodGhpcyxcImVucm9sbG1lbnRUaW1lXCIsYyk7Syh0aGlzLFwiZmFjdG9ySWRcIixiKX1lbHNlIHRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcIkludGVybmFsIGFzc2VydDogaW52YWxpZCBNdWx0aUZhY3RvckluZm8gb2JqZWN0XCIpO31sZi5wcm90b3R5cGUudj1mdW5jdGlvbigpe3JldHVybnt1aWQ6dGhpcy51aWQsZGlzcGxheU5hbWU6dGhpcy5kaXNwbGF5TmFtZSxmYWN0b3JJZDp0aGlzLmZhY3RvcklkLGVucm9sbG1lbnRUaW1lOnRoaXMuZW5yb2xsbWVudFRpbWV9fTtmdW5jdGlvbiBxZihhKXt0cnl7dmFyIGI9bmV3IHJmKGEpfWNhdGNoKGMpe2I9bnVsbH1yZXR1cm4gYn1cbnZhciBvZj1cImRpc3BsYXlOYW1lXCIscGY9XCJlbnJvbGxlZEF0XCIsbmY9XCJtZmFFbnJvbGxtZW50SWRcIixtZj1cInBob25lSW5mb1wiO2Z1bmN0aW9uIHJmKGEpe2xmLmNhbGwodGhpcyxhKTtLKHRoaXMsXCJwaG9uZU51bWJlclwiLGFbbWZdKX1yKHJmLGxmKTtyZi5wcm90b3R5cGUudj1mdW5jdGlvbigpe3ZhciBhPXJmLlphLnYuY2FsbCh0aGlzKTthLnBob25lTnVtYmVyPXRoaXMucGhvbmVOdW1iZXI7cmV0dXJuIGF9O2Z1bmN0aW9uIHNmKGEpe3ZhciBiPXt9LGM9YVt0Zl0sZD1hW3VmXSxlPWFbdmZdO2E9cWYoYVt3Zl0pO2lmKCFlfHxlIT14ZiYmZSE9eWYmJiFjfHxlPT15ZiYmIWR8fGU9PXpmJiYhYSl0aHJvdyBFcnJvcihcIkludmFsaWQgY2hlY2tBY3Rpb25Db2RlIHJlc3BvbnNlIVwiKTtlPT15Zj8oYltBZl09Y3x8bnVsbCxiW0JmXT1jfHxudWxsLGJbQ2ZdPWQpOihiW0FmXT1kfHxudWxsLGJbQmZdPWR8fG51bGwsYltDZl09Y3x8bnVsbCk7YltEZl09YXx8bnVsbDtLKHRoaXMsRWYsZSk7Syh0aGlzLEZmLGtmKGIpKX1cbnZhciB6Zj1cIlJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OXCIseGY9XCJFTUFJTF9TSUdOSU5cIix5Zj1cIlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMXCIsdGY9XCJlbWFpbFwiLHdmPVwibWZhSW5mb1wiLHVmPVwibmV3RW1haWxcIix2Zj1cInJlcXVlc3RUeXBlXCIsQ2Y9XCJlbWFpbFwiLEFmPVwiZnJvbUVtYWlsXCIsRGY9XCJtdWx0aUZhY3RvckluZm9cIixCZj1cInByZXZpb3VzRW1haWxcIixGZj1cImRhdGFcIixFZj1cIm9wZXJhdGlvblwiO2Z1bmN0aW9uIEdmKGEpe2E9WmQoYSk7dmFyIGI9WWQoYSxIZil8fG51bGwsYz1ZZChhLElmKXx8bnVsbCxkPVlkKGEsSmYpfHxudWxsO2Q9ZD9LZltkXXx8bnVsbDpudWxsO2lmKCFifHwhY3x8IWQpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLEhmK1wiLCBcIitJZitcImFuZCBcIitKZitcIiBhcmUgcmVxdWlyZWQgaW4gYSB2YWxpZCBhY3Rpb24gY29kZSBVUkwuXCIpO0wodGhpcyx7YXBpS2V5OmIsb3BlcmF0aW9uOmQsY29kZTpjLGNvbnRpbnVlVXJsOllkKGEsTGYpfHxudWxsLGxhbmd1YWdlQ29kZTpZZChhLE1mKXx8bnVsbCx0ZW5hbnRJZDpZZChhLE5mKXx8bnVsbH0pfVxudmFyIEhmPVwiYXBpS2V5XCIsSWY9XCJvb2JDb2RlXCIsTGY9XCJjb250aW51ZVVybFwiLE1mPVwibGFuZ3VhZ2VDb2RlXCIsSmY9XCJtb2RlXCIsTmY9XCJ0ZW5hbnRJZFwiLEtmPXtyZWNvdmVyRW1haWw6XCJSRUNPVkVSX0VNQUlMXCIscmVzZXRQYXNzd29yZDpcIlBBU1NXT1JEX1JFU0VUXCIscmV2ZXJ0U2Vjb25kRmFjdG9yQWRkaXRpb246emYsc2lnbkluOnhmLHZlcmlmeUFuZENoYW5nZUVtYWlsOnlmLHZlcmlmeUVtYWlsOlwiVkVSSUZZX0VNQUlMXCJ9O2Z1bmN0aW9uIE9mKGEpe3RyeXtyZXR1cm4gbmV3IEdmKGEpfWNhdGNoKGIpe3JldHVybiBudWxsfX07ZnVuY3Rpb24gUGYoYSl7dmFyIGI9YVtRZl07aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBiKXRocm93IG5ldyB0KFwibWlzc2luZy1jb250aW51ZS11cmlcIik7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBifHxcInN0cmluZ1wiPT09dHlwZW9mIGImJiFiLmxlbmd0aCl0aHJvdyBuZXcgdChcImludmFsaWQtY29udGludWUtdXJpXCIpO3RoaXMuaD1iO3RoaXMuYj10aGlzLmE9bnVsbDt0aGlzLmc9ITE7dmFyIGM9YVtSZl07aWYoYyYmXCJvYmplY3RcIj09PXR5cGVvZiBjKXtiPWNbU2ZdO3ZhciBkPWNbVGZdO2M9Y1tVZl07aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZiLmxlbmd0aCl7dGhpcy5hPWI7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkJiZcImJvb2xlYW5cIiE9PXR5cGVvZiBkKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixUZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgYm9vbGVhbiB3aGVuIHNwZWNpZmllZC5cIik7dGhpcy5nPSEhZDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJihcInN0cmluZ1wiIT09XG50eXBlb2YgY3x8XCJzdHJpbmdcIj09PXR5cGVvZiBjJiYhYy5sZW5ndGgpKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixVZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgbm9uIGVtcHR5IHN0cmluZyB3aGVuIHNwZWNpZmllZC5cIik7dGhpcy5iPWN8fG51bGx9ZWxzZXtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGIpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFNmK1wiIHByb3BlcnR5IG11c3QgYmUgYSBub24gZW1wdHkgc3RyaW5nIHdoZW4gc3BlY2lmaWVkLlwiKTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGR8fFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyl0aHJvdyBuZXcgdChcIm1pc3NpbmctYW5kcm9pZC1wa2ctbmFtZVwiKTt9fWVsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixSZitcIiBwcm9wZXJ0eSBtdXN0IGJlIGEgbm9uIG51bGwgb2JqZWN0IHdoZW4gc3BlY2lmaWVkLlwiKTt0aGlzLmY9bnVsbDtpZigoYj1hW1ZmXSkmJlwib2JqZWN0XCI9PT1cbnR5cGVvZiBiKWlmKGI9YltXZl0sXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZiLmxlbmd0aCl0aGlzLmY9YjtlbHNle2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYil0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsV2YrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcgd2hlbiBzcGVjaWZpZWQuXCIpO31lbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgYil0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsVmYrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBudWxsIG9iamVjdCB3aGVuIHNwZWNpZmllZC5cIik7Yj1hW1hmXTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGImJlwiYm9vbGVhblwiIT09dHlwZW9mIGIpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFhmK1wiIHByb3BlcnR5IG11c3QgYmUgYSBib29sZWFuIHdoZW4gc3BlY2lmaWVkLlwiKTt0aGlzLmM9ISFiO2E9YVtZZl07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhJiYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhfHxcInN0cmluZ1wiPT09XG50eXBlb2YgYSYmIWEubGVuZ3RoKSl0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsWWYrXCIgcHJvcGVydHkgbXVzdCBiZSBhIG5vbiBlbXB0eSBzdHJpbmcgd2hlbiBzcGVjaWZpZWQuXCIpO3RoaXMuaT1hfHxudWxsfXZhciBSZj1cImFuZHJvaWRcIixZZj1cImR5bmFtaWNMaW5rRG9tYWluXCIsWGY9XCJoYW5kbGVDb2RlSW5BcHBcIixWZj1cImlPU1wiLFFmPVwidXJsXCIsVGY9XCJpbnN0YWxsQXBwXCIsVWY9XCJtaW5pbXVtVmVyc2lvblwiLFNmPVwicGFja2FnZU5hbWVcIixXZj1cImJ1bmRsZUlkXCI7XG5mdW5jdGlvbiBaZihhKXt2YXIgYj17fTtiLmNvbnRpbnVlVXJsPWEuaDtiLmNhbkhhbmRsZUNvZGVJbkFwcD1hLmM7aWYoYi5hbmRyb2lkUGFja2FnZU5hbWU9YS5hKWIuYW5kcm9pZE1pbmltdW1WZXJzaW9uPWEuYixiLmFuZHJvaWRJbnN0YWxsQXBwPWEuZztiLmlPU0J1bmRsZUlkPWEuZjtiLmR5bmFtaWNMaW5rRG9tYWluPWEuaTtmb3IodmFyIGMgaW4gYiludWxsPT09YltjXSYmZGVsZXRlIGJbY107cmV0dXJuIGJ9O2Z1bmN0aW9uICRmKGEpe3JldHVybiBQYShhLGZ1bmN0aW9uKGIpe2I9Yi50b1N0cmluZygxNik7cmV0dXJuIDE8Yi5sZW5ndGg/YjpcIjBcIitifSkuam9pbihcIlwiKX07dmFyIGFnPW51bGw7ZnVuY3Rpb24gYmcoYSl7dmFyIGI9XCJcIjtjZyhhLGZ1bmN0aW9uKGMpe2IrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyl9KTtyZXR1cm4gYn1mdW5jdGlvbiBjZyhhLGIpe2Z1bmN0aW9uIGMobSl7Zm9yKDtkPGEubGVuZ3RoOyl7dmFyIHA9YS5jaGFyQXQoZCsrKSx2PWFnW3BdO2lmKG51bGwhPXYpcmV0dXJuIHY7aWYoIS9eW1xcc1xceGEwXSokLy50ZXN0KHApKXRocm93IEVycm9yKFwiVW5rbm93biBiYXNlNjQgZW5jb2RpbmcgYXQgY2hhcjogXCIrcCk7fXJldHVybiBtfWRnKCk7Zm9yKHZhciBkPTA7Oyl7dmFyIGU9YygtMSksZj1jKDApLGc9Yyg2NCksaD1jKDY0KTtpZig2ND09PWgmJi0xPT09ZSlicmVhaztiKGU8PDJ8Zj4+NCk7NjQhPWcmJihiKGY8PDQmMjQwfGc+PjIpLDY0IT1oJiZiKGc8PDYmMTkyfGgpKX19XG5mdW5jdGlvbiBkZygpe2lmKCFhZyl7YWc9e307Zm9yKHZhciBhPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIi5zcGxpdChcIlwiKSxiPVtcIisvPVwiLFwiKy9cIixcIi1fPVwiLFwiLV8uXCIsXCItX1wiXSxjPTA7NT5jO2MrKylmb3IodmFyIGQ9YS5jb25jYXQoYltjXS5zcGxpdChcIlwiKSksZT0wO2U8ZC5sZW5ndGg7ZSsrKXt2YXIgZj1kW2VdO3ZvaWQgMD09PWFnW2ZdJiYoYWdbZl09ZSl9fX07ZnVuY3Rpb24gZWcoYSl7dmFyIGI9ZmcoYSk7aWYoIShiJiZiLnN1YiYmYi5pc3MmJmIuYXVkJiZiLmV4cCkpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIEpXVFwiKTt0aGlzLmc9YTt0aGlzLmM9Yi5leHA7dGhpcy5oPWIuc3ViO3VhKCk7dGhpcy5hPWIucHJvdmlkZXJfaWR8fGIuZmlyZWJhc2UmJmIuZmlyZWJhc2Uuc2lnbl9pbl9wcm92aWRlcnx8bnVsbDt0aGlzLmY9Yi5maXJlYmFzZSYmYi5maXJlYmFzZS50ZW5hbnR8fG51bGw7dGhpcy5iPSEhYi5pc19hbm9ueW1vdXN8fFwiYW5vbnltb3VzXCI9PXRoaXMuYX1lZy5wcm90b3R5cGUuUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmZ9O2VnLnByb3RvdHlwZS5pPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYn07ZWcucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ307ZnVuY3Rpb24gZ2coYSl7dHJ5e3JldHVybiBuZXcgZWcoYSl9Y2F0Y2goYil7cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gZmcoYSl7aWYoIWEpcmV0dXJuIG51bGw7YT1hLnNwbGl0KFwiLlwiKTtpZigzIT1hLmxlbmd0aClyZXR1cm4gbnVsbDthPWFbMV07Zm9yKHZhciBiPSg0LWEubGVuZ3RoJTQpJTQsYz0wO2M8YjtjKyspYSs9XCIuXCI7dHJ5e3JldHVybiBKU09OLnBhcnNlKGJnKGEpKX1jYXRjaChkKXt9cmV0dXJuIG51bGx9O3ZhciBoZz1cIm9hdXRoX2NvbnN1bWVyX2tleSBvYXV0aF9ub25jZSBvYXV0aF9zaWduYXR1cmUgb2F1dGhfc2lnbmF0dXJlX21ldGhvZCBvYXV0aF90aW1lc3RhbXAgb2F1dGhfdG9rZW4gb2F1dGhfdmVyc2lvblwiLnNwbGl0KFwiIFwiKSxpZz1bXCJjbGllbnRfaWRcIixcInJlc3BvbnNlX3R5cGVcIixcInNjb3BlXCIsXCJyZWRpcmVjdF91cmlcIixcInN0YXRlXCJdLGpnPXtrZDp7SGE6XCJsb2NhbGVcIix0YTo3MDAsc2E6NjAwLGVhOlwiZmFjZWJvb2suY29tXCIsVmE6aWd9LG1kOntIYTpudWxsLHRhOjUwMCxzYTo3NTAsZWE6XCJnaXRodWIuY29tXCIsVmE6aWd9LG5kOntIYTpcImhsXCIsdGE6NTE1LHNhOjY4MCxlYTpcImdvb2dsZS5jb21cIixWYTppZ30sdGQ6e0hhOlwibGFuZ1wiLHRhOjQ4NSxzYTo3MDUsZWE6XCJ0d2l0dGVyLmNvbVwiLFZhOmhnfSxnZDp7SGE6XCJsb2NhbGVcIix0YTo2NDAsc2E6NjAwLGVhOlwiYXBwbGUuY29tXCIsVmE6W119fTtcbmZ1bmN0aW9uIGtnKGEpe2Zvcih2YXIgYiBpbiBqZylpZihqZ1tiXS5lYT09YSlyZXR1cm4gamdbYl07cmV0dXJuIG51bGx9O2Z1bmN0aW9uIGxnKGEpe3ZhciBiPXt9O2JbXCJmYWNlYm9vay5jb21cIl09bWc7YltcImdvb2dsZS5jb21cIl09bmc7YltcImdpdGh1Yi5jb21cIl09b2c7YltcInR3aXR0ZXIuY29tXCJdPXBnO3ZhciBjPWEmJmFbcWddO3RyeXtpZihjKXJldHVybiBiW2NdP25ldyBiW2NdKGEpOm5ldyByZyhhKTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGFbc2ddKXJldHVybiBuZXcgdGcoYSl9Y2F0Y2goZCl7fXJldHVybiBudWxsfXZhciBzZz1cImlkVG9rZW5cIixxZz1cInByb3ZpZGVySWRcIjtcbmZ1bmN0aW9uIHRnKGEpe3ZhciBiPWFbcWddO2lmKCFiJiZhW3NnXSl7dmFyIGM9Z2coYVtzZ10pO2MmJmMuYSYmKGI9Yy5hKX1pZighYil0aHJvdyBFcnJvcihcIkludmFsaWQgYWRkaXRpb25hbCB1c2VyIGluZm8hXCIpO2lmKFwiYW5vbnltb3VzXCI9PWJ8fFwiY3VzdG9tXCI9PWIpYj1udWxsO2M9ITE7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLmlzTmV3VXNlcj9jPSEhYS5pc05ld1VzZXI6XCJpZGVudGl0eXRvb2xraXQjU2lnbnVwTmV3VXNlclJlc3BvbnNlXCI9PT1hLmtpbmQmJihjPSEwKTtLKHRoaXMsXCJwcm92aWRlcklkXCIsYik7Syh0aGlzLFwiaXNOZXdVc2VyXCIsYyl9ZnVuY3Rpb24gcmcoYSl7dGcuY2FsbCh0aGlzLGEpO2E9VGUoYS5yYXdVc2VySW5mb3x8XCJ7fVwiKTtLKHRoaXMsXCJwcm9maWxlXCIsa2YoYXx8e30pKX1yKHJnLHRnKTtcbmZ1bmN0aW9uIG1nKGEpe3JnLmNhbGwodGhpcyxhKTtpZihcImZhY2Vib29rLmNvbVwiIT10aGlzLnByb3ZpZGVySWQpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHByb3ZpZGVyIElEIVwiKTt9cihtZyxyZyk7ZnVuY3Rpb24gb2coYSl7cmcuY2FsbCh0aGlzLGEpO2lmKFwiZ2l0aHViLmNvbVwiIT10aGlzLnByb3ZpZGVySWQpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHByb3ZpZGVyIElEIVwiKTtLKHRoaXMsXCJ1c2VybmFtZVwiLHRoaXMucHJvZmlsZSYmdGhpcy5wcm9maWxlLmxvZ2lufHxudWxsKX1yKG9nLHJnKTtmdW5jdGlvbiBuZyhhKXtyZy5jYWxsKHRoaXMsYSk7aWYoXCJnb29nbGUuY29tXCIhPXRoaXMucHJvdmlkZXJJZCl0aHJvdyBFcnJvcihcIkludmFsaWQgcHJvdmlkZXIgSUQhXCIpO31yKG5nLHJnKTtcbmZ1bmN0aW9uIHBnKGEpe3JnLmNhbGwodGhpcyxhKTtpZihcInR3aXR0ZXIuY29tXCIhPXRoaXMucHJvdmlkZXJJZCl0aHJvdyBFcnJvcihcIkludmFsaWQgcHJvdmlkZXIgSUQhXCIpO0sodGhpcyxcInVzZXJuYW1lXCIsYS5zY3JlZW5OYW1lfHxudWxsKX1yKHBnLHJnKTtmdW5jdGlvbiB1ZyhhKXt2YXIgYj1aZChhKSxjPVlkKGIsXCJsaW5rXCIpLGQ9WWQoWmQoYyksXCJsaW5rXCIpO2I9WWQoYixcImRlZXBfbGlua19pZFwiKTtyZXR1cm4gWWQoWmQoYiksXCJsaW5rXCIpfHxifHxkfHxjfHxhfTtmdW5jdGlvbiB2ZyhhLGIpe2lmKCFhJiYhYil0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIsXCJJbnRlcm5hbCBhc3NlcnQ6IG5vIHJhdyBzZXNzaW9uIHN0cmluZyBhdmFpbGFibGVcIik7aWYoYSYmYil0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIsXCJJbnRlcm5hbCBhc3NlcnQ6IHVuYWJsZSB0byBkZXRlcm1pbmUgdGhlIHNlc3Npb24gdHlwZVwiKTt0aGlzLmE9YXx8bnVsbDt0aGlzLmI9Ynx8bnVsbDt0aGlzLnR5cGU9dGhpcy5hP3dnOnhnfXZhciB3Zz1cImVucm9sbFwiLHhnPVwic2lnbmluXCI7dmcucHJvdG90eXBlLkZhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYT9EKHRoaXMuYSk6RCh0aGlzLmIpfTt2Zy5wcm90b3R5cGUudj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnR5cGU9PXdnP3ttdWx0aUZhY3RvclNlc3Npb246e2lkVG9rZW46dGhpcy5hfX06e211bHRpRmFjdG9yU2Vzc2lvbjp7cGVuZGluZ0NyZWRlbnRpYWw6dGhpcy5ifX19O2Z1bmN0aW9uIHlnKCl7fXlnLnByb3RvdHlwZS5pYT1mdW5jdGlvbigpe307eWcucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXt9O3lnLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7fTt5Zy5wcm90b3R5cGUudj1mdW5jdGlvbigpe307ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm4gYS50aGVuKGZ1bmN0aW9uKGMpe2lmKGNbQWddKXt2YXIgZD1nZyhjW0FnXSk7aWYoIWR8fGIhPWQuaCl0aHJvdyBuZXcgdChcInVzZXItbWlzbWF0Y2hcIik7cmV0dXJuIGN9dGhyb3cgbmV3IHQoXCJ1c2VyLW1pc21hdGNoXCIpO30pLm8oZnVuY3Rpb24oYyl7dGhyb3cgYyYmYy5jb2RlJiZjLmNvZGU9PXZhK1widXNlci1ub3QtZm91bmRcIj9uZXcgdChcInVzZXItbWlzbWF0Y2hcIik6Yzt9KX1cbmZ1bmN0aW9uIEJnKGEsYil7aWYoYil0aGlzLmE9YjtlbHNlIHRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcImZhaWxlZCB0byBjb25zdHJ1Y3QgYSBjcmVkZW50aWFsXCIpO0sodGhpcyxcInByb3ZpZGVySWRcIixhKTtLKHRoaXMsXCJzaWduSW5NZXRob2RcIixhKX1CZy5wcm90b3R5cGUuaWE9ZnVuY3Rpb24oYSl7cmV0dXJuIENnKGEsRGcodGhpcykpfTtCZy5wcm90b3R5cGUuYj1mdW5jdGlvbihhLGIpe3ZhciBjPURnKHRoaXMpO2MuaWRUb2tlbj1iO3JldHVybiBFZyhhLGMpfTtCZy5wcm90b3R5cGUuYz1mdW5jdGlvbihhLGIpe3JldHVybiB6ZyhGZyhhLERnKHRoaXMpKSxiKX07ZnVuY3Rpb24gRGcoYSl7cmV0dXJue3BlbmRpbmdUb2tlbjphLmEscmVxdWVzdFVyaTpcImh0dHA6Ly9sb2NhbGhvc3RcIn19QmcucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXtyZXR1cm57cHJvdmlkZXJJZDp0aGlzLnByb3ZpZGVySWQsc2lnbkluTWV0aG9kOnRoaXMuc2lnbkluTWV0aG9kLHBlbmRpbmdUb2tlbjp0aGlzLmF9fTtcbmZ1bmN0aW9uIEdnKGEpe2lmKGEmJmEucHJvdmlkZXJJZCYmYS5zaWduSW5NZXRob2QmJjA9PWEucHJvdmlkZXJJZC5pbmRleE9mKFwic2FtbC5cIikmJmEucGVuZGluZ1Rva2VuKXRyeXtyZXR1cm4gbmV3IEJnKGEucHJvdmlkZXJJZCxhLnBlbmRpbmdUb2tlbil9Y2F0Y2goYil7fXJldHVybiBudWxsfVxuZnVuY3Rpb24gSGcoYSxiLGMpe3RoaXMuYT1udWxsO2lmKGIuaWRUb2tlbnx8Yi5hY2Nlc3NUb2tlbiliLmlkVG9rZW4mJksodGhpcyxcImlkVG9rZW5cIixiLmlkVG9rZW4pLGIuYWNjZXNzVG9rZW4mJksodGhpcyxcImFjY2Vzc1Rva2VuXCIsYi5hY2Nlc3NUb2tlbiksYi5ub25jZSYmIWIucGVuZGluZ1Rva2VuJiZLKHRoaXMsXCJub25jZVwiLGIubm9uY2UpLGIucGVuZGluZ1Rva2VuJiYodGhpcy5hPWIucGVuZGluZ1Rva2VuKTtlbHNlIGlmKGIub2F1dGhUb2tlbiYmYi5vYXV0aFRva2VuU2VjcmV0KUsodGhpcyxcImFjY2Vzc1Rva2VuXCIsYi5vYXV0aFRva2VuKSxLKHRoaXMsXCJzZWNyZXRcIixiLm9hdXRoVG9rZW5TZWNyZXQpO2Vsc2UgdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLFwiZmFpbGVkIHRvIGNvbnN0cnVjdCBhIGNyZWRlbnRpYWxcIik7Syh0aGlzLFwicHJvdmlkZXJJZFwiLGEpO0sodGhpcyxcInNpZ25Jbk1ldGhvZFwiLGMpfVxuSGcucHJvdG90eXBlLmlhPWZ1bmN0aW9uKGEpe3JldHVybiBDZyhhLElnKHRoaXMpKX07SGcucHJvdG90eXBlLmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1JZyh0aGlzKTtjLmlkVG9rZW49YjtyZXR1cm4gRWcoYSxjKX07SGcucHJvdG90eXBlLmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1JZyh0aGlzKTtyZXR1cm4gemcoRmcoYSxjKSxiKX07XG5mdW5jdGlvbiBJZyhhKXt2YXIgYj17fTthLmlkVG9rZW4mJihiLmlkX3Rva2VuPWEuaWRUb2tlbik7YS5hY2Nlc3NUb2tlbiYmKGIuYWNjZXNzX3Rva2VuPWEuYWNjZXNzVG9rZW4pO2Euc2VjcmV0JiYoYi5vYXV0aF90b2tlbl9zZWNyZXQ9YS5zZWNyZXQpO2IucHJvdmlkZXJJZD1hLnByb3ZpZGVySWQ7YS5ub25jZSYmIWEuYSYmKGIubm9uY2U9YS5ub25jZSk7Yj17cG9zdEJvZHk6Y2UoYikudG9TdHJpbmcoKSxyZXF1ZXN0VXJpOlwiaHR0cDovL2xvY2FsaG9zdFwifTthLmEmJihkZWxldGUgYi5wb3N0Qm9keSxiLnBlbmRpbmdUb2tlbj1hLmEpO3JldHVybiBifVxuSGcucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt2YXIgYT17cHJvdmlkZXJJZDp0aGlzLnByb3ZpZGVySWQsc2lnbkluTWV0aG9kOnRoaXMuc2lnbkluTWV0aG9kfTt0aGlzLmlkVG9rZW4mJihhLm9hdXRoSWRUb2tlbj10aGlzLmlkVG9rZW4pO3RoaXMuYWNjZXNzVG9rZW4mJihhLm9hdXRoQWNjZXNzVG9rZW49dGhpcy5hY2Nlc3NUb2tlbik7dGhpcy5zZWNyZXQmJihhLm9hdXRoVG9rZW5TZWNyZXQ9dGhpcy5zZWNyZXQpO3RoaXMubm9uY2UmJihhLm5vbmNlPXRoaXMubm9uY2UpO3RoaXMuYSYmKGEucGVuZGluZ1Rva2VuPXRoaXMuYSk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gSmcoYSl7aWYoYSYmYS5wcm92aWRlcklkJiZhLnNpZ25Jbk1ldGhvZCl7dmFyIGI9e2lkVG9rZW46YS5vYXV0aElkVG9rZW4sYWNjZXNzVG9rZW46YS5vYXV0aFRva2VuU2VjcmV0P251bGw6YS5vYXV0aEFjY2Vzc1Rva2VuLG9hdXRoVG9rZW5TZWNyZXQ6YS5vYXV0aFRva2VuU2VjcmV0LG9hdXRoVG9rZW46YS5vYXV0aFRva2VuU2VjcmV0JiZhLm9hdXRoQWNjZXNzVG9rZW4sbm9uY2U6YS5ub25jZSxwZW5kaW5nVG9rZW46YS5wZW5kaW5nVG9rZW59O3RyeXtyZXR1cm4gbmV3IEhnKGEucHJvdmlkZXJJZCxiLGEuc2lnbkluTWV0aG9kKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIEtnKGEsYil7dGhpcy5PYz1ifHxbXTtMKHRoaXMse3Byb3ZpZGVySWQ6YSxpc09BdXRoUHJvdmlkZXI6ITB9KTt0aGlzLkZiPXt9O3RoaXMubGI9KGtnKGEpfHx7fSkuSGF8fG51bGw7dGhpcy5rYj1udWxsfVxuS2cucHJvdG90eXBlLklhPWZ1bmN0aW9uKGEpe3RoaXMuRmI9bGIoYSk7cmV0dXJuIHRoaXN9O2Z1bmN0aW9uIExnKGEpe2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYXx8MCE9YS5pbmRleE9mKFwic2FtbC5cIikpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLCdTQU1MIHByb3ZpZGVyIElEcyBtdXN0IGJlIHByZWZpeGVkIHdpdGggXCJzYW1sLlwiJyk7S2cuY2FsbCh0aGlzLGEsW10pfXIoTGcsS2cpO2Z1bmN0aW9uIE0oYSl7S2cuY2FsbCh0aGlzLGEsaWcpO3RoaXMuYT1bXX1yKE0sS2cpO00ucHJvdG90eXBlLkFhPWZ1bmN0aW9uKGEpe1RhKHRoaXMuYSxhKXx8dGhpcy5hLnB1c2goYSk7cmV0dXJuIHRoaXN9O00ucHJvdG90eXBlLk5iPWZ1bmN0aW9uKCl7cmV0dXJuIFhhKHRoaXMuYSl9O1xuTS5wcm90b3R5cGUuY3JlZGVudGlhbD1mdW5jdGlvbihhLGIpe3ZhciBjO24oYSk/Yz17aWRUb2tlbjphLmlkVG9rZW58fG51bGwsYWNjZXNzVG9rZW46YS5hY2Nlc3NUb2tlbnx8bnVsbCxub25jZTphLnJhd05vbmNlfHxudWxsfTpjPXtpZFRva2VuOmF8fG51bGwsYWNjZXNzVG9rZW46Ynx8bnVsbH07aWYoIWMuaWRUb2tlbiYmIWMuYWNjZXNzVG9rZW4pdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IG11c3QgcHJvdmlkZSB0aGUgSUQgdG9rZW4gYW5kL29yIHRoZSBhY2Nlc3MgdG9rZW4uXCIpO3JldHVybiBuZXcgSGcodGhpcy5wcm92aWRlcklkLGMsdGhpcy5wcm92aWRlcklkKX07ZnVuY3Rpb24gTWcoKXtNLmNhbGwodGhpcyxcImZhY2Vib29rLmNvbVwiKX1yKE1nLE0pO0soTWcsXCJQUk9WSURFUl9JRFwiLFwiZmFjZWJvb2suY29tXCIpO0soTWcsXCJGQUNFQk9PS19TSUdOX0lOX01FVEhPRFwiLFwiZmFjZWJvb2suY29tXCIpO1xuZnVuY3Rpb24gTmcoYSl7aWYoIWEpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IGV4cGVjdGVkIDEgYXJndW1lbnQgKHRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4pLlwiKTt2YXIgYj1hO24oYSkmJihiPWEuYWNjZXNzVG9rZW4pO3JldHVybihuZXcgTWcpLmNyZWRlbnRpYWwoe2FjY2Vzc1Rva2VuOmJ9KX1mdW5jdGlvbiBPZygpe00uY2FsbCh0aGlzLFwiZ2l0aHViLmNvbVwiKX1yKE9nLE0pO0soT2csXCJQUk9WSURFUl9JRFwiLFwiZ2l0aHViLmNvbVwiKTtLKE9nLFwiR0lUSFVCX1NJR05fSU5fTUVUSE9EXCIsXCJnaXRodWIuY29tXCIpO1xuZnVuY3Rpb24gUGcoYSl7aWYoIWEpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiY3JlZGVudGlhbCBmYWlsZWQ6IGV4cGVjdGVkIDEgYXJndW1lbnQgKHRoZSBPQXV0aCBhY2Nlc3MgdG9rZW4pLlwiKTt2YXIgYj1hO24oYSkmJihiPWEuYWNjZXNzVG9rZW4pO3JldHVybihuZXcgT2cpLmNyZWRlbnRpYWwoe2FjY2Vzc1Rva2VuOmJ9KX1mdW5jdGlvbiBRZygpe00uY2FsbCh0aGlzLFwiZ29vZ2xlLmNvbVwiKTt0aGlzLkFhKFwicHJvZmlsZVwiKX1yKFFnLE0pO0soUWcsXCJQUk9WSURFUl9JRFwiLFwiZ29vZ2xlLmNvbVwiKTtLKFFnLFwiR09PR0xFX1NJR05fSU5fTUVUSE9EXCIsXCJnb29nbGUuY29tXCIpO2Z1bmN0aW9uIFJnKGEsYil7dmFyIGM9YTtuKGEpJiYoYz1hLmlkVG9rZW4sYj1hLmFjY2Vzc1Rva2VuKTtyZXR1cm4obmV3IFFnKS5jcmVkZW50aWFsKHtpZFRva2VuOmMsYWNjZXNzVG9rZW46Yn0pfWZ1bmN0aW9uIFNnKCl7S2cuY2FsbCh0aGlzLFwidHdpdHRlci5jb21cIixoZyl9cihTZyxLZyk7XG5LKFNnLFwiUFJPVklERVJfSURcIixcInR3aXR0ZXIuY29tXCIpO0soU2csXCJUV0lUVEVSX1NJR05fSU5fTUVUSE9EXCIsXCJ0d2l0dGVyLmNvbVwiKTtmdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWE7bihjKXx8KGM9e29hdXRoVG9rZW46YSxvYXV0aFRva2VuU2VjcmV0OmJ9KTtpZighYy5vYXV0aFRva2VufHwhYy5vYXV0aFRva2VuU2VjcmV0KXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixcImNyZWRlbnRpYWwgZmFpbGVkOiBleHBlY3RlZCAyIGFyZ3VtZW50cyAodGhlIE9BdXRoIGFjY2VzcyB0b2tlbiBhbmQgc2VjcmV0KS5cIik7cmV0dXJuIG5ldyBIZyhcInR3aXR0ZXIuY29tXCIsYyxcInR3aXR0ZXIuY29tXCIpfVxuZnVuY3Rpb24gVWcoYSxiLGMpe3RoaXMuYT1hO3RoaXMuZj1iO0sodGhpcyxcInByb3ZpZGVySWRcIixcInBhc3N3b3JkXCIpO0sodGhpcyxcInNpZ25Jbk1ldGhvZFwiLGM9PT1WZy5FTUFJTF9MSU5LX1NJR05fSU5fTUVUSE9EP1ZnLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q6VmcuRU1BSUxfUEFTU1dPUkRfU0lHTl9JTl9NRVRIT0QpfVVnLnByb3RvdHlwZS5pYT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5zaWduSW5NZXRob2Q9PVZnLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0Q/TihhLFdnLHtlbWFpbDp0aGlzLmEsb29iQ29kZTp0aGlzLmZ9KTpOKGEsWGcse2VtYWlsOnRoaXMuYSxwYXNzd29yZDp0aGlzLmZ9KX07XG5VZy5wcm90b3R5cGUuYj1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnNpZ25Jbk1ldGhvZD09VmcuRU1BSUxfTElOS19TSUdOX0lOX01FVEhPRD9OKGEsWWcse2lkVG9rZW46YixlbWFpbDp0aGlzLmEsb29iQ29kZTp0aGlzLmZ9KTpOKGEsWmcse2lkVG9rZW46YixlbWFpbDp0aGlzLmEscGFzc3dvcmQ6dGhpcy5mfSl9O1VnLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHpnKHRoaXMuaWEoYSksYil9O1VnLnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7cmV0dXJue2VtYWlsOnRoaXMuYSxwYXNzd29yZDp0aGlzLmYsc2lnbkluTWV0aG9kOnRoaXMuc2lnbkluTWV0aG9kfX07ZnVuY3Rpb24gJGcoYSl7cmV0dXJuIGEmJmEuZW1haWwmJmEucGFzc3dvcmQ/bmV3IFVnKGEuZW1haWwsYS5wYXNzd29yZCxhLnNpZ25Jbk1ldGhvZCk6bnVsbH1mdW5jdGlvbiBWZygpe0wodGhpcyx7cHJvdmlkZXJJZDpcInBhc3N3b3JkXCIsaXNPQXV0aFByb3ZpZGVyOiExfSl9XG5mdW5jdGlvbiBhaChhLGIpe2I9YmgoYik7aWYoIWIpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiSW52YWxpZCBlbWFpbCBsaW5rIVwiKTtyZXR1cm4gbmV3IFVnKGEsYi5jb2RlLFZnLkVNQUlMX0xJTktfU0lHTl9JTl9NRVRIT0QpfWZ1bmN0aW9uIGJoKGEpe2E9dWcoYSk7cmV0dXJuKGE9T2YoYSkpJiZhLm9wZXJhdGlvbj09PXhmP2E6bnVsbH1MKFZnLHtQUk9WSURFUl9JRDpcInBhc3N3b3JkXCJ9KTtMKFZnLHtFTUFJTF9MSU5LX1NJR05fSU5fTUVUSE9EOlwiZW1haWxMaW5rXCJ9KTtMKFZnLHtFTUFJTF9QQVNTV09SRF9TSUdOX0lOX01FVEhPRDpcInBhc3N3b3JkXCJ9KTtmdW5jdGlvbiBjaChhKXtpZighKGEuYmImJmEuYWJ8fGEuSmEmJmEuZGEpKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7dGhpcy5hPWE7Syh0aGlzLFwicHJvdmlkZXJJZFwiLFwicGhvbmVcIik7dGhpcy5lYT1cInBob25lXCI7Syh0aGlzLFwic2lnbkluTWV0aG9kXCIsXCJwaG9uZVwiKX1cbmNoLnByb3RvdHlwZS5pYT1mdW5jdGlvbihhKXtyZXR1cm4gYS5jYihkaCh0aGlzKSl9O2NoLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGEsYil7dmFyIGM9ZGgodGhpcyk7Yy5pZFRva2VuPWI7cmV0dXJuIE4oYSxlaCxjKX07Y2gucHJvdG90eXBlLmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1kaCh0aGlzKTtjLm9wZXJhdGlvbj1cIlJFQVVUSFwiO2E9TihhLGZoLGMpO3JldHVybiB6ZyhhLGIpfTtjaC5wcm90b3R5cGUudj1mdW5jdGlvbigpe3ZhciBhPXtwcm92aWRlcklkOlwicGhvbmVcIn07dGhpcy5hLmJiJiYoYS52ZXJpZmljYXRpb25JZD10aGlzLmEuYmIpO3RoaXMuYS5hYiYmKGEudmVyaWZpY2F0aW9uQ29kZT10aGlzLmEuYWIpO3RoaXMuYS5KYSYmKGEudGVtcG9yYXJ5UHJvb2Y9dGhpcy5hLkphKTt0aGlzLmEuZGEmJihhLnBob25lTnVtYmVyPXRoaXMuYS5kYSk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gZ2goYSl7aWYoYSYmXCJwaG9uZVwiPT09YS5wcm92aWRlcklkJiYoYS52ZXJpZmljYXRpb25JZCYmYS52ZXJpZmljYXRpb25Db2RlfHxhLnRlbXBvcmFyeVByb29mJiZhLnBob25lTnVtYmVyKSl7dmFyIGI9e307dyhbXCJ2ZXJpZmljYXRpb25JZFwiLFwidmVyaWZpY2F0aW9uQ29kZVwiLFwidGVtcG9yYXJ5UHJvb2ZcIixcInBob25lTnVtYmVyXCJdLGZ1bmN0aW9uKGMpe2FbY10mJihiW2NdPWFbY10pfSk7cmV0dXJuIG5ldyBjaChiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBkaChhKXtyZXR1cm4gYS5hLkphJiZhLmEuZGE/e3RlbXBvcmFyeVByb29mOmEuYS5KYSxwaG9uZU51bWJlcjphLmEuZGF9OntzZXNzaW9uSW5mbzphLmEuYmIsY29kZTphLmEuYWJ9fVxuZnVuY3Rpb24gaGgoYSl7dHJ5e3RoaXMuYT1hfHxmaXJlYmFzZS5hdXRoKCl9Y2F0Y2goYil7dGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiRWl0aGVyIGFuIGluc3RhbmNlIG9mIGZpcmViYXNlLmF1dGguQXV0aCBtdXN0IGJlIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgZmlyZWJhc2UuYXV0aC5QaG9uZUF1dGhQcm92aWRlciBjb25zdHJ1Y3Rvciwgb3IgdGhlIGRlZmF1bHQgZmlyZWJhc2UgQXBwIGluc3RhbmNlIG11c3QgYmUgaW5pdGlhbGl6ZWQgdmlhIGZpcmViYXNlLmluaXRpYWxpemVBcHAoKS5cIik7fUwodGhpcyx7cHJvdmlkZXJJZDpcInBob25lXCIsaXNPQXV0aFByb3ZpZGVyOiExfSl9XG5oaC5wcm90b3R5cGUuY2I9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmEuYjtyZXR1cm4gRChiLnZlcmlmeSgpKS50aGVuKGZ1bmN0aW9uKGQpe2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCl0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsXCJBbiBpbXBsZW1lbnRhdGlvbiBvZiBmaXJlYmFzZS5hdXRoLkFwcGxpY2F0aW9uVmVyaWZpZXIucHJvdG90eXBlLnZlcmlmeSgpIG11c3QgcmV0dXJuIGEgZmlyZWJhc2UuUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBzdHJpbmcuXCIpO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJyZWNhcHRjaGFcIjp2YXIgZT1uKGEpP2Euc2Vzc2lvbjpudWxsLGY9bihhKT9hLnBob25lTnVtYmVyOmEsZztlJiZlLnR5cGU9PXdnP2c9ZS5GYSgpLnRoZW4oZnVuY3Rpb24oaCl7cmV0dXJuIGloKGMse2lkVG9rZW46aCxwaG9uZUVucm9sbG1lbnRJbmZvOntwaG9uZU51bWJlcjpmLHJlY2FwdGNoYVRva2VuOmR9fSl9KTplJiZlLnR5cGU9PXhnP2c9ZS5GYSgpLnRoZW4oZnVuY3Rpb24oaCl7cmV0dXJuIGpoKGMsXG57bWZhUGVuZGluZ0NyZWRlbnRpYWw6aCxtZmFFbnJvbGxtZW50SWQ6YS5tdWx0aUZhY3RvckhpbnQmJmEubXVsdGlGYWN0b3JIaW50LnVpZHx8YS5tdWx0aUZhY3RvclVpZCxwaG9uZVNpZ25JbkluZm86e3JlY2FwdGNoYVRva2VuOmR9fSl9KTpnPWtoKGMse3Bob25lTnVtYmVyOmYscmVjYXB0Y2hhVG9rZW46ZH0pO3JldHVybiBnLnRoZW4oZnVuY3Rpb24oaCl7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVzZXQmJmIucmVzZXQoKTtyZXR1cm4gaH0sZnVuY3Rpb24oaCl7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVzZXQmJmIucmVzZXQoKTt0aHJvdyBoO30pO2RlZmF1bHQ6dGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLCdPbmx5IGZpcmViYXNlLmF1dGguQXBwbGljYXRpb25WZXJpZmllcnMgd2l0aCB0eXBlPVwicmVjYXB0Y2hhXCIgYXJlIGN1cnJlbnRseSBzdXBwb3J0ZWQuJyk7fX0pfTtcbmZ1bmN0aW9uIGxoKGEsYil7aWYoIWEpdGhyb3cgbmV3IHQoXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1pZFwiKTtpZighYil0aHJvdyBuZXcgdChcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIik7cmV0dXJuIG5ldyBjaCh7YmI6YSxhYjpifSl9TChoaCx7UFJPVklERVJfSUQ6XCJwaG9uZVwifSk7TChoaCx7UEhPTkVfU0lHTl9JTl9NRVRIT0Q6XCJwaG9uZVwifSk7XG5mdW5jdGlvbiBtaChhKXtpZihhLnRlbXBvcmFyeVByb29mJiZhLnBob25lTnVtYmVyKXJldHVybiBuZXcgY2goe0phOmEudGVtcG9yYXJ5UHJvb2YsZGE6YS5waG9uZU51bWJlcn0pO3ZhciBiPWEmJmEucHJvdmlkZXJJZDtpZighYnx8XCJwYXNzd29yZFwiPT09YilyZXR1cm4gbnVsbDt2YXIgYz1hJiZhLm9hdXRoQWNjZXNzVG9rZW4sZD1hJiZhLm9hdXRoVG9rZW5TZWNyZXQsZT1hJiZhLm5vbmNlLGY9YSYmYS5vYXV0aElkVG9rZW4sZz1hJiZhLnBlbmRpbmdUb2tlbjt0cnl7c3dpdGNoKGIpe2Nhc2UgXCJnb29nbGUuY29tXCI6cmV0dXJuIFJnKGYsYyk7Y2FzZSBcImZhY2Vib29rLmNvbVwiOnJldHVybiBOZyhjKTtjYXNlIFwiZ2l0aHViLmNvbVwiOnJldHVybiBQZyhjKTtjYXNlIFwidHdpdHRlci5jb21cIjpyZXR1cm4gVGcoYyxkKTtkZWZhdWx0OnJldHVybiBjfHxkfHxmfHxnP2c/MD09Yi5pbmRleE9mKFwic2FtbC5cIik/bmV3IEJnKGIsZyk6bmV3IEhnKGIse3BlbmRpbmdUb2tlbjpnLGlkVG9rZW46YS5vYXV0aElkVG9rZW4sXG5hY2Nlc3NUb2tlbjphLm9hdXRoQWNjZXNzVG9rZW59LGIpOihuZXcgTShiKSkuY3JlZGVudGlhbCh7aWRUb2tlbjpmLGFjY2Vzc1Rva2VuOmMscmF3Tm9uY2U6ZX0pOm51bGx9fWNhdGNoKGgpe3JldHVybiBudWxsfX1mdW5jdGlvbiBuaChhKXtpZighYS5pc09BdXRoUHJvdmlkZXIpdGhyb3cgbmV3IHQoXCJpbnZhbGlkLW9hdXRoLXByb3ZpZGVyXCIpO307ZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYsZyl7dGhpcy5jPWE7dGhpcy5iPWJ8fG51bGw7dGhpcy5nPWN8fG51bGw7dGhpcy5mPWR8fG51bGw7dGhpcy5pPWZ8fG51bGw7dGhpcy5oPWd8fG51bGw7dGhpcy5hPWV8fG51bGw7aWYodGhpcy5nfHx0aGlzLmEpe2lmKHRoaXMuZyYmdGhpcy5hKXRocm93IG5ldyB0KFwiaW52YWxpZC1hdXRoLWV2ZW50XCIpO2lmKHRoaXMuZyYmIXRoaXMuZil0aHJvdyBuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKTt9ZWxzZSB0aHJvdyBuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKTt9b2gucHJvdG90eXBlLmdldFVpZD1mdW5jdGlvbigpe3ZhciBhPVtdO2EucHVzaCh0aGlzLmMpO3RoaXMuYiYmYS5wdXNoKHRoaXMuYik7dGhpcy5mJiZhLnB1c2godGhpcy5mKTt0aGlzLmgmJmEucHVzaCh0aGlzLmgpO3JldHVybiBhLmpvaW4oXCItXCIpfTtvaC5wcm90b3R5cGUuUz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmh9O1xub2gucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTp0aGlzLmMsZXZlbnRJZDp0aGlzLmIsdXJsUmVzcG9uc2U6dGhpcy5nLHNlc3Npb25JZDp0aGlzLmYscG9zdEJvZHk6dGhpcy5pLHRlbmFudElkOnRoaXMuaCxlcnJvcjp0aGlzLmEmJnRoaXMuYS52KCl9fTtmdW5jdGlvbiBwaChhKXthPWF8fHt9O3JldHVybiBhLnR5cGU/bmV3IG9oKGEudHlwZSxhLmV2ZW50SWQsYS51cmxSZXNwb25zZSxhLnNlc3Npb25JZCxhLmVycm9yJiZ5YShhLmVycm9yKSxhLnBvc3RCb2R5LGEudGVuYW50SWQpOm51bGx9Oy8qXG5cbiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZnVuY3Rpb24gcWgoKXt0aGlzLmI9bnVsbDt0aGlzLmE9W119dmFyIHJoPW51bGw7ZnVuY3Rpb24gc2goYSl7dmFyIGI9cmg7Yi5hLnB1c2goYSk7Yi5ifHwoYi5iPWZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wO2Q8Yi5hLmxlbmd0aDtkKyspYi5hW2RdKGMpfSxhPUooXCJ1bml2ZXJzYWxMaW5rcy5zdWJzY3JpYmVcIixsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmYShudWxsLGIuYikpfTtmdW5jdGlvbiB0aChhKXt2YXIgYj1cInVuYXV0aG9yaXplZC1kb21haW5cIixjPXZvaWQgMCxkPVpkKGEpO2E9ZC5iO2Q9ZC5mO1wiY2hyb21lLWV4dGVuc2lvblwiPT1kP2M9TmIoXCJUaGlzIGNocm9tZSBleHRlbnNpb24gSUQgKGNocm9tZS1leHRlbnNpb246Ly8lcykgaXMgbm90IGF1dGhvcml6ZWQgdG8gcnVuIHRoaXMgb3BlcmF0aW9uLiBBZGQgaXQgdG8gdGhlIE9BdXRoIHJlZGlyZWN0IGRvbWFpbnMgbGlzdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSAtPiBBdXRoIHNlY3Rpb24gLT4gU2lnbiBpbiBtZXRob2QgdGFiLlwiLGEpOlwiaHR0cFwiPT1kfHxcImh0dHBzXCI9PWQ/Yz1OYihcIlRoaXMgZG9tYWluICglcykgaXMgbm90IGF1dGhvcml6ZWQgdG8gcnVuIHRoaXMgb3BlcmF0aW9uLiBBZGQgaXQgdG8gdGhlIE9BdXRoIHJlZGlyZWN0IGRvbWFpbnMgbGlzdCBpbiB0aGUgRmlyZWJhc2UgY29uc29sZSAtPiBBdXRoIHNlY3Rpb24gLT4gU2lnbiBpbiBtZXRob2QgdGFiLlwiLGEpOmI9XCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCI7XG50LmNhbGwodGhpcyxiLGMpfXIodGgsdCk7ZnVuY3Rpb24gdWgoYSxiLGMpe3QuY2FsbCh0aGlzLGEsYyk7YT1ifHx7fTthLkdiJiZLKHRoaXMsXCJlbWFpbFwiLGEuR2IpO2EuZGEmJksodGhpcyxcInBob25lTnVtYmVyXCIsYS5kYSk7YS5jcmVkZW50aWFsJiZLKHRoaXMsXCJjcmVkZW50aWFsXCIsYS5jcmVkZW50aWFsKTthLldiJiZLKHRoaXMsXCJ0ZW5hbnRJZFwiLGEuV2IpfXIodWgsdCk7dWgucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXt2YXIgYT17Y29kZTp0aGlzLmNvZGUsbWVzc2FnZTp0aGlzLm1lc3NhZ2V9O3RoaXMuZW1haWwmJihhLmVtYWlsPXRoaXMuZW1haWwpO3RoaXMucGhvbmVOdW1iZXImJihhLnBob25lTnVtYmVyPXRoaXMucGhvbmVOdW1iZXIpO3RoaXMudGVuYW50SWQmJihhLnRlbmFudElkPXRoaXMudGVuYW50SWQpO3ZhciBiPXRoaXMuY3JlZGVudGlhbCYmdGhpcy5jcmVkZW50aWFsLnYoKTtiJiZ6KGEsYik7cmV0dXJuIGF9O3VoLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52KCl9O1xuZnVuY3Rpb24gdmgoYSl7aWYoYS5jb2RlKXt2YXIgYj1hLmNvZGV8fFwiXCI7MD09Yi5pbmRleE9mKHZhKSYmKGI9Yi5zdWJzdHJpbmcodmEubGVuZ3RoKSk7dmFyIGM9e2NyZWRlbnRpYWw6bWgoYSksV2I6YS50ZW5hbnRJZH07aWYoYS5lbWFpbCljLkdiPWEuZW1haWw7ZWxzZSBpZihhLnBob25lTnVtYmVyKWMuZGE9YS5waG9uZU51bWJlcjtlbHNlIGlmKCFjLmNyZWRlbnRpYWwpcmV0dXJuIG5ldyB0KGIsYS5tZXNzYWdlfHx2b2lkIDApO3JldHVybiBuZXcgdWgoYixjLGEubWVzc2FnZSl9cmV0dXJuIG51bGx9O2Z1bmN0aW9uIHdoKCl7fXdoLnByb3RvdHlwZS5jPW51bGw7ZnVuY3Rpb24geGgoYSl7cmV0dXJuIGEuY3x8KGEuYz1hLmIoKSl9O3ZhciB5aDtmdW5jdGlvbiB6aCgpe31yKHpoLHdoKTt6aC5wcm90b3R5cGUuYT1mdW5jdGlvbigpe3ZhciBhPUFoKHRoaXMpO3JldHVybiBhP25ldyBBY3RpdmVYT2JqZWN0KGEpOm5ldyBYTUxIdHRwUmVxdWVzdH07emgucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXt2YXIgYT17fTtBaCh0aGlzKSYmKGFbMF09ITAsYVsxXT0hMCk7cmV0dXJuIGF9O1xuZnVuY3Rpb24gQWgoYSl7aWYoIWEuZiYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIFhNTEh0dHBSZXF1ZXN0JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgQWN0aXZlWE9iamVjdCl7Zm9yKHZhciBiPVtcIk1TWE1MMi5YTUxIVFRQLjYuMFwiLFwiTVNYTUwyLlhNTEhUVFAuMy4wXCIsXCJNU1hNTDIuWE1MSFRUUFwiLFwiTWljcm9zb2Z0LlhNTEhUVFBcIl0sYz0wO2M8Yi5sZW5ndGg7YysrKXt2YXIgZD1iW2NdO3RyeXtyZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoZCksYS5mPWR9Y2F0Y2goZSl7fX10aHJvdyBFcnJvcihcIkNvdWxkIG5vdCBjcmVhdGUgQWN0aXZlWE9iamVjdC4gQWN0aXZlWCBtaWdodCBiZSBkaXNhYmxlZCwgb3IgTVNYTUwgbWlnaHQgbm90IGJlIGluc3RhbGxlZFwiKTt9cmV0dXJuIGEuZn15aD1uZXcgemg7ZnVuY3Rpb24gQmgoKXt9cihCaCx3aCk7QmgucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgWE1MSHR0cFJlcXVlc3Q7aWYoXCJ3aXRoQ3JlZGVudGlhbHNcImluIGEpcmV0dXJuIGE7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhEb21haW5SZXF1ZXN0KXJldHVybiBuZXcgQ2g7dGhyb3cgRXJyb3IoXCJVbnN1cHBvcnRlZCBicm93c2VyXCIpO307QmgucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXtyZXR1cm57fX07XG5mdW5jdGlvbiBDaCgpe3RoaXMuYT1uZXcgWERvbWFpblJlcXVlc3Q7dGhpcy5yZWFkeVN0YXRlPTA7dGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbDt0aGlzLnJlc3BvbnNlVHlwZT10aGlzLnJlc3BvbnNlVGV4dD10aGlzLnJlc3BvbnNlPVwiXCI7dGhpcy5zdGF0dXM9LTE7dGhpcy5zdGF0dXNUZXh0PVwiXCI7dGhpcy5hLm9ubG9hZD1xKHRoaXMub2MsdGhpcyk7dGhpcy5hLm9uZXJyb3I9cSh0aGlzLlBiLHRoaXMpO3RoaXMuYS5vbnByb2dyZXNzPXEodGhpcy5wYyx0aGlzKTt0aGlzLmEub250aW1lb3V0PXEodGhpcy50Yyx0aGlzKX1rPUNoLnByb3RvdHlwZTtrLm9wZW49ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPWMmJiFjKXRocm93IEVycm9yKFwiT25seSBhc3luYyByZXF1ZXN0cyBhcmUgc3VwcG9ydGVkLlwiKTt0aGlzLmEub3BlbihhLGIpfTtcbmsuc2VuZD1mdW5jdGlvbihhKXtpZihhKWlmKFwic3RyaW5nXCI9PXR5cGVvZiBhKXRoaXMuYS5zZW5kKGEpO2Vsc2UgdGhyb3cgRXJyb3IoXCJPbmx5IHN0cmluZyBkYXRhIGlzIHN1cHBvcnRlZFwiKTtlbHNlIHRoaXMuYS5zZW5kKCl9O2suYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLmEuYWJvcnQoKX07ay5zZXRSZXF1ZXN0SGVhZGVyPWZ1bmN0aW9uKCl7fTtrLmdldFJlc3BvbnNlSGVhZGVyPWZ1bmN0aW9uKGEpe3JldHVyblwiY29udGVudC10eXBlXCI9PWEudG9Mb3dlckNhc2UoKT90aGlzLmEuY29udGVudFR5cGU6XCJcIn07ay5vYz1mdW5jdGlvbigpe3RoaXMuc3RhdHVzPTIwMDt0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PXRoaXMuYS5yZXNwb25zZVRleHQ7RGgodGhpcyw0KX07ay5QYj1mdW5jdGlvbigpe3RoaXMuc3RhdHVzPTUwMDt0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PVwiXCI7RGgodGhpcyw0KX07ay50Yz1mdW5jdGlvbigpe3RoaXMuUGIoKX07XG5rLnBjPWZ1bmN0aW9uKCl7dGhpcy5zdGF0dXM9MjAwO0RoKHRoaXMsMSl9O2Z1bmN0aW9uIERoKGEsYil7YS5yZWFkeVN0YXRlPWI7aWYoYS5vbnJlYWR5c3RhdGVjaGFuZ2UpYS5vbnJlYWR5c3RhdGVjaGFuZ2UoKX1rLmdldEFsbFJlc3BvbnNlSGVhZGVycz1mdW5jdGlvbigpe3JldHVyblwiY29udGVudC10eXBlOiBcIit0aGlzLmEuY29udGVudFR5cGV9O2Z1bmN0aW9uIEVoKGEsYixjKXt0aGlzLnJlc2V0KGEsYixjLHZvaWQgMCx2b2lkIDApfUVoLnByb3RvdHlwZS5hPW51bGw7dmFyIEZoPTA7RWgucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKGEsYixjLGQsZSl7XCJudW1iZXJcIj09dHlwZW9mIGV8fEZoKys7ZHx8dWEoKTtkZWxldGUgdGhpcy5hfTtmdW5jdGlvbiBHaChhKXt0aGlzLmY9YTt0aGlzLmI9dGhpcy5jPXRoaXMuYT1udWxsfWZ1bmN0aW9uIEhoKGEsYil7dGhpcy5uYW1lPWE7dGhpcy52YWx1ZT1ifUhoLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWV9O3ZhciBJaD1uZXcgSGgoXCJTRVZFUkVcIiwxRTMpLEpoPW5ldyBIaChcIldBUk5JTkdcIiw5MDApLEtoPW5ldyBIaChcIkNPTkZJR1wiLDcwMCksTGg9bmV3IEhoKFwiRklORVwiLDUwMCk7ZnVuY3Rpb24gTWgoYSl7aWYoYS5jKXJldHVybiBhLmM7aWYoYS5hKXJldHVybiBNaChhLmEpO0VhKFwiUm9vdCBsb2dnZXIgaGFzIG5vIGxldmVsIHNldC5cIik7cmV0dXJuIG51bGx9R2gucHJvdG90eXBlLmxvZz1mdW5jdGlvbihhLGIsYyl7aWYoYS52YWx1ZT49TWgodGhpcykudmFsdWUpZm9yKG5hKGIpJiYoYj1iKCkpLGE9bmV3IEVoKGEsU3RyaW5nKGIpLHRoaXMuZiksYyYmKGEuYT1jKSxjPXRoaXM7YzspYz1jLmF9O3ZhciBOaD17fSxPaD1udWxsO1xuZnVuY3Rpb24gUGgoYSl7T2h8fChPaD1uZXcgR2goXCJcIiksTmhbXCJcIl09T2gsT2guYz1LaCk7dmFyIGI7aWYoIShiPU5oW2FdKSl7Yj1uZXcgR2goYSk7dmFyIGM9YS5sYXN0SW5kZXhPZihcIi5cIiksZD1hLnN1YnN0cihjKzEpO2M9UGgoYS5zdWJzdHIoMCxjKSk7Yy5ifHwoYy5iPXt9KTtjLmJbZF09YjtiLmE9YztOaFthXT1ifXJldHVybiBifTtmdW5jdGlvbiBRaChhLGIpe2EmJmEubG9nKExoLGIsdm9pZCAwKX07ZnVuY3Rpb24gUmgoYSl7dGhpcy5mPWF9cihSaCx3aCk7UmgucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFNoKHRoaXMuZil9O1JoLnByb3RvdHlwZS5iPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhfX0oe30pO2Z1bmN0aW9uIFNoKGEpe0cuY2FsbCh0aGlzKTt0aGlzLnM9YTt0aGlzLnJlYWR5U3RhdGU9VGg7dGhpcy5zdGF0dXM9MDt0aGlzLnJlc3BvbnNlVHlwZT10aGlzLnJlc3BvbnNlVGV4dD10aGlzLnJlc3BvbnNlPXRoaXMuc3RhdHVzVGV4dD1cIlwiO3RoaXMub25yZWFkeXN0YXRlY2hhbmdlPW51bGw7dGhpcy5pPW5ldyBIZWFkZXJzO3RoaXMuYj1udWxsO3RoaXMubT1cIkdFVFwiO3RoaXMuZz1cIlwiO3RoaXMuYT0hMTt0aGlzLmg9UGgoXCJnb29nLm5ldC5GZXRjaFhtbEh0dHBcIik7dGhpcy5sPXRoaXMuYz10aGlzLmY9bnVsbH1yKFNoLEcpO3ZhciBUaD0wO2s9U2gucHJvdG90eXBlO1xuay5vcGVuPWZ1bmN0aW9uKGEsYil7aWYodGhpcy5yZWFkeVN0YXRlIT1UaCl0aHJvdyB0aGlzLmFib3J0KCksRXJyb3IoXCJFcnJvciByZW9wZW5pbmcgYSBjb25uZWN0aW9uXCIpO3RoaXMubT1hO3RoaXMuZz1iO3RoaXMucmVhZHlTdGF0ZT0xO1VoKHRoaXMpfTtrLnNlbmQ9ZnVuY3Rpb24oYSl7aWYoMSE9dGhpcy5yZWFkeVN0YXRlKXRocm93IHRoaXMuYWJvcnQoKSxFcnJvcihcIm5lZWQgdG8gY2FsbCBvcGVuKCkgZmlyc3QuIFwiKTt0aGlzLmE9ITA7dmFyIGI9e2hlYWRlcnM6dGhpcy5pLG1ldGhvZDp0aGlzLm0sY3JlZGVudGlhbHM6dm9pZCAwLGNhY2hlOnZvaWQgMH07YSYmKGIuYm9keT1hKTt0aGlzLnMuZmV0Y2gobmV3IFJlcXVlc3QodGhpcy5nLGIpKS50aGVuKHRoaXMuc2MuYmluZCh0aGlzKSx0aGlzLlNhLmJpbmQodGhpcykpfTtcbmsuYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PVwiXCI7dGhpcy5pPW5ldyBIZWFkZXJzO3RoaXMuc3RhdHVzPTA7dGhpcy5jJiZ0aGlzLmMuY2FuY2VsKFwiUmVxdWVzdCB3YXMgYWJvcnRlZC5cIik7MTw9dGhpcy5yZWFkeVN0YXRlJiZ0aGlzLmEmJjQhPXRoaXMucmVhZHlTdGF0ZSYmKHRoaXMuYT0hMSxWaCh0aGlzLCExKSk7dGhpcy5yZWFkeVN0YXRlPVRofTtcbmsuc2M9ZnVuY3Rpb24oYSl7dGhpcy5hJiYodGhpcy5mPWEsdGhpcy5ifHwodGhpcy5iPWEuaGVhZGVycyx0aGlzLnJlYWR5U3RhdGU9MixVaCh0aGlzKSksdGhpcy5hJiYodGhpcy5yZWFkeVN0YXRlPTMsVWgodGhpcyksdGhpcy5hJiYoXCJhcnJheWJ1ZmZlclwiPT09dGhpcy5yZXNwb25zZVR5cGU/YS5hcnJheUJ1ZmZlcigpLnRoZW4odGhpcy5xYy5iaW5kKHRoaXMpLHRoaXMuU2EuYmluZCh0aGlzKSk6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBsLlJlYWRhYmxlU3RyZWFtJiZcImJvZHlcImluIGE/KHRoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHQ9XCJcIix0aGlzLmM9YS5ib2R5LmdldFJlYWRlcigpLHRoaXMubD1uZXcgVGV4dERlY29kZXIsV2godGhpcykpOmEudGV4dCgpLnRoZW4odGhpcy5yYy5iaW5kKHRoaXMpLHRoaXMuU2EuYmluZCh0aGlzKSkpKSl9O2Z1bmN0aW9uIFdoKGEpe2EuYy5yZWFkKCkudGhlbihhLm5jLmJpbmQoYSkpLmNhdGNoKGEuU2EuYmluZChhKSl9XG5rLm5jPWZ1bmN0aW9uKGEpe2lmKHRoaXMuYSl7dmFyIGI9dGhpcy5sLmRlY29kZShhLnZhbHVlP2EudmFsdWU6bmV3IFVpbnQ4QXJyYXkoMCkse3N0cmVhbTohYS5kb25lfSk7YiYmKHRoaXMucmVzcG9uc2U9dGhpcy5yZXNwb25zZVRleHQrPWIpO2EuZG9uZT9WaCh0aGlzLCEwKTpVaCh0aGlzKTszPT10aGlzLnJlYWR5U3RhdGUmJldoKHRoaXMpfX07ay5yYz1mdW5jdGlvbihhKXt0aGlzLmEmJih0aGlzLnJlc3BvbnNlPXRoaXMucmVzcG9uc2VUZXh0PWEsVmgodGhpcywhMCkpfTtrLnFjPWZ1bmN0aW9uKGEpe3RoaXMuYSYmKHRoaXMucmVzcG9uc2U9YSxWaCh0aGlzLCEwKSl9O2suU2E9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5oO2ImJmIubG9nKEpoLFwiRmFpbGVkIHRvIGZldGNoIHVybCBcIit0aGlzLmcsYSBpbnN0YW5jZW9mIEVycm9yP2E6RXJyb3IoYSkpO3RoaXMuYSYmVmgodGhpcywhMCl9O1xuZnVuY3Rpb24gVmgoYSxiKXtiJiZhLmYmJihhLnN0YXR1cz1hLmYuc3RhdHVzLGEuc3RhdHVzVGV4dD1hLmYuc3RhdHVzVGV4dCk7YS5yZWFkeVN0YXRlPTQ7YS5mPW51bGw7YS5jPW51bGw7YS5sPW51bGw7VWgoYSl9ay5zZXRSZXF1ZXN0SGVhZGVyPWZ1bmN0aW9uKGEsYil7dGhpcy5pLmFwcGVuZChhLGIpfTtrLmdldFJlc3BvbnNlSGVhZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmI/dGhpcy5iLmdldChhLnRvTG93ZXJDYXNlKCkpfHxcIlwiOigoYT10aGlzLmgpJiZhLmxvZyhKaCxcIkF0dGVtcHRpbmcgdG8gZ2V0IHJlc3BvbnNlIGhlYWRlciBidXQgbm8gaGVhZGVycyBoYXZlIGJlZW4gcmVjZWl2ZWQgZm9yIHVybDogXCIrdGhpcy5nLHZvaWQgMCksXCJcIil9O1xuay5nZXRBbGxSZXNwb25zZUhlYWRlcnM9ZnVuY3Rpb24oKXtpZighdGhpcy5iKXt2YXIgYT10aGlzLmg7YSYmYS5sb2coSmgsXCJBdHRlbXB0aW5nIHRvIGdldCBhbGwgcmVzcG9uc2UgaGVhZGVycyBidXQgbm8gaGVhZGVycyBoYXZlIGJlZW4gcmVjZWl2ZWQgZm9yIHVybDogXCIrdGhpcy5nLHZvaWQgMCk7cmV0dXJuXCJcIn1hPVtdO2Zvcih2YXIgYj10aGlzLmIuZW50cmllcygpLGM9Yi5uZXh0KCk7IWMuZG9uZTspYz1jLnZhbHVlLGEucHVzaChjWzBdK1wiOiBcIitjWzFdKSxjPWIubmV4dCgpO3JldHVybiBhLmpvaW4oXCJcXHJcXG5cIil9O2Z1bmN0aW9uIFVoKGEpe2Eub25yZWFkeXN0YXRlY2hhbmdlJiZhLm9ucmVhZHlzdGF0ZWNoYW5nZS5jYWxsKGEpfTtmdW5jdGlvbiBYaChhKXtHLmNhbGwodGhpcyk7dGhpcy5oZWFkZXJzPW5ldyBGZDt0aGlzLkQ9YXx8bnVsbDt0aGlzLmM9ITE7dGhpcy5CPXRoaXMuYT1udWxsO3RoaXMuaD10aGlzLlA9dGhpcy5sPVwiXCI7dGhpcy5mPXRoaXMuTz10aGlzLmk9dGhpcy5OPSExO3RoaXMuZz0wO3RoaXMucz1udWxsO3RoaXMubT1ZaDt0aGlzLnc9dGhpcy5SPSExfXIoWGgsRyk7dmFyIFloPVwiXCI7WGgucHJvdG90eXBlLmI9UGgoXCJnb29nLm5ldC5YaHJJb1wiKTt2YXIgWmg9L15odHRwcz8kL2ksJGg9W1wiUE9TVFwiLFwiUFVUXCJdO1xuZnVuY3Rpb24gYWkoYSxiLGMsZCxlKXtpZihhLmEpdGhyb3cgRXJyb3IoXCJbZ29vZy5uZXQuWGhySW9dIE9iamVjdCBpcyBhY3RpdmUgd2l0aCBhbm90aGVyIHJlcXVlc3Q9XCIrYS5sK1wiOyBuZXdVcmk9XCIrYik7Yz1jP2MudG9VcHBlckNhc2UoKTpcIkdFVFwiO2EubD1iO2EuaD1cIlwiO2EuUD1jO2EuTj0hMTthLmM9ITA7YS5hPWEuRD9hLkQuYSgpOnloLmEoKTthLkI9YS5EP3hoKGEuRCk6eGgoeWgpO2EuYS5vbnJlYWR5c3RhdGVjaGFuZ2U9cShhLlNiLGEpO3RyeXtRaChhLmIsYmkoYSxcIk9wZW5pbmcgWGhyXCIpKSxhLk89ITAsYS5hLm9wZW4oYyxTdHJpbmcoYiksITApLGEuTz0hMX1jYXRjaChnKXtRaChhLmIsYmkoYSxcIkVycm9yIG9wZW5pbmcgWGhyOiBcIitnLm1lc3NhZ2UpKTtjaShhLGcpO3JldHVybn1iPWR8fFwiXCI7dmFyIGY9bmV3IEZkKGEuaGVhZGVycyk7ZSYmRWQoZSxmdW5jdGlvbihnLGgpe2Yuc2V0KGgsZyl9KTtlPVJhKGYuWCgpKTtkPWwuRm9ybURhdGEmJmIgaW5zdGFuY2VvZlxubC5Gb3JtRGF0YTshVGEoJGgsYyl8fGV8fGR8fGYuc2V0KFwiQ29udGVudC1UeXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOFwiKTtmLmZvckVhY2goZnVuY3Rpb24oZyxoKXt0aGlzLmEuc2V0UmVxdWVzdEhlYWRlcihoLGcpfSxhKTthLm0mJihhLmEucmVzcG9uc2VUeXBlPWEubSk7XCJ3aXRoQ3JlZGVudGlhbHNcImluIGEuYSYmYS5hLndpdGhDcmVkZW50aWFscyE9PWEuUiYmKGEuYS53aXRoQ3JlZGVudGlhbHM9YS5SKTt0cnl7ZGkoYSksMDxhLmcmJihhLnc9ZWkoYS5hKSxRaChhLmIsYmkoYSxcIldpbGwgYWJvcnQgYWZ0ZXIgXCIrYS5nK1wibXMgaWYgaW5jb21wbGV0ZSwgeGhyMiBcIithLncpKSxhLnc/KGEuYS50aW1lb3V0PWEuZyxhLmEub250aW1lb3V0PXEoYS5LYSxhKSk6YS5zPUFkKGEuS2EsYS5nLGEpKSxRaChhLmIsYmkoYSxcIlNlbmRpbmcgcmVxdWVzdFwiKSksYS5pPSEwLGEuYS5zZW5kKGIpLGEuaT0hMX1jYXRjaChnKXtRaChhLmIsXG5iaShhLFwiU2VuZCBlcnJvcjogXCIrZy5tZXNzYWdlKSksY2koYSxnKX19ZnVuY3Rpb24gZWkoYSl7cmV0dXJuIFRiJiZjYyg5KSYmXCJudW1iZXJcIj09PXR5cGVvZiBhLnRpbWVvdXQmJnZvaWQgMCE9PWEub250aW1lb3V0fWZ1bmN0aW9uIFNhKGEpe3JldHVyblwiY29udGVudC10eXBlXCI9PWEudG9Mb3dlckNhc2UoKX1rPVhoLnByb3RvdHlwZTtrLkthPWZ1bmN0aW9uKCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGhhJiZ0aGlzLmEmJih0aGlzLmg9XCJUaW1lZCBvdXQgYWZ0ZXIgXCIrdGhpcy5nK1wibXMsIGFib3J0aW5nXCIsUWgodGhpcy5iLGJpKHRoaXMsdGhpcy5oKSksdGhpcy5kaXNwYXRjaEV2ZW50KFwidGltZW91dFwiKSx0aGlzLmFib3J0KDgpKX07ZnVuY3Rpb24gY2koYSxiKXthLmM9ITE7YS5hJiYoYS5mPSEwLGEuYS5hYm9ydCgpLGEuZj0hMSk7YS5oPWI7ZmkoYSk7Z2koYSl9XG5mdW5jdGlvbiBmaShhKXthLk58fChhLk49ITAsYS5kaXNwYXRjaEV2ZW50KFwiY29tcGxldGVcIiksYS5kaXNwYXRjaEV2ZW50KFwiZXJyb3JcIikpfWsuYWJvcnQ9ZnVuY3Rpb24oKXt0aGlzLmEmJnRoaXMuYyYmKFFoKHRoaXMuYixiaSh0aGlzLFwiQWJvcnRpbmdcIikpLHRoaXMuYz0hMSx0aGlzLmY9ITAsdGhpcy5hLmFib3J0KCksdGhpcy5mPSExLHRoaXMuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpLHRoaXMuZGlzcGF0Y2hFdmVudChcImFib3J0XCIpLGdpKHRoaXMpKX07ay5CYT1mdW5jdGlvbigpe3RoaXMuYSYmKHRoaXMuYyYmKHRoaXMuYz0hMSx0aGlzLmY9ITAsdGhpcy5hLmFib3J0KCksdGhpcy5mPSExKSxnaSh0aGlzLCEwKSk7WGguWmEuQmEuY2FsbCh0aGlzKX07ay5TYj1mdW5jdGlvbigpe3RoaXMud2F8fCh0aGlzLk98fHRoaXMuaXx8dGhpcy5mP2hpKHRoaXMpOnRoaXMuSGMoKSl9O2suSGM9ZnVuY3Rpb24oKXtoaSh0aGlzKX07XG5mdW5jdGlvbiBoaShhKXtpZihhLmMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBoYSlpZihhLkJbMV0mJjQ9PWlpKGEpJiYyPT1qaShhKSlRaChhLmIsYmkoYSxcIkxvY2FsIHJlcXVlc3QgZXJyb3IgZGV0ZWN0ZWQgYW5kIGlnbm9yZWRcIikpO2Vsc2UgaWYoYS5pJiY0PT1paShhKSlBZChhLlNiLDAsYSk7ZWxzZSBpZihhLmRpc3BhdGNoRXZlbnQoXCJyZWFkeXN0YXRlY2hhbmdlXCIpLDQ9PWlpKGEpKXtRaChhLmIsYmkoYSxcIlJlcXVlc3QgY29tcGxldGVcIikpO2EuYz0hMTt0cnl7dmFyIGI9amkoYSk7YTpzd2l0Y2goYil7Y2FzZSAyMDA6Y2FzZSAyMDE6Y2FzZSAyMDI6Y2FzZSAyMDQ6Y2FzZSAyMDY6Y2FzZSAzMDQ6Y2FzZSAxMjIzOnZhciBjPSEwO2JyZWFrIGE7ZGVmYXVsdDpjPSExfXZhciBkO2lmKCEoZD1jKSl7dmFyIGU7aWYoZT0wPT09Yil7dmFyIGY9U3RyaW5nKGEubCkubWF0Y2goSWQpWzFdfHxudWxsO2lmKCFmJiZsLnNlbGYmJmwuc2VsZi5sb2NhdGlvbil7dmFyIGc9bC5zZWxmLmxvY2F0aW9uLnByb3RvY29sO1xuZj1nLnN1YnN0cigwLGcubGVuZ3RoLTEpfWU9IVpoLnRlc3QoZj9mLnRvTG93ZXJDYXNlKCk6XCJcIil9ZD1lfWlmKGQpYS5kaXNwYXRjaEV2ZW50KFwiY29tcGxldGVcIiksYS5kaXNwYXRjaEV2ZW50KFwic3VjY2Vzc1wiKTtlbHNle3RyeXt2YXIgaD0yPGlpKGEpP2EuYS5zdGF0dXNUZXh0OlwiXCJ9Y2F0Y2gobSl7UWgoYS5iLFwiQ2FuIG5vdCBnZXQgc3RhdHVzOiBcIittLm1lc3NhZ2UpLGg9XCJcIn1hLmg9aCtcIiBbXCIramkoYSkrXCJdXCI7ZmkoYSl9fWZpbmFsbHl7Z2koYSl9fX1mdW5jdGlvbiBnaShhLGIpe2lmKGEuYSl7ZGkoYSk7dmFyIGM9YS5hLGQ9YS5CWzBdP2thOm51bGw7YS5hPW51bGw7YS5CPW51bGw7Ynx8YS5kaXNwYXRjaEV2ZW50KFwicmVhZHlcIik7dHJ5e2Mub25yZWFkeXN0YXRlY2hhbmdlPWR9Y2F0Y2goZSl7KGE9YS5iKSYmYS5sb2coSWgsXCJQcm9ibGVtIGVuY291bnRlcmVkIHJlc2V0dGluZyBvbnJlYWR5c3RhdGVjaGFuZ2U6IFwiK2UubWVzc2FnZSx2b2lkIDApfX19XG5mdW5jdGlvbiBkaShhKXthLmEmJmEudyYmKGEuYS5vbnRpbWVvdXQ9bnVsbCk7YS5zJiYobC5jbGVhclRpbWVvdXQoYS5zKSxhLnM9bnVsbCl9ZnVuY3Rpb24gaWkoYSl7cmV0dXJuIGEuYT9hLmEucmVhZHlTdGF0ZTowfWZ1bmN0aW9uIGppKGEpe3RyeXtyZXR1cm4gMjxpaShhKT9hLmEuc3RhdHVzOi0xfWNhdGNoKGIpe3JldHVybi0xfX1mdW5jdGlvbiBraShhKXt0cnl7cmV0dXJuIGEuYT9hLmEucmVzcG9uc2VUZXh0OlwiXCJ9Y2F0Y2goYil7cmV0dXJuIFFoKGEuYixcIkNhbiBub3QgZ2V0IHJlc3BvbnNlVGV4dDogXCIrYi5tZXNzYWdlKSxcIlwifX1cbmsuZ2V0UmVzcG9uc2U9ZnVuY3Rpb24oKXt0cnl7aWYoIXRoaXMuYSlyZXR1cm4gbnVsbDtpZihcInJlc3BvbnNlXCJpbiB0aGlzLmEpcmV0dXJuIHRoaXMuYS5yZXNwb25zZTtzd2l0Y2godGhpcy5tKXtjYXNlIFloOmNhc2UgXCJ0ZXh0XCI6cmV0dXJuIHRoaXMuYS5yZXNwb25zZVRleHQ7Y2FzZSBcImFycmF5YnVmZmVyXCI6aWYoXCJtb3pSZXNwb25zZUFycmF5QnVmZmVyXCJpbiB0aGlzLmEpcmV0dXJuIHRoaXMuYS5tb3pSZXNwb25zZUFycmF5QnVmZmVyfXZhciBhPXRoaXMuYjthJiZhLmxvZyhJaCxcIlJlc3BvbnNlIHR5cGUgXCIrdGhpcy5tK1wiIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBicm93c2VyXCIsdm9pZCAwKTtyZXR1cm4gbnVsbH1jYXRjaChiKXtyZXR1cm4gUWgodGhpcy5iLFwiQ2FuIG5vdCBnZXQgcmVzcG9uc2U6IFwiK2IubWVzc2FnZSksbnVsbH19O2Z1bmN0aW9uIGJpKGEsYil7cmV0dXJuIGIrXCIgW1wiK2EuUCtcIiBcIithLmwrXCIgXCIramkoYSkrXCJdXCJ9Oy8qXG4gUG9ydGlvbnMgb2YgdGhpcyBjb2RlIGFyZSBmcm9tIE1vY2hpS2l0LCByZWNlaXZlZCBieVxuIFRoZSBDbG9zdXJlIEF1dGhvcnMgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLiBBbGwgb3RoZXIgY29kZSBpcyBDb3B5cmlnaHRcbiAyMDA1LTIwMDkgVGhlIENsb3N1cmUgQXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiovXG5mdW5jdGlvbiBsaShhKXt2YXIgYj1taTt0aGlzLmc9W107dGhpcy53PWI7dGhpcy5zPWF8fG51bGw7dGhpcy5mPXRoaXMuYT0hMTt0aGlzLmM9dm9pZCAwO3RoaXMudT10aGlzLkI9dGhpcy5pPSExO3RoaXMuaD0wO3RoaXMuYj1udWxsO3RoaXMubD0wfWxpLnByb3RvdHlwZS5jYW5jZWw9ZnVuY3Rpb24oYSl7aWYodGhpcy5hKXRoaXMuYyBpbnN0YW5jZW9mIGxpJiZ0aGlzLmMuY2FuY2VsKCk7ZWxzZXtpZih0aGlzLmIpe3ZhciBiPXRoaXMuYjtkZWxldGUgdGhpcy5iO2E/Yi5jYW5jZWwoYSk6KGIubC0tLDA+PWIubCYmYi5jYW5jZWwoKSl9dGhpcy53P3RoaXMudy5jYWxsKHRoaXMucyx0aGlzKTp0aGlzLnU9ITA7dGhpcy5hfHwoYT1uZXcgbmkodGhpcyksb2kodGhpcykscGkodGhpcywhMSxhKSl9fTtsaS5wcm90b3R5cGUubT1mdW5jdGlvbihhLGIpe3RoaXMuaT0hMTtwaSh0aGlzLGEsYil9O2Z1bmN0aW9uIHBpKGEsYixjKXthLmE9ITA7YS5jPWM7YS5mPSFiO3FpKGEpfVxuZnVuY3Rpb24gb2koYSl7aWYoYS5hKXtpZighYS51KXRocm93IG5ldyByaShhKTthLnU9ITF9fWZ1bmN0aW9uIHNpKGEsYil7dGkoYSxudWxsLGIsdm9pZCAwKX1mdW5jdGlvbiB0aShhLGIsYyxkKXthLmcucHVzaChbYixjLGRdKTthLmEmJnFpKGEpfWxpLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9bmV3IEIoZnVuY3Rpb24oZyxoKXtkPWc7ZT1ofSk7dGkodGhpcyxkLGZ1bmN0aW9uKGcpe2cgaW5zdGFuY2VvZiBuaT9mLmNhbmNlbCgpOmUoZyl9KTtyZXR1cm4gZi50aGVuKGEsYixjKX07bGkucHJvdG90eXBlLiRnb29nX1RoZW5hYmxlPSEwO2Z1bmN0aW9uIHVpKGEpe3JldHVybiBRYShhLmcsZnVuY3Rpb24oYil7cmV0dXJuIG5hKGJbMV0pfSl9XG5mdW5jdGlvbiBxaShhKXtpZihhLmgmJmEuYSYmdWkoYSkpe3ZhciBiPWEuaCxjPXZpW2JdO2MmJihsLmNsZWFyVGltZW91dChjLmEpLGRlbGV0ZSB2aVtiXSk7YS5oPTB9YS5iJiYoYS5iLmwtLSxkZWxldGUgYS5iKTtiPWEuYztmb3IodmFyIGQ9Yz0hMTthLmcubGVuZ3RoJiYhYS5pOyl7dmFyIGU9YS5nLnNoaWZ0KCksZj1lWzBdLGc9ZVsxXTtlPWVbMl07aWYoZj1hLmY/ZzpmKXRyeXt2YXIgaD1mLmNhbGwoZXx8YS5zLGIpO3ZvaWQgMCE9PWgmJihhLmY9YS5mJiYoaD09Ynx8aCBpbnN0YW5jZW9mIEVycm9yKSxhLmM9Yj1oKTtpZihDYShiKXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGwuUHJvbWlzZSYmYiBpbnN0YW5jZW9mIGwuUHJvbWlzZSlkPSEwLGEuaT0hMH1jYXRjaChtKXtiPW0sYS5mPSEwLHVpKGEpfHwoYz0hMCl9fWEuYz1iO2QmJihoPXEoYS5tLGEsITApLGQ9cShhLm0sYSwhMSksYiBpbnN0YW5jZW9mIGxpPyh0aShiLGgsZCksYi5CPSEwKTpiLnRoZW4oaCxkKSk7YyYmKGI9XG5uZXcgd2koYiksdmlbYi5hXT1iLGEuaD1iLmEpfWZ1bmN0aW9uIHJpKCl7dS5jYWxsKHRoaXMpfXIocmksdSk7cmkucHJvdG90eXBlLm1lc3NhZ2U9XCJEZWZlcnJlZCBoYXMgYWxyZWFkeSBmaXJlZFwiO3JpLnByb3RvdHlwZS5uYW1lPVwiQWxyZWFkeUNhbGxlZEVycm9yXCI7ZnVuY3Rpb24gbmkoKXt1LmNhbGwodGhpcyl9cihuaSx1KTtuaS5wcm90b3R5cGUubWVzc2FnZT1cIkRlZmVycmVkIHdhcyBjYW5jZWxlZFwiO25pLnByb3RvdHlwZS5uYW1lPVwiQ2FuY2VsZWRFcnJvclwiO2Z1bmN0aW9uIHdpKGEpe3RoaXMuYT1sLnNldFRpbWVvdXQocSh0aGlzLmMsdGhpcyksMCk7dGhpcy5iPWF9d2kucHJvdG90eXBlLmM9ZnVuY3Rpb24oKXtkZWxldGUgdmlbdGhpcy5hXTt0aHJvdyB0aGlzLmI7fTt2YXIgdmk9e307ZnVuY3Rpb24geGkoYSl7dmFyIGI9e30sYz1iLmRvY3VtZW50fHxkb2N1bWVudCxkPXdiKGEpLnRvU3RyaW5nKCksZT1qYyhkb2N1bWVudCxcIlNDUklQVFwiKSxmPXtUYjplLEthOnZvaWQgMH0sZz1uZXcgbGkoZiksaD1udWxsLG09bnVsbCE9Yi50aW1lb3V0P2IudGltZW91dDo1RTM7MDxtJiYoaD13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe3lpKGUsITApO3ZhciBwPW5ldyB6aShBaSxcIlRpbWVvdXQgcmVhY2hlZCBmb3IgbG9hZGluZyBzY3JpcHQgXCIrZCk7b2koZyk7cGkoZywhMSxwKX0sbSksZi5LYT1oKTtlLm9ubG9hZD1lLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2UucmVhZHlTdGF0ZSYmXCJsb2FkZWRcIiE9ZS5yZWFkeVN0YXRlJiZcImNvbXBsZXRlXCIhPWUucmVhZHlTdGF0ZXx8KHlpKGUsYi51ZHx8ITEsaCksb2koZykscGkoZywhMCxudWxsKSl9O2Uub25lcnJvcj1mdW5jdGlvbigpe3lpKGUsITAsaCk7dmFyIHA9bmV3IHppKEJpLFwiRXJyb3Igd2hpbGUgbG9hZGluZyBzY3JpcHQgXCIrXG5kKTtvaShnKTtwaShnLCExLHApfTtmPWIuYXR0cmlidXRlc3x8e307eihmLHt0eXBlOlwidGV4dC9qYXZhc2NyaXB0XCIsY2hhcnNldDpcIlVURi04XCJ9KTtnYyhlLGYpO01iKGUsYSk7Q2koYykuYXBwZW5kQ2hpbGQoZSk7cmV0dXJuIGd9ZnVuY3Rpb24gQ2koYSl7dmFyIGI7cmV0dXJuKGI9KGF8fGRvY3VtZW50KS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIkhFQURcIikpJiYwIT1iLmxlbmd0aD9iWzBdOmEuZG9jdW1lbnRFbGVtZW50fWZ1bmN0aW9uIG1pKCl7aWYodGhpcyYmdGhpcy5UYil7dmFyIGE9dGhpcy5UYjthJiZcIlNDUklQVFwiPT1hLnRhZ05hbWUmJnlpKGEsITAsdGhpcy5LYSl9fVxuZnVuY3Rpb24geWkoYSxiLGMpe251bGwhPWMmJmwuY2xlYXJUaW1lb3V0KGMpO2Eub25sb2FkPWthO2Eub25lcnJvcj1rYTthLm9ucmVhZHlzdGF0ZWNoYW5nZT1rYTtiJiZ3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2EmJmEucGFyZW50Tm9kZSYmYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGEpfSwwKX12YXIgQmk9MCxBaT0xO2Z1bmN0aW9uIHppKGEsYil7dmFyIGM9XCJKc2xvYWRlciBlcnJvciAoY29kZSAjXCIrYStcIilcIjtiJiYoYys9XCI6IFwiK2IpO3UuY2FsbCh0aGlzLGMpO3RoaXMuY29kZT1hfXIoemksdSk7ZnVuY3Rpb24gRGkoYSl7dGhpcy5mPWF9cihEaSx3aCk7RGkucHJvdG90eXBlLmE9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHRoaXMuZn07RGkucHJvdG90eXBlLmI9ZnVuY3Rpb24oKXtyZXR1cm57fX07XG5mdW5jdGlvbiBFaShhLGIsYyl7dGhpcy5jPWE7YT1ifHx7fTt0aGlzLnU9YS5zZWN1cmVUb2tlbkVuZHBvaW50fHxcImh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlYXBpcy5jb20vdjEvdG9rZW5cIjt0aGlzLm09YS5zZWN1cmVUb2tlblRpbWVvdXR8fEZpO3RoaXMuZz1sYihhLnNlY3VyZVRva2VuSGVhZGVyc3x8R2kpO3RoaXMuaD1hLmZpcmViYXNlRW5kcG9pbnR8fFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vaWRlbnRpdHl0b29sa2l0L3YzL3JlbHlpbmdwYXJ0eS9cIjt0aGlzLmw9YS5pZGVudGl0eVBsYXRmb3JtRW5kcG9pbnR8fFwiaHR0cHM6Ly9pZGVudGl0eXRvb2xraXQuZ29vZ2xlYXBpcy5jb20vdjIvXCI7dGhpcy5pPWEuZmlyZWJhc2VUaW1lb3V0fHxIaTt0aGlzLmE9bGIoYS5maXJlYmFzZUhlYWRlcnN8fElpKTtjJiYodGhpcy5hW1wiWC1DbGllbnQtVmVyc2lvblwiXT1jLHRoaXMuZ1tcIlgtQ2xpZW50LVZlcnNpb25cIl09Yyk7Yz1cIk5vZGVcIj09SGUoKTtjPWwuWE1MSHR0cFJlcXVlc3R8fFxuYyYmZmlyZWJhc2UuSU5URVJOQUwubm9kZSYmZmlyZWJhc2UuSU5URVJOQUwubm9kZS5YTUxIdHRwUmVxdWVzdDtpZighYyYmIUdlKCkpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLFwiVGhlIFhNTEh0dHBSZXF1ZXN0IGNvbXBhdGliaWxpdHkgbGlicmFyeSB3YXMgbm90IGZvdW5kLlwiKTt0aGlzLmY9dm9pZCAwO0dlKCk/dGhpcy5mPW5ldyBSaChzZWxmKTpJZSgpP3RoaXMuZj1uZXcgRGkoYyk6dGhpcy5mPW5ldyBCaDt0aGlzLmI9bnVsbH12YXIgSmksQWc9XCJpZFRva2VuXCIsRmk9bmV3IFdlKDNFNCw2RTQpLEdpPXtcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJ9LEhpPW5ldyBXZSgzRTQsNkU0KSxJaT17XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL2pzb25cIn07ZnVuY3Rpb24gS2koYSxiKXtiP2EuYVtcIlgtRmlyZWJhc2UtTG9jYWxlXCJdPWI6ZGVsZXRlIGEuYVtcIlgtRmlyZWJhc2UtTG9jYWxlXCJdfVxuZnVuY3Rpb24gTGkoYSxiKXtiPyhhLmFbXCJYLUNsaWVudC1WZXJzaW9uXCJdPWIsYS5nW1wiWC1DbGllbnQtVmVyc2lvblwiXT1iKTooZGVsZXRlIGEuYVtcIlgtQ2xpZW50LVZlcnNpb25cIl0sZGVsZXRlIGEuZ1tcIlgtQ2xpZW50LVZlcnNpb25cIl0pfUVpLnByb3RvdHlwZS5TPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYn07ZnVuY3Rpb24gTWkoYSxiLGMsZCxlLGYsZyl7cmUoKXx8R2UoKT9hPXEoYS53LGEpOihKaXx8KEppPW5ldyBCKGZ1bmN0aW9uKGgsbSl7TmkoaCxtKX0pKSxhPXEoYS5zLGEpKTthKGIsYyxkLGUsZixnKX1cbkVpLnByb3RvdHlwZS53PWZ1bmN0aW9uKGEsYixjLGQsZSxmKXtpZihHZSgpJiYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBsLmZldGNofHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGwuSGVhZGVyc3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBsLlJlcXVlc3QpKXRocm93IG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiLFwiZmV0Y2gsIEhlYWRlcnMgYW5kIFJlcXVlc3QgbmF0aXZlIEFQSXMgb3IgZXF1aXZhbGVudCBQb2x5ZmlsbHMgbXVzdCBiZSBhdmFpbGFibGUgdG8gc3VwcG9ydCBIVFRQIHJlcXVlc3RzIGZyb20gYSBXb3JrZXIgZW52aXJvbm1lbnQuXCIpO3ZhciBnPW5ldyBYaCh0aGlzLmYpO2lmKGYpe2cuZz1NYXRoLm1heCgwLGYpO3ZhciBoPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtnLmRpc3BhdGNoRXZlbnQoXCJ0aW1lb3V0XCIpfSxmKX1tZChnLFwiY29tcGxldGVcIixmdW5jdGlvbigpe2gmJmNsZWFyVGltZW91dChoKTt2YXIgbT1udWxsO3RyeXttPVxuSlNPTi5wYXJzZShraSh0aGlzKSl8fG51bGx9Y2F0Y2gocCl7bT1udWxsfWImJmIobSl9KTtzZChnLFwicmVhZHlcIixmdW5jdGlvbigpe2gmJmNsZWFyVGltZW91dChoKTtUYyh0aGlzKX0pO3NkKGcsXCJ0aW1lb3V0XCIsZnVuY3Rpb24oKXtoJiZjbGVhclRpbWVvdXQoaCk7VGModGhpcyk7YiYmYihudWxsKX0pO2FpKGcsYSxjLGQsZSl9O3ZhciBPaT1uZXcgb2IocGIsXCJodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9jbGllbnQuanM/b25sb2FkPSV7b25sb2FkfVwiKSxQaT1cIl9fZmNiXCIrTWF0aC5mbG9vcigxRTYqTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoKTtcbmZ1bmN0aW9uIE5pKGEsYil7aWYoKCh3aW5kb3cuZ2FwaXx8e30pLmNsaWVudHx8e30pLnJlcXVlc3QpYSgpO2Vsc2V7bFtQaV09ZnVuY3Rpb24oKXsoKHdpbmRvdy5nYXBpfHx7fSkuY2xpZW50fHx7fSkucmVxdWVzdD9hKCk6YihFcnJvcihcIkNPUlNfVU5TVVBQT1JURURcIikpfTt2YXIgYz14YihPaSx7b25sb2FkOlBpfSk7c2koeGkoYyksZnVuY3Rpb24oKXtiKEVycm9yKFwiQ09SU19VTlNVUFBPUlRFRFwiKSl9KX19XG5FaS5wcm90b3R5cGUucz1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPXRoaXM7SmkudGhlbihmdW5jdGlvbigpe3dpbmRvdy5nYXBpLmNsaWVudC5zZXRBcGlLZXkoZi5jKTt2YXIgZz13aW5kb3cuZ2FwaS5hdXRoLmdldFRva2VuKCk7d2luZG93LmdhcGkuYXV0aC5zZXRUb2tlbihudWxsKTt3aW5kb3cuZ2FwaS5jbGllbnQucmVxdWVzdCh7cGF0aDphLG1ldGhvZDpjLGJvZHk6ZCxoZWFkZXJzOmUsYXV0aFR5cGU6XCJub25lXCIsY2FsbGJhY2s6ZnVuY3Rpb24oaCl7d2luZG93LmdhcGkuYXV0aC5zZXRUb2tlbihnKTtiJiZiKGgpfX0pfSkubyhmdW5jdGlvbihnKXtiJiZiKHtlcnJvcjp7bWVzc2FnZTpnJiZnLm1lc3NhZ2V8fFwiQ09SU19VTlNVUFBPUlRFRFwifX0pfSl9O1xuZnVuY3Rpb24gUWkoYSxiKXtyZXR1cm4gbmV3IEIoZnVuY3Rpb24oYyxkKXtcInJlZnJlc2hfdG9rZW5cIj09Yi5ncmFudF90eXBlJiZiLnJlZnJlc2hfdG9rZW58fFwiYXV0aG9yaXphdGlvbl9jb2RlXCI9PWIuZ3JhbnRfdHlwZSYmYi5jb2RlP01pKGEsYS51K1wiP2tleT1cIitlbmNvZGVVUklDb21wb25lbnQoYS5jKSxmdW5jdGlvbihlKXtlP2UuZXJyb3I/ZChSaShlKSk6ZS5hY2Nlc3NfdG9rZW4mJmUucmVmcmVzaF90b2tlbj9jKGUpOmQobmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKSk6ZChuZXcgdChcIm5ldHdvcmstcmVxdWVzdC1mYWlsZWRcIikpfSxcIlBPU1RcIixjZShiKS50b1N0cmluZygpLGEuZyxhLm0uZ2V0KCkpOmQobmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKSl9KX1cbmZ1bmN0aW9uIFNpKGEsYixjLGQsZSxmLGcpe3ZhciBoPVpkKGIrYyk7SChoLFwia2V5XCIsYS5jKTtnJiZIKGgsXCJjYlwiLHVhKCkudG9TdHJpbmcoKSk7dmFyIG09XCJHRVRcIj09ZDtpZihtKWZvcih2YXIgcCBpbiBlKWUuaGFzT3duUHJvcGVydHkocCkmJkgoaCxwLGVbcF0pO3JldHVybiBuZXcgQihmdW5jdGlvbih2LEMpe01pKGEsaC50b1N0cmluZygpLGZ1bmN0aW9uKEEpe0E/QS5lcnJvcj9DKFJpKEEsZnx8e30pKTp2KEEpOkMobmV3IHQoXCJuZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCIpKX0sZCxtP3ZvaWQgMDpoZShTZShlKSksYS5hLGEuaS5nZXQoKSl9KX1mdW5jdGlvbiBUaShhKXthPWEuZW1haWw7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhfHwhQWUudGVzdChhKSl0aHJvdyBuZXcgdChcImludmFsaWQtZW1haWxcIik7fWZ1bmN0aW9uIFVpKGEpe1wiZW1haWxcImluIGEmJlRpKGEpfVxuZnVuY3Rpb24gVmkoYSxiKXtyZXR1cm4gTihhLFdpLHtpZGVudGlmaWVyOmIsY29udGludWVVcmk6UGUoKT9vZSgpOlwiaHR0cDovL2xvY2FsaG9zdFwifSkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYy5zaWduaW5NZXRob2RzfHxbXX0pfWZ1bmN0aW9uIFhpKGEpe3JldHVybiBOKGEsWWkse30pLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGIuYXV0aG9yaXplZERvbWFpbnN8fFtdfSl9ZnVuY3Rpb24gTyhhKXtpZighYVtBZ10pe2lmKGEubWZhUGVuZGluZ0NyZWRlbnRpYWwpdGhyb3cgbmV3IHQoXCJtdWx0aS1mYWN0b3ItYXV0aC1yZXF1aXJlZFwiLG51bGwsbGIoYSkpO3Rocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7fX1cbmZ1bmN0aW9uIFppKGEpe2lmKGEucGhvbmVOdW1iZXJ8fGEudGVtcG9yYXJ5UHJvb2Ype2lmKCFhLnBob25lTnVtYmVyfHwhYS50ZW1wb3JhcnlQcm9vZil0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO31lbHNle2lmKCFhLnNlc3Npb25JbmZvKXRocm93IG5ldyB0KFwibWlzc2luZy12ZXJpZmljYXRpb24taWRcIik7aWYoIWEuY29kZSl0aHJvdyBuZXcgdChcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIik7fX1FaS5wcm90b3R5cGUudmI9ZnVuY3Rpb24oKXtyZXR1cm4gTih0aGlzLCRpLHt9KX07RWkucHJvdG90eXBlLnhiPWZ1bmN0aW9uKGEsYil7cmV0dXJuIE4odGhpcyxhaix7aWRUb2tlbjphLGVtYWlsOmJ9KX07RWkucHJvdG90eXBlLnliPWZ1bmN0aW9uKGEsYil7cmV0dXJuIE4odGhpcyxaZyx7aWRUb2tlbjphLHBhc3N3b3JkOmJ9KX07dmFyIGJqPXtkaXNwbGF5TmFtZTpcIkRJU1BMQVlfTkFNRVwiLHBob3RvVXJsOlwiUEhPVE9fVVJMXCJ9O2s9RWkucHJvdG90eXBlO1xuay56Yj1mdW5jdGlvbihhLGIpe3ZhciBjPXtpZFRva2VuOmF9LGQ9W107amIoYmosZnVuY3Rpb24oZSxmKXt2YXIgZz1iW2ZdO251bGw9PT1nP2QucHVzaChlKTpmIGluIGImJihjW2ZdPWcpfSk7ZC5sZW5ndGgmJihjLmRlbGV0ZUF0dHJpYnV0ZT1kKTtyZXR1cm4gTih0aGlzLGFqLGMpfTtrLnJiPWZ1bmN0aW9uKGEsYil7YT17cmVxdWVzdFR5cGU6XCJQQVNTV09SRF9SRVNFVFwiLGVtYWlsOmF9O3ooYSxiKTtyZXR1cm4gTih0aGlzLGNqLGEpfTtrLnNiPWZ1bmN0aW9uKGEsYil7YT17cmVxdWVzdFR5cGU6XCJFTUFJTF9TSUdOSU5cIixlbWFpbDphfTt6KGEsYik7cmV0dXJuIE4odGhpcyxkaixhKX07ay5xYj1mdW5jdGlvbihhLGIpe2E9e3JlcXVlc3RUeXBlOlwiVkVSSUZZX0VNQUlMXCIsaWRUb2tlbjphfTt6KGEsYik7cmV0dXJuIE4odGhpcyxlaixhKX07XG5rLkFiPWZ1bmN0aW9uKGEsYixjKXthPXtyZXF1ZXN0VHlwZTpcIlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMXCIsaWRUb2tlbjphLG5ld0VtYWlsOmJ9O3ooYSxjKTtyZXR1cm4gTih0aGlzLGZqLGEpfTtmdW5jdGlvbiBraChhLGIpe3JldHVybiBOKGEsZ2osYil9ay5jYj1mdW5jdGlvbihhKXtyZXR1cm4gTih0aGlzLGhqLGEpfTtmdW5jdGlvbiBpaChhLGIpe3JldHVybiBOKGEsaWosYikudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYy5waG9uZVNlc3Npb25JbmZvLnNlc3Npb25JbmZvfSl9XG5mdW5jdGlvbiBqaihhKXtpZighYS5waG9uZVZlcmlmaWNhdGlvbkluZm8pdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTtpZighYS5waG9uZVZlcmlmaWNhdGlvbkluZm8uc2Vzc2lvbkluZm8pdGhyb3cgbmV3IHQoXCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1pZFwiKTtpZighYS5waG9uZVZlcmlmaWNhdGlvbkluZm8uY29kZSl0aHJvdyBuZXcgdChcIm1pc3NpbmctdmVyaWZpY2F0aW9uLWNvZGVcIik7fWZ1bmN0aW9uIGpoKGEsYil7cmV0dXJuIE4oYSxraixiKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBjLnBob25lUmVzcG9uc2VJbmZvLnNlc3Npb25JbmZvfSl9ZnVuY3Rpb24gbGooYSxiLGMpe3JldHVybiBOKGEsbWose2lkVG9rZW46YixkZWxldGVQcm92aWRlcjpjfSl9ZnVuY3Rpb24gbmooYSl7aWYoIWEucmVxdWVzdFVyaXx8IWEuc2Vzc2lvbklkJiYhYS5wb3N0Qm9keSYmIWEucGVuZGluZ1Rva2VuKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7fVxuZnVuY3Rpb24gb2ooYSxiKXtiLm9hdXRoSWRUb2tlbiYmYi5wcm92aWRlcklkJiYwPT1iLnByb3ZpZGVySWQuaW5kZXhPZihcIm9pZGMuXCIpJiYhYi5wZW5kaW5nVG9rZW4mJihhLnNlc3Npb25JZD9iLm5vbmNlPWEuc2Vzc2lvbklkOmEucG9zdEJvZHkmJihhPW5ldyBRZChhLnBvc3RCb2R5KSxnZShhLFwibm9uY2VcIikmJihiLm5vbmNlPWEuZ2V0KFwibm9uY2VcIikpKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBwaihhKXt2YXIgYj1udWxsO2EubmVlZENvbmZpcm1hdGlvbj8oYS5jb2RlPVwiYWNjb3VudC1leGlzdHMtd2l0aC1kaWZmZXJlbnQtY3JlZGVudGlhbFwiLGI9dmgoYSkpOlwiRkVERVJBVEVEX1VTRVJfSURfQUxSRUFEWV9MSU5LRURcIj09YS5lcnJvck1lc3NhZ2U/KGEuY29kZT1cImNyZWRlbnRpYWwtYWxyZWFkeS1pbi11c2VcIixiPXZoKGEpKTpcIkVNQUlMX0VYSVNUU1wiPT1hLmVycm9yTWVzc2FnZT8oYS5jb2RlPVwiZW1haWwtYWxyZWFkeS1pbi11c2VcIixiPXZoKGEpKTphLmVycm9yTWVzc2FnZSYmKGI9cWooYS5lcnJvck1lc3NhZ2UpKTtpZihiKXRocm93IGI7TyhhKX1mdW5jdGlvbiBDZyhhLGIpe2IucmV0dXJuSWRwQ3JlZGVudGlhbD0hMDtyZXR1cm4gTihhLHJqLGIpfWZ1bmN0aW9uIEVnKGEsYil7Yi5yZXR1cm5JZHBDcmVkZW50aWFsPSEwO3JldHVybiBOKGEsc2osYil9XG5mdW5jdGlvbiBGZyhhLGIpe2IucmV0dXJuSWRwQ3JlZGVudGlhbD0hMDtiLmF1dG9DcmVhdGU9ITE7cmV0dXJuIE4oYSx0aixiKX1mdW5jdGlvbiB1aihhKXtpZighYS5vb2JDb2RlKXRocm93IG5ldyB0KFwiaW52YWxpZC1hY3Rpb24tY29kZVwiKTt9ay5qYj1mdW5jdGlvbihhLGIpe3JldHVybiBOKHRoaXMsdmose29vYkNvZGU6YSxuZXdQYXNzd29yZDpifSl9O2suUGE9ZnVuY3Rpb24oYSl7cmV0dXJuIE4odGhpcyx3aix7b29iQ29kZTphfSl9O2suZmI9ZnVuY3Rpb24oYSl7cmV0dXJuIE4odGhpcyx4aix7b29iQ29kZTphfSl9O1xudmFyIHhqPXtlbmRwb2ludDpcInNldEFjY291bnRJbmZvXCIsQTp1aixZOlwiZW1haWxcIixDOiEwfSx3aj17ZW5kcG9pbnQ6XCJyZXNldFBhc3N3b3JkXCIsQTp1aixHOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVxdWVzdFR5cGU7aWYoIWJ8fCFhLmVtYWlsJiZcIkVNQUlMX1NJR05JTlwiIT1iJiZcIlZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMXCIhPWIpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt9LEM6ITB9LHlqPXtlbmRwb2ludDpcInNpZ251cE5ld1VzZXJcIixBOmZ1bmN0aW9uKGEpe1RpKGEpO2lmKCFhLnBhc3N3b3JkKXRocm93IG5ldyB0KFwid2Vhay1wYXNzd29yZFwiKTt9LEc6TyxVOiEwLEM6ITB9LFdpPXtlbmRwb2ludDpcImNyZWF0ZUF1dGhVcmlcIixDOiEwfSx6aj17ZW5kcG9pbnQ6XCJkZWxldGVBY2NvdW50XCIsTTpbXCJpZFRva2VuXCJdfSxtaj17ZW5kcG9pbnQ6XCJzZXRBY2NvdW50SW5mb1wiLE06W1wiaWRUb2tlblwiLFwiZGVsZXRlUHJvdmlkZXJcIl0sQTpmdW5jdGlvbihhKXtpZihcImFycmF5XCIhPVxubGEoYS5kZWxldGVQcm92aWRlcikpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt9fSxXZz17ZW5kcG9pbnQ6XCJlbWFpbExpbmtTaWduaW5cIixNOltcImVtYWlsXCIsXCJvb2JDb2RlXCJdLEE6VGksRzpPLFU6ITAsQzohMH0sWWc9e2VuZHBvaW50OlwiZW1haWxMaW5rU2lnbmluXCIsTTpbXCJpZFRva2VuXCIsXCJlbWFpbFwiLFwib29iQ29kZVwiXSxBOlRpLEc6TyxVOiEwfSxBaj17ZW5kcG9pbnQ6XCJhY2NvdW50cy9tZmFFbnJvbGxtZW50OmZpbmFsaXplXCIsTTpbXCJpZFRva2VuXCIsXCJwaG9uZVZlcmlmaWNhdGlvbkluZm9cIl0sQTpqaixHOk8sQzohMCxMYTohMH0sQmo9e2VuZHBvaW50OlwiYWNjb3VudHMvbWZhU2lnbkluOmZpbmFsaXplXCIsTTpbXCJtZmFQZW5kaW5nQ3JlZGVudGlhbFwiLFwicGhvbmVWZXJpZmljYXRpb25JbmZvXCJdLEE6amosRzpPLEM6ITAsTGE6ITB9LENqPXtlbmRwb2ludDpcImdldEFjY291bnRJbmZvXCJ9LGRqPXtlbmRwb2ludDpcImdldE9vYkNvbmZpcm1hdGlvbkNvZGVcIixNOltcInJlcXVlc3RUeXBlXCJdLFxuQTpmdW5jdGlvbihhKXtpZihcIkVNQUlMX1NJR05JTlwiIT1hLnJlcXVlc3RUeXBlKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7VGkoYSl9LFk6XCJlbWFpbFwiLEM6ITB9LGVqPXtlbmRwb2ludDpcImdldE9vYkNvbmZpcm1hdGlvbkNvZGVcIixNOltcImlkVG9rZW5cIixcInJlcXVlc3RUeXBlXCJdLEE6ZnVuY3Rpb24oYSl7aWYoXCJWRVJJRllfRU1BSUxcIiE9YS5yZXF1ZXN0VHlwZSl0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO30sWTpcImVtYWlsXCIsQzohMH0sZmo9e2VuZHBvaW50OlwiZ2V0T29iQ29uZmlybWF0aW9uQ29kZVwiLE06W1wiaWRUb2tlblwiLFwibmV3RW1haWxcIixcInJlcXVlc3RUeXBlXCJdLEE6ZnVuY3Rpb24oYSl7aWYoXCJWRVJJRllfQU5EX0NIQU5HRV9FTUFJTFwiIT1hLnJlcXVlc3RUeXBlKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7fSxZOlwiZW1haWxcIixDOiEwfSxjaj17ZW5kcG9pbnQ6XCJnZXRPb2JDb25maXJtYXRpb25Db2RlXCIsTTpbXCJyZXF1ZXN0VHlwZVwiXSxBOmZ1bmN0aW9uKGEpe2lmKFwiUEFTU1dPUkRfUkVTRVRcIiE9XG5hLnJlcXVlc3RUeXBlKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7VGkoYSl9LFk6XCJlbWFpbFwiLEM6ITB9LFlpPXtoYjohMCxlbmRwb2ludDpcImdldFByb2plY3RDb25maWdcIixSYjpcIkdFVFwifSxEaj17aGI6ITAsZW5kcG9pbnQ6XCJnZXRSZWNhcHRjaGFQYXJhbVwiLFJiOlwiR0VUXCIsRzpmdW5jdGlvbihhKXtpZighYS5yZWNhcHRjaGFTaXRlS2V5KXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7fX0sdmo9e2VuZHBvaW50OlwicmVzZXRQYXNzd29yZFwiLEE6dWosWTpcImVtYWlsXCIsQzohMH0sZ2o9e2VuZHBvaW50Olwic2VuZFZlcmlmaWNhdGlvbkNvZGVcIixNOltcInBob25lTnVtYmVyXCIsXCJyZWNhcHRjaGFUb2tlblwiXSxZOlwic2Vzc2lvbkluZm9cIixDOiEwfSxhaj17ZW5kcG9pbnQ6XCJzZXRBY2NvdW50SW5mb1wiLE06W1wiaWRUb2tlblwiXSxBOlVpLFU6ITB9LFpnPXtlbmRwb2ludDpcInNldEFjY291bnRJbmZvXCIsTTpbXCJpZFRva2VuXCJdLEE6ZnVuY3Rpb24oYSl7VWkoYSk7aWYoIWEucGFzc3dvcmQpdGhyb3cgbmV3IHQoXCJ3ZWFrLXBhc3N3b3JkXCIpO1xufSxHOk8sVTohMH0sJGk9e2VuZHBvaW50Olwic2lnbnVwTmV3VXNlclwiLEc6TyxVOiEwLEM6ITB9LGlqPXtlbmRwb2ludDpcImFjY291bnRzL21mYUVucm9sbG1lbnQ6c3RhcnRcIixNOltcImlkVG9rZW5cIixcInBob25lRW5yb2xsbWVudEluZm9cIl0sQTpmdW5jdGlvbihhKXtpZighYS5waG9uZUVucm9sbG1lbnRJbmZvKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7aWYoIWEucGhvbmVFbnJvbGxtZW50SW5mby5waG9uZU51bWJlcil0aHJvdyBuZXcgdChcIm1pc3NpbmctcGhvbmUtbnVtYmVyXCIpO2lmKCFhLnBob25lRW5yb2xsbWVudEluZm8ucmVjYXB0Y2hhVG9rZW4pdGhyb3cgbmV3IHQoXCJtaXNzaW5nLWFwcC1jcmVkZW50aWFsXCIpO30sRzpmdW5jdGlvbihhKXtpZighYS5waG9uZVNlc3Npb25JbmZvfHwhYS5waG9uZVNlc3Npb25JbmZvLnNlc3Npb25JbmZvKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7fSxDOiEwLExhOiEwfSxraj17ZW5kcG9pbnQ6XCJhY2NvdW50cy9tZmFTaWduSW46c3RhcnRcIixcbk06W1wibWZhUGVuZGluZ0NyZWRlbnRpYWxcIixcIm1mYUVucm9sbG1lbnRJZFwiLFwicGhvbmVTaWduSW5JbmZvXCJdLEE6ZnVuY3Rpb24oYSl7aWYoIWEucGhvbmVTaWduSW5JbmZvfHwhYS5waG9uZVNpZ25JbkluZm8ucmVjYXB0Y2hhVG9rZW4pdGhyb3cgbmV3IHQoXCJtaXNzaW5nLWFwcC1jcmVkZW50aWFsXCIpO30sRzpmdW5jdGlvbihhKXtpZighYS5waG9uZVJlc3BvbnNlSW5mb3x8IWEucGhvbmVSZXNwb25zZUluZm8uc2Vzc2lvbkluZm8pdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt9LEM6ITAsTGE6ITB9LHJqPXtlbmRwb2ludDpcInZlcmlmeUFzc2VydGlvblwiLEE6bmosV2E6b2osRzpwaixVOiEwLEM6ITB9LHRqPXtlbmRwb2ludDpcInZlcmlmeUFzc2VydGlvblwiLEE6bmosV2E6b2osRzpmdW5jdGlvbihhKXtpZihhLmVycm9yTWVzc2FnZSYmXCJVU0VSX05PVF9GT1VORFwiPT1hLmVycm9yTWVzc2FnZSl0aHJvdyBuZXcgdChcInVzZXItbm90LWZvdW5kXCIpO2lmKGEuZXJyb3JNZXNzYWdlKXRocm93IHFqKGEuZXJyb3JNZXNzYWdlKTtcbk8oYSl9LFU6ITAsQzohMH0sc2o9e2VuZHBvaW50OlwidmVyaWZ5QXNzZXJ0aW9uXCIsQTpmdW5jdGlvbihhKXtuaihhKTtpZighYS5pZFRva2VuKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7fSxXYTpvaixHOnBqLFU6ITB9LEVqPXtlbmRwb2ludDpcInZlcmlmeUN1c3RvbVRva2VuXCIsQTpmdW5jdGlvbihhKXtpZighYS50b2tlbil0aHJvdyBuZXcgdChcImludmFsaWQtY3VzdG9tLXRva2VuXCIpO30sRzpPLFU6ITAsQzohMH0sWGc9e2VuZHBvaW50OlwidmVyaWZ5UGFzc3dvcmRcIixBOmZ1bmN0aW9uKGEpe1RpKGEpO2lmKCFhLnBhc3N3b3JkKXRocm93IG5ldyB0KFwid3JvbmctcGFzc3dvcmRcIik7fSxHOk8sVTohMCxDOiEwfSxoaj17ZW5kcG9pbnQ6XCJ2ZXJpZnlQaG9uZU51bWJlclwiLEE6WmksRzpPLEM6ITB9LGVoPXtlbmRwb2ludDpcInZlcmlmeVBob25lTnVtYmVyXCIsQTpmdW5jdGlvbihhKXtpZighYS5pZFRva2VuKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7WmkoYSl9LFxuRzpmdW5jdGlvbihhKXtpZihhLnRlbXBvcmFyeVByb29mKXRocm93IGEuY29kZT1cImNyZWRlbnRpYWwtYWxyZWFkeS1pbi11c2VcIix2aChhKTtPKGEpfX0sZmg9e0ViOntVU0VSX05PVF9GT1VORDpcInVzZXItbm90LWZvdW5kXCJ9LGVuZHBvaW50OlwidmVyaWZ5UGhvbmVOdW1iZXJcIixBOlppLEc6TyxDOiEwfSxGaj17ZW5kcG9pbnQ6XCJhY2NvdW50cy9tZmFFbnJvbGxtZW50OndpdGhkcmF3XCIsTTpbXCJpZFRva2VuXCIsXCJtZmFFbnJvbGxtZW50SWRcIl0sRzpmdW5jdGlvbihhKXtpZighIWFbQWddXiEhYS5yZWZyZXNoVG9rZW4pdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiKTt9LEM6ITAsTGE6ITB9O1xuZnVuY3Rpb24gTihhLGIsYyl7aWYoIWpmKGMsYi5NKSlyZXR1cm4gRShuZXcgdChcImludGVybmFsLWVycm9yXCIpKTt2YXIgZD0hIWIuTGEsZT1iLlJifHxcIlBPU1RcIixmO3JldHVybiBEKGMpLnRoZW4oYi5BKS50aGVuKGZ1bmN0aW9uKCl7Yi5VJiYoYy5yZXR1cm5TZWN1cmVUb2tlbj0hMCk7Yi5DJiZhLmImJlwidW5kZWZpbmVkXCI9PT10eXBlb2YgYy50ZW5hbnRJZCYmKGMudGVuYW50SWQ9YS5iKTtyZXR1cm4gZD9TaShhLGEubCxiLmVuZHBvaW50LGUsYyxiLkViLGIuaGJ8fCExKTpTaShhLGEuaCxiLmVuZHBvaW50LGUsYyxiLkViLGIuaGJ8fCExKX0pLnRoZW4oZnVuY3Rpb24oZyl7Zj1nO3JldHVybiBiLldhP2IuV2EoYyxmKTpmfSkudGhlbihiLkcpLnRoZW4oZnVuY3Rpb24oKXtpZighYi5ZKXJldHVybiBmO2lmKCEoYi5ZIGluIGYpKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7cmV0dXJuIGZbYi5ZXX0pfVxuZnVuY3Rpb24gcWooYSl7cmV0dXJuIFJpKHtlcnJvcjp7ZXJyb3JzOlt7bWVzc2FnZTphfV0sY29kZTo0MDAsbWVzc2FnZTphfX0pfVxuZnVuY3Rpb24gUmkoYSxiKXt2YXIgYz0oYS5lcnJvciYmYS5lcnJvci5lcnJvcnMmJmEuZXJyb3IuZXJyb3JzWzBdfHx7fSkucmVhc29ufHxcIlwiO3ZhciBkPXtrZXlJbnZhbGlkOlwiaW52YWxpZC1hcGkta2V5XCIsaXBSZWZlcmVyQmxvY2tlZDpcImFwcC1ub3QtYXV0aG9yaXplZFwifTtpZihjPWRbY10/bmV3IHQoZFtjXSk6bnVsbClyZXR1cm4gYztjPWEuZXJyb3ImJmEuZXJyb3IubWVzc2FnZXx8XCJcIjtkPXtJTlZBTElEX0NVU1RPTV9UT0tFTjpcImludmFsaWQtY3VzdG9tLXRva2VuXCIsQ1JFREVOVElBTF9NSVNNQVRDSDpcImN1c3RvbS10b2tlbi1taXNtYXRjaFwiLE1JU1NJTkdfQ1VTVE9NX1RPS0VOOlwiaW50ZXJuYWwtZXJyb3JcIixJTlZBTElEX0lERU5USUZJRVI6XCJpbnZhbGlkLWVtYWlsXCIsTUlTU0lOR19DT05USU5VRV9VUkk6XCJpbnRlcm5hbC1lcnJvclwiLElOVkFMSURfRU1BSUw6XCJpbnZhbGlkLWVtYWlsXCIsSU5WQUxJRF9QQVNTV09SRDpcIndyb25nLXBhc3N3b3JkXCIsVVNFUl9ESVNBQkxFRDpcInVzZXItZGlzYWJsZWRcIixcbk1JU1NJTkdfUEFTU1dPUkQ6XCJpbnRlcm5hbC1lcnJvclwiLEVNQUlMX0VYSVNUUzpcImVtYWlsLWFscmVhZHktaW4tdXNlXCIsUEFTU1dPUkRfTE9HSU5fRElTQUJMRUQ6XCJvcGVyYXRpb24tbm90LWFsbG93ZWRcIixJTlZBTElEX0lEUF9SRVNQT05TRTpcImludmFsaWQtY3JlZGVudGlhbFwiLElOVkFMSURfUEVORElOR19UT0tFTjpcImludmFsaWQtY3JlZGVudGlhbFwiLEZFREVSQVRFRF9VU0VSX0lEX0FMUkVBRFlfTElOS0VEOlwiY3JlZGVudGlhbC1hbHJlYWR5LWluLXVzZVwiLE1JU1NJTkdfT1JfSU5WQUxJRF9OT05DRTpcIm1pc3Npbmctb3ItaW52YWxpZC1ub25jZVwiLElOVkFMSURfTUVTU0FHRV9QQVlMT0FEOlwiaW52YWxpZC1tZXNzYWdlLXBheWxvYWRcIixJTlZBTElEX1JFQ0lQSUVOVF9FTUFJTDpcImludmFsaWQtcmVjaXBpZW50LWVtYWlsXCIsSU5WQUxJRF9TRU5ERVI6XCJpbnZhbGlkLXNlbmRlclwiLEVNQUlMX05PVF9GT1VORDpcInVzZXItbm90LWZvdW5kXCIsUkVTRVRfUEFTU1dPUkRfRVhDRUVEX0xJTUlUOlwidG9vLW1hbnktcmVxdWVzdHNcIixcbkVYUElSRURfT09CX0NPREU6XCJleHBpcmVkLWFjdGlvbi1jb2RlXCIsSU5WQUxJRF9PT0JfQ09ERTpcImludmFsaWQtYWN0aW9uLWNvZGVcIixNSVNTSU5HX09PQl9DT0RFOlwiaW50ZXJuYWwtZXJyb3JcIixJTlZBTElEX1BST1ZJREVSX0lEOlwiaW52YWxpZC1wcm92aWRlci1pZFwiLENSRURFTlRJQUxfVE9PX09MRF9MT0dJTl9BR0FJTjpcInJlcXVpcmVzLXJlY2VudC1sb2dpblwiLElOVkFMSURfSURfVE9LRU46XCJpbnZhbGlkLXVzZXItdG9rZW5cIixUT0tFTl9FWFBJUkVEOlwidXNlci10b2tlbi1leHBpcmVkXCIsVVNFUl9OT1RfRk9VTkQ6XCJ1c2VyLXRva2VuLWV4cGlyZWRcIixDT1JTX1VOU1VQUE9SVEVEOlwiY29ycy11bnN1cHBvcnRlZFwiLERZTkFNSUNfTElOS19OT1RfQUNUSVZBVEVEOlwiZHluYW1pYy1saW5rLW5vdC1hY3RpdmF0ZWRcIixJTlZBTElEX0FQUF9JRDpcImludmFsaWQtYXBwLWlkXCIsVE9PX01BTllfQVRURU1QVFNfVFJZX0xBVEVSOlwidG9vLW1hbnktcmVxdWVzdHNcIixXRUFLX1BBU1NXT1JEOlwid2Vhay1wYXNzd29yZFwiLFxuT1BFUkFUSU9OX05PVF9BTExPV0VEOlwib3BlcmF0aW9uLW5vdC1hbGxvd2VkXCIsVVNFUl9DQU5DRUxMRUQ6XCJ1c2VyLWNhbmNlbGxlZFwiLENBUFRDSEFfQ0hFQ0tfRkFJTEVEOlwiY2FwdGNoYS1jaGVjay1mYWlsZWRcIixJTlZBTElEX0FQUF9DUkVERU5USUFMOlwiaW52YWxpZC1hcHAtY3JlZGVudGlhbFwiLElOVkFMSURfQ09ERTpcImludmFsaWQtdmVyaWZpY2F0aW9uLWNvZGVcIixJTlZBTElEX1BIT05FX05VTUJFUjpcImludmFsaWQtcGhvbmUtbnVtYmVyXCIsSU5WQUxJRF9TRVNTSU9OX0lORk86XCJpbnZhbGlkLXZlcmlmaWNhdGlvbi1pZFwiLElOVkFMSURfVEVNUE9SQVJZX1BST09GOlwiaW52YWxpZC1jcmVkZW50aWFsXCIsTUlTU0lOR19BUFBfQ1JFREVOVElBTDpcIm1pc3NpbmctYXBwLWNyZWRlbnRpYWxcIixNSVNTSU5HX0NPREU6XCJtaXNzaW5nLXZlcmlmaWNhdGlvbi1jb2RlXCIsTUlTU0lOR19QSE9ORV9OVU1CRVI6XCJtaXNzaW5nLXBob25lLW51bWJlclwiLE1JU1NJTkdfU0VTU0lPTl9JTkZPOlwibWlzc2luZy12ZXJpZmljYXRpb24taWRcIixcblFVT1RBX0VYQ0VFREVEOlwicXVvdGEtZXhjZWVkZWRcIixTRVNTSU9OX0VYUElSRUQ6XCJjb2RlLWV4cGlyZWRcIixSRUpFQ1RFRF9DUkVERU5USUFMOlwicmVqZWN0ZWQtY3JlZGVudGlhbFwiLElOVkFMSURfQ09OVElOVUVfVVJJOlwiaW52YWxpZC1jb250aW51ZS11cmlcIixNSVNTSU5HX0FORFJPSURfUEFDS0FHRV9OQU1FOlwibWlzc2luZy1hbmRyb2lkLXBrZy1uYW1lXCIsTUlTU0lOR19JT1NfQlVORExFX0lEOlwibWlzc2luZy1pb3MtYnVuZGxlLWlkXCIsVU5BVVRIT1JJWkVEX0RPTUFJTjpcInVuYXV0aG9yaXplZC1jb250aW51ZS11cmlcIixJTlZBTElEX0RZTkFNSUNfTElOS19ET01BSU46XCJpbnZhbGlkLWR5bmFtaWMtbGluay1kb21haW5cIixJTlZBTElEX09BVVRIX0NMSUVOVF9JRDpcImludmFsaWQtb2F1dGgtY2xpZW50LWlkXCIsSU5WQUxJRF9DRVJUX0hBU0g6XCJpbnZhbGlkLWNlcnQtaGFzaFwiLFVOU1VQUE9SVEVEX1RFTkFOVF9PUEVSQVRJT046XCJ1bnN1cHBvcnRlZC10ZW5hbnQtb3BlcmF0aW9uXCIsXG5JTlZBTElEX1RFTkFOVF9JRDpcImludmFsaWQtdGVuYW50LWlkXCIsVEVOQU5UX0lEX01JU01BVENIOlwidGVuYW50LWlkLW1pc21hdGNoXCIsQURNSU5fT05MWV9PUEVSQVRJT046XCJhZG1pbi1yZXN0cmljdGVkLW9wZXJhdGlvblwiLElOVkFMSURfTUZBX1BFTkRJTkdfQ1JFREVOVElBTDpcImludmFsaWQtbXVsdGktZmFjdG9yLXNlc3Npb25cIixNRkFfRU5ST0xMTUVOVF9OT1RfRk9VTkQ6XCJtdWx0aS1mYWN0b3ItaW5mby1ub3QtZm91bmRcIixNSVNTSU5HX01GQV9QRU5ESU5HX0NSRURFTlRJQUw6XCJtaXNzaW5nLW11bHRpLWZhY3Rvci1zZXNzaW9uXCIsTUlTU0lOR19NRkFfRU5ST0xMTUVOVF9JRDpcIm1pc3NpbmctbXVsdGktZmFjdG9yLWluZm9cIixFTUFJTF9DSEFOR0VfTkVFRFNfVkVSSUZJQ0FUSU9OOlwiZW1haWwtY2hhbmdlLW5lZWRzLXZlcmlmaWNhdGlvblwiLFNFQ09ORF9GQUNUT1JfRVhJU1RTOlwic2Vjb25kLWZhY3Rvci1hbHJlYWR5LWluLXVzZVwiLFNFQ09ORF9GQUNUT1JfTElNSVRfRVhDRUVERUQ6XCJtYXhpbXVtLXNlY29uZC1mYWN0b3ItY291bnQtZXhjZWVkZWRcIixcblVOU1VQUE9SVEVEX0ZJUlNUX0ZBQ1RPUjpcInVuc3VwcG9ydGVkLWZpcnN0LWZhY3RvclwiLFVOVkVSSUZJRURfRU1BSUw6XCJ1bnZlcmlmaWVkLWVtYWlsXCJ9O3ooZCxifHx7fSk7Yj0oYj1jLm1hdGNoKC9eW15cXHNdK1xccyo6XFxzKihbXFxzXFxTXSopJC8pKSYmMTxiLmxlbmd0aD9iWzFdOnZvaWQgMDtmb3IodmFyIGUgaW4gZClpZigwPT09Yy5pbmRleE9mKGUpKXJldHVybiBuZXcgdChkW2VdLGIpOyFiJiZhJiYoYj1SZShhKSk7cmV0dXJuIG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixiKX07ZnVuY3Rpb24gR2ooYSl7dGhpcy5iPWE7dGhpcy5hPW51bGw7dGhpcy5uYj1Iaih0aGlzKX1cbmZ1bmN0aW9uIEhqKGEpe3JldHVybiBJaigpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEIoZnVuY3Rpb24oYixjKXtKKFwiZ2FwaS5pZnJhbWVzLmdldENvbnRleHRcIikoKS5vcGVuKHt3aGVyZTpkb2N1bWVudC5ib2R5LHVybDphLmIsbWVzc2FnZUhhbmRsZXJzRmlsdGVyOkooXCJnYXBpLmlmcmFtZXMuQ1JPU1NfT1JJR0lOX0lGUkFNRVNfRklMVEVSXCIpLGF0dHJpYnV0ZXM6e3N0eWxlOntwb3NpdGlvbjpcImFic29sdXRlXCIsdG9wOlwiLTEwMHB4XCIsd2lkdGg6XCIxcHhcIixoZWlnaHQ6XCIxcHhcIn19LGRvbnRjbGVhcjohMH0sZnVuY3Rpb24oZCl7ZnVuY3Rpb24gZSgpe2NsZWFyVGltZW91dChmKTtiKCl9YS5hPWQ7YS5hLnJlc3R5bGUoe3NldEhpZGVPbkxlYXZlOiExfSk7dmFyIGY9c2V0VGltZW91dChmdW5jdGlvbigpe2MoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIpKX0sSmouZ2V0KCkpO2QucGluZyhlKS50aGVuKGUsZnVuY3Rpb24oKXtjKEVycm9yKFwiTmV0d29yayBFcnJvclwiKSl9KX0pfSl9KX1cbmZ1bmN0aW9uIEtqKGEsYil7cmV0dXJuIGEubmIudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgQihmdW5jdGlvbihjKXthLmEuc2VuZChiLnR5cGUsYixjLEooXCJnYXBpLmlmcmFtZXMuQ1JPU1NfT1JJR0lOX0lGUkFNRVNfRklMVEVSXCIpKX0pfSl9ZnVuY3Rpb24gTGooYSxiKXthLm5iLnRoZW4oZnVuY3Rpb24oKXthLmEucmVnaXN0ZXIoXCJhdXRoRXZlbnRcIixiLEooXCJnYXBpLmlmcmFtZXMuQ1JPU1NfT1JJR0lOX0lGUkFNRVNfRklMVEVSXCIpKX0pfXZhciBNaj1uZXcgb2IocGIsXCJodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9hcGkuanM/b25sb2FkPSV7b25sb2FkfVwiKSxOaj1uZXcgV2UoM0U0LDZFNCksSmo9bmV3IFdlKDVFMywxNUUzKSxPaj1udWxsO1xuZnVuY3Rpb24gSWooKXtyZXR1cm4gT2o/T2o6T2o9KG5ldyBCKGZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYygpe1ZlKCk7SihcImdhcGkubG9hZFwiKShcImdhcGkuaWZyYW1lc1wiLHtjYWxsYmFjazphLG9udGltZW91dDpmdW5jdGlvbigpe1ZlKCk7YihFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpfSx0aW1lb3V0Ok5qLmdldCgpfSl9aWYoSihcImdhcGkuaWZyYW1lcy5JZnJhbWVcIikpYSgpO2Vsc2UgaWYoSihcImdhcGkubG9hZFwiKSljKCk7ZWxzZXt2YXIgZD1cIl9faWZyYW1lZmNiXCIrTWF0aC5mbG9vcigxRTYqTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoKTtsW2RdPWZ1bmN0aW9uKCl7SihcImdhcGkubG9hZFwiKT9jKCk6YihFcnJvcihcIk5ldHdvcmsgRXJyb3JcIikpfTtkPXhiKE1qLHtvbmxvYWQ6ZH0pO0QoeGkoZCkpLm8oZnVuY3Rpb24oKXtiKEVycm9yKFwiTmV0d29yayBFcnJvclwiKSl9KX19KSkubyhmdW5jdGlvbihhKXtPaj1udWxsO3Rocm93IGE7fSl9O2Z1bmN0aW9uIFBqKGEsYixjKXt0aGlzLmk9YTt0aGlzLmc9Yjt0aGlzLmg9Yzt0aGlzLmY9bnVsbDt0aGlzLmE9JGQodGhpcy5pLFwiL19fL2F1dGgvaWZyYW1lXCIpO0godGhpcy5hLFwiYXBpS2V5XCIsdGhpcy5nKTtIKHRoaXMuYSxcImFwcE5hbWVcIix0aGlzLmgpO3RoaXMuYj1udWxsO3RoaXMuYz1bXX1Qai5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt0aGlzLmY/SCh0aGlzLmEsXCJ2XCIsdGhpcy5mKTpmZSh0aGlzLmEuYSxcInZcIik7dGhpcy5iP0godGhpcy5hLFwiZWlkXCIsdGhpcy5iKTpmZSh0aGlzLmEuYSxcImVpZFwiKTt0aGlzLmMubGVuZ3RoP0godGhpcy5hLFwiZndcIix0aGlzLmMuam9pbihcIixcIikpOmZlKHRoaXMuYS5hLFwiZndcIik7cmV0dXJuIHRoaXMuYS50b1N0cmluZygpfTtmdW5jdGlvbiBRaihhLGIsYyxkLGUpe3RoaXMucz1hO3RoaXMubT1iO3RoaXMuYz1jO3RoaXMudT1kO3RoaXMuaT10aGlzLmc9dGhpcy5sPW51bGw7dGhpcy5hPWU7dGhpcy5oPXRoaXMuZj1udWxsfVxuUWoucHJvdG90eXBlLnViPWZ1bmN0aW9uKGEpe3RoaXMuaD1hO3JldHVybiB0aGlzfTtcblFqLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBhPSRkKHRoaXMucyxcIi9fXy9hdXRoL2hhbmRsZXJcIik7SChhLFwiYXBpS2V5XCIsdGhpcy5tKTtIKGEsXCJhcHBOYW1lXCIsdGhpcy5jKTtIKGEsXCJhdXRoVHlwZVwiLHRoaXMudSk7aWYodGhpcy5hLmlzT0F1dGhQcm92aWRlcil7dmFyIGI9dGhpcy5hO3RyeXt2YXIgYz1maXJlYmFzZS5hcHAodGhpcy5jKS5hdXRoKCkuamEoKX1jYXRjaChoKXtjPW51bGx9Yi5rYj1jO0goYSxcInByb3ZpZGVySWRcIix0aGlzLmEucHJvdmlkZXJJZCk7Yj10aGlzLmE7Yz1TZShiLkZiKTtmb3IodmFyIGQgaW4gYyljW2RdPWNbZF0udG9TdHJpbmcoKTtkPWIuT2M7Yz1sYihjKTtmb3IodmFyIGU9MDtlPGQubGVuZ3RoO2UrKyl7dmFyIGY9ZFtlXTtmIGluIGMmJmRlbGV0ZSBjW2ZdfWIubGImJmIua2ImJiFjW2IubGJdJiYoY1tiLmxiXT1iLmtiKTtrYihjKXx8SChhLFwiY3VzdG9tUGFyYW1ldGVyc1wiLFJlKGMpKX1cImZ1bmN0aW9uXCI9PT10eXBlb2YgdGhpcy5hLk5iJiZcbihiPXRoaXMuYS5OYigpLGIubGVuZ3RoJiZIKGEsXCJzY29wZXNcIixiLmpvaW4oXCIsXCIpKSk7dGhpcy5sP0goYSxcInJlZGlyZWN0VXJsXCIsdGhpcy5sKTpmZShhLmEsXCJyZWRpcmVjdFVybFwiKTt0aGlzLmc/SChhLFwiZXZlbnRJZFwiLHRoaXMuZyk6ZmUoYS5hLFwiZXZlbnRJZFwiKTt0aGlzLmk/SChhLFwidlwiLHRoaXMuaSk6ZmUoYS5hLFwidlwiKTtpZih0aGlzLmIpZm9yKHZhciBnIGluIHRoaXMuYil0aGlzLmIuaGFzT3duUHJvcGVydHkoZykmJiFZZChhLGcpJiZIKGEsZyx0aGlzLmJbZ10pO3RoaXMuaD9IKGEsXCJ0aWRcIix0aGlzLmgpOmZlKGEuYSxcInRpZFwiKTt0aGlzLmY/SChhLFwiZWlkXCIsdGhpcy5mKTpmZShhLmEsXCJlaWRcIik7Zz1Saih0aGlzLmMpO2cubGVuZ3RoJiZIKGEsXCJmd1wiLGcuam9pbihcIixcIikpO3JldHVybiBhLnRvU3RyaW5nKCl9O2Z1bmN0aW9uIFJqKGEpe3RyeXtyZXR1cm4gZmlyZWJhc2UuYXBwKGEpLmF1dGgoKS5FYSgpfWNhdGNoKGIpe3JldHVybltdfX1cbmZ1bmN0aW9uIFNqKGEsYixjLGQsZSl7dGhpcy51PWE7dGhpcy5mPWI7dGhpcy5iPWM7dGhpcy5jPWR8fG51bGw7dGhpcy5oPWV8fG51bGw7dGhpcy5tPXRoaXMucz10aGlzLnc9bnVsbDt0aGlzLmc9W107dGhpcy5sPXRoaXMuYT1udWxsfVxuZnVuY3Rpb24gVGooYSl7dmFyIGI9b2UoKTtyZXR1cm4gWGkoYSkudGhlbihmdW5jdGlvbihjKXthOnt2YXIgZD1aZChiKSxlPWQuZjtkPWQuYjtmb3IodmFyIGY9MDtmPGMubGVuZ3RoO2YrKyl7dmFyIGc9Y1tmXTt2YXIgaD1kO3ZhciBtPWU7MD09Zy5pbmRleE9mKFwiY2hyb21lLWV4dGVuc2lvbjovL1wiKT9oPVpkKGcpLmI9PWgmJlwiY2hyb21lLWV4dGVuc2lvblwiPT1tOlwiaHR0cFwiIT1tJiZcImh0dHBzXCIhPW0/aD0hMTp6ZS50ZXN0KGcpP2g9aD09ZzooZz1nLnNwbGl0KFwiLlwiKS5qb2luKFwiXFxcXC5cIiksaD0obmV3IFJlZ0V4cChcIl4oLitcXFxcLlwiK2crXCJ8XCIrZytcIikkXCIsXCJpXCIpKS50ZXN0KGgpKTtpZihoKXtjPSEwO2JyZWFrIGF9fWM9ITF9aWYoIWMpdGhyb3cgbmV3IHRoKG9lKCkpO30pfVxuZnVuY3Rpb24gVWooYSl7aWYoYS5sKXJldHVybiBhLmw7YS5sPUJlKCkudGhlbihmdW5jdGlvbigpe2lmKCFhLnMpe3ZhciBiPWEuYyxjPWEuaCxkPVJqKGEuYiksZT1uZXcgUGooYS51LGEuZixhLmIpO2UuZj1iO2UuYj1jO2UuYz1YYShkfHxbXSk7YS5zPWUudG9TdHJpbmcoKX1hLmk9bmV3IEdqKGEucyk7VmooYSl9KTtyZXR1cm4gYS5sfWs9U2oucHJvdG90eXBlO2suTGI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW5ldyB0KFwicG9wdXAtY2xvc2VkLWJ5LXVzZXJcIiksZT1uZXcgdChcIndlYi1zdG9yYWdlLXVuc3VwcG9ydGVkXCIpLGY9dGhpcyxnPSExO3JldHVybiB0aGlzLmthKCkudGhlbihmdW5jdGlvbigpe1dqKGYpLnRoZW4oZnVuY3Rpb24oaCl7aHx8KGEmJnZlKGEpLGIoZSksZz0hMCl9KX0pLm8oZnVuY3Rpb24oKXt9KS50aGVuKGZ1bmN0aW9uKCl7aWYoIWcpcmV0dXJuIHllKGEpfSkudGhlbihmdW5jdGlvbigpe2lmKCFnKXJldHVybiBCZChjKS50aGVuKGZ1bmN0aW9uKCl7YihkKX0pfSl9O1xuay5VYj1mdW5jdGlvbigpe3ZhciBhPUkoKTtyZXR1cm4hUWUoYSkmJiFVZShhKX07ay5RYj1mdW5jdGlvbigpe3JldHVybiExfTtcbmsuSmI9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoKXtpZighYSlyZXR1cm4gRShuZXcgdChcInBvcHVwLWJsb2NrZWRcIikpO2lmKGcmJiFRZSgpKXJldHVybiB0aGlzLmthKCkubyhmdW5jdGlvbihwKXt2ZShhKTtlKHApfSksZCgpLEQoKTt0aGlzLmF8fCh0aGlzLmE9VGooWGoodGhpcykpKTt2YXIgbT10aGlzO3JldHVybiB0aGlzLmEudGhlbihmdW5jdGlvbigpe3ZhciBwPW0ua2EoKS5vKGZ1bmN0aW9uKHYpe3ZlKGEpO2Uodik7dGhyb3cgdjt9KTtkKCk7cmV0dXJuIHB9KS50aGVuKGZ1bmN0aW9uKCl7bmgoYyk7aWYoIWcpe3ZhciBwPVlqKG0udSxtLmYsbS5iLGIsYyxudWxsLGYsbS5jLHZvaWQgMCxtLmgsaCk7cGUocCxhKX19KS5vKGZ1bmN0aW9uKHApe1wiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI9PXAuY29kZSYmKG0uYT1udWxsKTt0aHJvdyBwO30pfTtcbmZ1bmN0aW9uIFhqKGEpe2EubXx8KGEudz1hLmM/TGUoYS5jLFJqKGEuYikpOm51bGwsYS5tPW5ldyBFaShhLmYsQWEoYS5oKSxhLncpKTtyZXR1cm4gYS5tfWsuS2I9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5hfHwodGhpcy5hPVRqKFhqKHRoaXMpKSk7dmFyIGU9dGhpcztyZXR1cm4gdGhpcy5hLnRoZW4oZnVuY3Rpb24oKXtuaChiKTt2YXIgZj1ZaihlLnUsZS5mLGUuYixhLGIsb2UoKSxjLGUuYyx2b2lkIDAsZS5oLGQpO3BlKGYpfSkubyhmdW5jdGlvbihmKXtcImF1dGgvbmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiPT1mLmNvZGUmJihlLmE9bnVsbCk7dGhyb3cgZjt9KX07ay5rYT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIFVqKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5pLm5ifSkubyhmdW5jdGlvbigpe2EuYT1udWxsO3Rocm93IG5ldyB0KFwibmV0d29yay1yZXF1ZXN0LWZhaWxlZFwiKTt9KX07ay5YYj1mdW5jdGlvbigpe3JldHVybiEwfTtcbmZ1bmN0aW9uIFlqKGEsYixjLGQsZSxmLGcsaCxtLHAsdil7YT1uZXcgUWooYSxiLGMsZCxlKTthLmw9ZjthLmc9ZzthLmk9aDthLmI9bGIobXx8bnVsbCk7YS5mPXA7cmV0dXJuIGEudWIodikudG9TdHJpbmcoKX1mdW5jdGlvbiBWaihhKXtpZighYS5pKXRocm93IEVycm9yKFwiSWZjSGFuZGxlciBtdXN0IGJlIGluaXRpYWxpemVkIVwiKTtMaihhLmksZnVuY3Rpb24oYil7dmFyIGM9e307aWYoYiYmYi5hdXRoRXZlbnQpe3ZhciBkPSExO2I9cGgoYi5hdXRoRXZlbnQpO2ZvcihjPTA7YzxhLmcubGVuZ3RoO2MrKylkPWEuZ1tjXShiKXx8ZDtjPXt9O2Muc3RhdHVzPWQ/XCJBQ0tcIjpcIkVSUk9SXCI7cmV0dXJuIEQoYyl9Yy5zdGF0dXM9XCJFUlJPUlwiO3JldHVybiBEKGMpfSl9XG5mdW5jdGlvbiBXaihhKXt2YXIgYj17dHlwZTpcIndlYlN0b3JhZ2VTdXBwb3J0XCJ9O3JldHVybiBVaihhKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIEtqKGEuaSxiKX0pLnRoZW4oZnVuY3Rpb24oYyl7aWYoYyYmYy5sZW5ndGgmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgY1swXS53ZWJTdG9yYWdlU3VwcG9ydClyZXR1cm4gY1swXS53ZWJTdG9yYWdlU3VwcG9ydDt0aHJvdyBFcnJvcigpO30pfWsuQ2E9ZnVuY3Rpb24oYSl7dGhpcy5nLnB1c2goYSl9O2suUWE9ZnVuY3Rpb24oYSl7VmEodGhpcy5nLGZ1bmN0aW9uKGIpe3JldHVybiBiPT1hfSl9O2Z1bmN0aW9uIFpqKGEpe3RoaXMuYT1hfHxmaXJlYmFzZS5JTlRFUk5BTC5yZWFjdE5hdGl2ZSYmZmlyZWJhc2UuSU5URVJOQUwucmVhY3ROYXRpdmUuQXN5bmNTdG9yYWdlO2lmKCF0aGlzLmEpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLFwiVGhlIFJlYWN0IE5hdGl2ZSBjb21wYXRpYmlsaXR5IGxpYnJhcnkgd2FzIG5vdCBmb3VuZC5cIik7dGhpcy50eXBlPVwiYXN5bmNTdG9yYWdlXCJ9az1aai5wcm90b3R5cGU7ay5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIEQodGhpcy5hLmdldEl0ZW0oYSkpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIGImJlRlKGIpfSl9O2suc2V0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIEQodGhpcy5hLnNldEl0ZW0oYSxSZShiKSkpfTtrLlQ9ZnVuY3Rpb24oYSl7cmV0dXJuIEQodGhpcy5hLnJlbW92ZUl0ZW0oYSkpfTtrLmJhPWZ1bmN0aW9uKCl7fTtrLmhhPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBhayhhKXt0aGlzLmI9YTt0aGlzLmE9e307dGhpcy5mPXEodGhpcy5jLHRoaXMpfXZhciBiaz1bXTtmdW5jdGlvbiBjaygpe3ZhciBhPUdlKCk/c2VsZjpudWxsO3coYmssZnVuY3Rpb24oYyl7Yy5iPT1hJiYoYj1jKX0pO2lmKCFiKXt2YXIgYj1uZXcgYWsoYSk7YmsucHVzaChiKX1yZXR1cm4gYn1cbmFrLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGEpe3ZhciBiPWEuZGF0YS5ldmVudFR5cGUsYz1hLmRhdGEuZXZlbnRJZCxkPXRoaXMuYVtiXTtpZihkJiYwPGQubGVuZ3RoKXthLnBvcnRzWzBdLnBvc3RNZXNzYWdlKHtzdGF0dXM6XCJhY2tcIixldmVudElkOmMsZXZlbnRUeXBlOmIscmVzcG9uc2U6bnVsbH0pO3ZhciBlPVtdO3coZCxmdW5jdGlvbihmKXtlLnB1c2goRCgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZihhLm9yaWdpbixhLmRhdGEuZGF0YSl9KSl9KTtGYyhlKS50aGVuKGZ1bmN0aW9uKGYpe3ZhciBnPVtdO3coZixmdW5jdGlvbihoKXtnLnB1c2goe2Z1bGZpbGxlZDpoLk1iLHZhbHVlOmgudmFsdWUscmVhc29uOmgucmVhc29uP2gucmVhc29uLm1lc3NhZ2U6dm9pZCAwfSl9KTt3KGcsZnVuY3Rpb24oaCl7Zm9yKHZhciBtIGluIGgpXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBoW21dJiZkZWxldGUgaFttXX0pO2EucG9ydHNbMF0ucG9zdE1lc3NhZ2Uoe3N0YXR1czpcImRvbmVcIixldmVudElkOmMsXG5ldmVudFR5cGU6YixyZXNwb25zZTpnfSl9KX19O2Z1bmN0aW9uIGRrKGEsYixjKXtrYihhLmEpJiZhLmIuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixhLmYpO1widW5kZWZpbmVkXCI9PT10eXBlb2YgYS5hW2JdJiYoYS5hW2JdPVtdKTthLmFbYl0ucHVzaChjKX07ZnVuY3Rpb24gZWsoYSl7dGhpcy5hPWF9ZWsucHJvdG90eXBlLnBvc3RNZXNzYWdlPWZ1bmN0aW9uKGEsYil7dGhpcy5hLnBvc3RNZXNzYWdlKGEsYil9O2Z1bmN0aW9uIGZrKGEpe3RoaXMuYz1hO3RoaXMuYj0hMTt0aGlzLmE9W119XG5mdW5jdGlvbiBnayhhLGIsYyxkKXt2YXIgZSxmPWN8fHt9LGcsaCxtLHA9bnVsbDtpZihhLmIpcmV0dXJuIEUoRXJyb3IoXCJjb25uZWN0aW9uX3VuYXZhaWxhYmxlXCIpKTt2YXIgdj1kPzgwMDo1MCxDPVwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWw/bmV3IE1lc3NhZ2VDaGFubmVsOm51bGw7cmV0dXJuKG5ldyBCKGZ1bmN0aW9uKEEsUSl7Qz8oZT1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqTWF0aC5wb3coMTAsMjApKS50b1N0cmluZygpLEMucG9ydDEuc3RhcnQoKSxoPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtRKEVycm9yKFwidW5zdXBwb3J0ZWRfZXZlbnRcIikpfSx2KSxnPWZ1bmN0aW9uKHdhKXt3YS5kYXRhLmV2ZW50SWQ9PT1lJiYoXCJhY2tcIj09PXdhLmRhdGEuc3RhdHVzPyhjbGVhclRpbWVvdXQoaCksbT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7UShFcnJvcihcInRpbWVvdXRcIikpfSwzRTMpKTpcImRvbmVcIj09PXdhLmRhdGEuc3RhdHVzPyhjbGVhclRpbWVvdXQobSksXG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIHdhLmRhdGEucmVzcG9uc2U/QSh3YS5kYXRhLnJlc3BvbnNlKTpRKEVycm9yKFwidW5rbm93bl9lcnJvclwiKSkpOihjbGVhclRpbWVvdXQoaCksY2xlYXJUaW1lb3V0KG0pLFEoRXJyb3IoXCJpbnZhbGlkX3Jlc3BvbnNlXCIpKSkpfSxwPXttZXNzYWdlQ2hhbm5lbDpDLG9uTWVzc2FnZTpnfSxhLmEucHVzaChwKSxDLnBvcnQxLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZyksYS5jLnBvc3RNZXNzYWdlKHtldmVudFR5cGU6YixldmVudElkOmUsZGF0YTpmfSxbQy5wb3J0Ml0pKTpRKEVycm9yKFwiY29ubmVjdGlvbl91bmF2YWlsYWJsZVwiKSl9KSkudGhlbihmdW5jdGlvbihBKXtoayhhLHApO3JldHVybiBBfSkubyhmdW5jdGlvbihBKXtoayhhLHApO3Rocm93IEE7fSl9XG5mdW5jdGlvbiBoayhhLGIpe2lmKGIpe3ZhciBjPWIubWVzc2FnZUNoYW5uZWwsZD1iLm9uTWVzc2FnZTtjJiYoYy5wb3J0MS5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGQpLGMucG9ydDEuY2xvc2UoKSk7VmEoYS5hLGZ1bmN0aW9uKGUpe3JldHVybiBlPT1ifSl9fWZrLnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpe2Zvcig7MDx0aGlzLmEubGVuZ3RoOyloayh0aGlzLHRoaXMuYVswXSk7dGhpcy5iPSEwfTtmdW5jdGlvbiBpaygpe2lmKCFqaygpKXRocm93IG5ldyB0KFwid2ViLXN0b3JhZ2UtdW5zdXBwb3J0ZWRcIik7dGhpcy5jPXt9O3RoaXMuYT1bXTt0aGlzLmI9MDt0aGlzLnU9bC5pbmRleGVkREI7dGhpcy50eXBlPVwiaW5kZXhlZERCXCI7dGhpcy5nPXRoaXMubD10aGlzLmY9dGhpcy5pPW51bGw7dGhpcy5zPSExO3RoaXMuaD1udWxsO3ZhciBhPXRoaXM7R2UoKSYmc2VsZj8odGhpcy5sPWNrKCksZGsodGhpcy5sLFwia2V5Q2hhbmdlZFwiLGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGtrKGEpLnRoZW4oZnVuY3Rpb24oZCl7MDxkLmxlbmd0aCYmdyhhLmEsZnVuY3Rpb24oZSl7ZShkKX0pO3JldHVybntrZXlQcm9jZXNzZWQ6VGEoZCxjLmtleSl9fSl9KSxkayh0aGlzLmwsXCJwaW5nXCIsZnVuY3Rpb24oKXtyZXR1cm4gRChbXCJrZXlDaGFuZ2VkXCJdKX0pKTpiZigpLnRoZW4oZnVuY3Rpb24oYil7aWYoYS5oPWIpYS5nPW5ldyBmayhuZXcgZWsoYikpLGdrKGEuZyxcInBpbmdcIixudWxsLCEwKS50aGVuKGZ1bmN0aW9uKGMpe2NbMF0uZnVsZmlsbGVkJiZcblRhKGNbMF0udmFsdWUsXCJrZXlDaGFuZ2VkXCIpJiYoYS5zPSEwKX0pLm8oZnVuY3Rpb24oKXt9KX0pfXZhciBsaztmdW5jdGlvbiBtayhhKXtyZXR1cm4gbmV3IEIoZnVuY3Rpb24oYixjKXt2YXIgZD1hLnUuZGVsZXRlRGF0YWJhc2UoXCJmaXJlYmFzZUxvY2FsU3RvcmFnZURiXCIpO2Qub25zdWNjZXNzPWZ1bmN0aW9uKCl7YigpfTtkLm9uZXJyb3I9ZnVuY3Rpb24oZSl7YyhFcnJvcihlLnRhcmdldC5lcnJvcikpfX0pfVxuZnVuY3Rpb24gbmsoYSl7cmV0dXJuIG5ldyBCKGZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS51Lm9wZW4oXCJmaXJlYmFzZUxvY2FsU3RvcmFnZURiXCIsMSk7ZC5vbmVycm9yPWZ1bmN0aW9uKGUpe3RyeXtlLnByZXZlbnREZWZhdWx0KCl9Y2F0Y2goZil7fWMoRXJyb3IoZS50YXJnZXQuZXJyb3IpKX07ZC5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oZSl7ZT1lLnRhcmdldC5yZXN1bHQ7dHJ5e2UuY3JlYXRlT2JqZWN0U3RvcmUoXCJmaXJlYmFzZUxvY2FsU3RvcmFnZVwiLHtrZXlQYXRoOlwiZmJhc2Vfa2V5XCJ9KX1jYXRjaChmKXtjKGYpfX07ZC5vbnN1Y2Nlc3M9ZnVuY3Rpb24oZSl7ZT1lLnRhcmdldC5yZXN1bHQ7ZS5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKFwiZmlyZWJhc2VMb2NhbFN0b3JhZ2VcIik/YihlKTptayhhKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG5rKGEpfSkudGhlbihmdW5jdGlvbihmKXtiKGYpfSkubyhmdW5jdGlvbihmKXtjKGYpfSl9fSl9XG5mdW5jdGlvbiBvayhhKXthLm18fChhLm09bmsoYSkpO3JldHVybiBhLm19ZnVuY3Rpb24gamsoKXt0cnl7cmV0dXJuISFsLmluZGV4ZWREQn1jYXRjaChhKXtyZXR1cm4hMX19ZnVuY3Rpb24gcGsoYSl7cmV0dXJuIGEub2JqZWN0U3RvcmUoXCJmaXJlYmFzZUxvY2FsU3RvcmFnZVwiKX1mdW5jdGlvbiBxayhhLGIpe3JldHVybiBhLnRyYW5zYWN0aW9uKFtcImZpcmViYXNlTG9jYWxTdG9yYWdlXCJdLGI/XCJyZWFkd3JpdGVcIjpcInJlYWRvbmx5XCIpfWZ1bmN0aW9uIHJrKGEpe3JldHVybiBuZXcgQihmdW5jdGlvbihiLGMpe2Eub25zdWNjZXNzPWZ1bmN0aW9uKGQpe2QmJmQudGFyZ2V0P2IoZC50YXJnZXQucmVzdWx0KTpiKCl9O2Eub25lcnJvcj1mdW5jdGlvbihkKXtjKGQudGFyZ2V0LmVycm9yKX19KX1rPWlrLnByb3RvdHlwZTtcbmsuc2V0PWZ1bmN0aW9uKGEsYil7dmFyIGM9ITEsZCxlPXRoaXM7cmV0dXJuIG9rKHRoaXMpLnRoZW4oZnVuY3Rpb24oZil7ZD1mO2Y9cGsocWsoZCwhMCkpO3JldHVybiByayhmLmdldChhKSl9KS50aGVuKGZ1bmN0aW9uKGYpe3ZhciBnPXBrKHFrKGQsITApKTtpZihmKXJldHVybiBmLnZhbHVlPWIscmsoZy5wdXQoZikpO2UuYisrO2M9ITA7Zj17fTtmLmZiYXNlX2tleT1hO2YudmFsdWU9YjtyZXR1cm4gcmsoZy5hZGQoZikpfSkudGhlbihmdW5jdGlvbigpe2UuY1thXT1iO3JldHVybiBzayhlLGEpfSkubWEoZnVuY3Rpb24oKXtjJiZlLmItLX0pfTtmdW5jdGlvbiBzayhhLGIpe3JldHVybiBhLmcmJmEuaCYmYWYoKT09PWEuaD9nayhhLmcsXCJrZXlDaGFuZ2VkXCIse2tleTpifSxhLnMpLnRoZW4oZnVuY3Rpb24oKXt9KS5vKGZ1bmN0aW9uKCl7fSk6RCgpfVxuay5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG9rKHRoaXMpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIHJrKHBrKHFrKGIsITEpKS5nZXQoYSkpfSkudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gYiYmYi52YWx1ZX0pfTtrLlQ9ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYz10aGlzO3JldHVybiBvayh0aGlzKS50aGVuKGZ1bmN0aW9uKGQpe2I9ITA7Yy5iKys7cmV0dXJuIHJrKHBrKHFrKGQsITApKVtcImRlbGV0ZVwiXShhKSl9KS50aGVuKGZ1bmN0aW9uKCl7ZGVsZXRlIGMuY1thXTtyZXR1cm4gc2soYyxhKX0pLm1hKGZ1bmN0aW9uKCl7YiYmYy5iLS19KX07XG5mdW5jdGlvbiBrayhhKXtyZXR1cm4gb2soYSkudGhlbihmdW5jdGlvbihiKXt2YXIgYz1wayhxayhiLCExKSk7cmV0dXJuIGMuZ2V0QWxsP3JrKGMuZ2V0QWxsKCkpOm5ldyBCKGZ1bmN0aW9uKGQsZSl7dmFyIGY9W10sZz1jLm9wZW5DdXJzb3IoKTtnLm9uc3VjY2Vzcz1mdW5jdGlvbihoKXsoaD1oLnRhcmdldC5yZXN1bHQpPyhmLnB1c2goaC52YWx1ZSksaFtcImNvbnRpbnVlXCJdKCkpOmQoZil9O2cub25lcnJvcj1mdW5jdGlvbihoKXtlKGgudGFyZ2V0LmVycm9yKX19KX0pLnRoZW4oZnVuY3Rpb24oYil7dmFyIGM9e30sZD1bXTtpZigwPT1hLmIpe2ZvcihkPTA7ZDxiLmxlbmd0aDtkKyspY1tiW2RdLmZiYXNlX2tleV09YltkXS52YWx1ZTtkPXFlKGEuYyxjKTthLmM9Y31yZXR1cm4gZH0pfWsuYmE9ZnVuY3Rpb24oYSl7MD09dGhpcy5hLmxlbmd0aCYmdGsodGhpcyk7dGhpcy5hLnB1c2goYSl9O1xuay5oYT1mdW5jdGlvbihhKXtWYSh0aGlzLmEsZnVuY3Rpb24oYil7cmV0dXJuIGI9PWF9KTswPT10aGlzLmEubGVuZ3RoJiZ1ayh0aGlzKX07ZnVuY3Rpb24gdGsoYSl7ZnVuY3Rpb24gYigpe2EuZj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YS5pPWtrKGEpLnRoZW4oZnVuY3Rpb24oYyl7MDxjLmxlbmd0aCYmdyhhLmEsZnVuY3Rpb24oZCl7ZChjKX0pfSkudGhlbihmdW5jdGlvbigpe2IoKX0pLm8oZnVuY3Rpb24oYyl7XCJTVE9QX0VWRU5UXCIhPWMubWVzc2FnZSYmYigpfSl9LDgwMCl9dWsoYSk7YigpfWZ1bmN0aW9uIHVrKGEpe2EuaSYmYS5pLmNhbmNlbChcIlNUT1BfRVZFTlRcIik7YS5mJiYoY2xlYXJUaW1lb3V0KGEuZiksYS5mPW51bGwpfTtmdW5jdGlvbiB2ayhhKXt2YXIgYj10aGlzLGM9bnVsbDt0aGlzLmE9W107dGhpcy50eXBlPVwiaW5kZXhlZERCXCI7dGhpcy5jPWE7dGhpcy5iPUQoKS50aGVuKGZ1bmN0aW9uKCl7aWYoamsoKSl7dmFyIGQ9TmUoKSxlPVwiX19zYWtcIitkO2xrfHwobGs9bmV3IGlrKTtjPWxrO3JldHVybiBjLnNldChlLGQpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQoZSl9KS50aGVuKGZ1bmN0aW9uKGYpe2lmKGYhPT1kKXRocm93IEVycm9yKFwiaW5kZXhlZERCIG5vdCBzdXBwb3J0ZWQhXCIpO3JldHVybiBjLlQoZSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGN9KS5vKGZ1bmN0aW9uKCl7cmV0dXJuIGIuY30pfXJldHVybiBiLmN9KS50aGVuKGZ1bmN0aW9uKGQpe2IudHlwZT1kLnR5cGU7ZC5iYShmdW5jdGlvbihlKXt3KGIuYSxmdW5jdGlvbihmKXtmKGUpfSl9KTtyZXR1cm4gZH0pfWs9dmsucHJvdG90eXBlO2suZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmIudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gYi5nZXQoYSl9KX07XG5rLnNldD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmIudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYy5zZXQoYSxiKX0pfTtrLlQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYi50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBiLlQoYSl9KX07ay5iYT1mdW5jdGlvbihhKXt0aGlzLmEucHVzaChhKX07ay5oYT1mdW5jdGlvbihhKXtWYSh0aGlzLmEsZnVuY3Rpb24oYil7cmV0dXJuIGI9PWF9KX07ZnVuY3Rpb24gd2soKXt0aGlzLmE9e307dGhpcy50eXBlPVwiaW5NZW1vcnlcIn1rPXdrLnByb3RvdHlwZTtrLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gRCh0aGlzLmFbYV0pfTtrLnNldD1mdW5jdGlvbihhLGIpe3RoaXMuYVthXT1iO3JldHVybiBEKCl9O2suVD1mdW5jdGlvbihhKXtkZWxldGUgdGhpcy5hW2FdO3JldHVybiBEKCl9O2suYmE9ZnVuY3Rpb24oKXt9O2suaGE9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIHhrKCl7aWYoIXlrKCkpe2lmKFwiTm9kZVwiPT1IZSgpKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcIlRoZSBMb2NhbFN0b3JhZ2UgY29tcGF0aWJpbGl0eSBsaWJyYXJ5IHdhcyBub3QgZm91bmQuXCIpO3Rocm93IG5ldyB0KFwid2ViLXN0b3JhZ2UtdW5zdXBwb3J0ZWRcIik7fXRoaXMuYT16aygpfHxmaXJlYmFzZS5JTlRFUk5BTC5ub2RlLmxvY2FsU3RvcmFnZTt0aGlzLnR5cGU9XCJsb2NhbFN0b3JhZ2VcIn1mdW5jdGlvbiB6aygpe3RyeXt2YXIgYT1sLmxvY2FsU3RvcmFnZSxiPU5lKCk7YSYmKGEuc2V0SXRlbShiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oYikpO3JldHVybiBhfWNhdGNoKGMpe3JldHVybiBudWxsfX1cbmZ1bmN0aW9uIHlrKCl7dmFyIGE9XCJOb2RlXCI9PUhlKCk7YT16aygpfHxhJiZmaXJlYmFzZS5JTlRFUk5BTC5ub2RlJiZmaXJlYmFzZS5JTlRFUk5BTC5ub2RlLmxvY2FsU3RvcmFnZTtpZighYSlyZXR1cm4hMTt0cnl7cmV0dXJuIGEuc2V0SXRlbShcIl9fc2FrXCIsXCIxXCIpLGEucmVtb3ZlSXRlbShcIl9fc2FrXCIpLCEwfWNhdGNoKGIpe3JldHVybiExfX1rPXhrLnByb3RvdHlwZTtrLmdldD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBEKCkudGhlbihmdW5jdGlvbigpe3ZhciBjPWIuYS5nZXRJdGVtKGEpO3JldHVybiBUZShjKX0pfTtrLnNldD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIEQoKS50aGVuKGZ1bmN0aW9uKCl7dmFyIGQ9UmUoYik7bnVsbD09PWQ/Yy5UKGEpOmMuYS5zZXRJdGVtKGEsZCl9KX07ay5UPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIEQoKS50aGVuKGZ1bmN0aW9uKCl7Yi5hLnJlbW92ZUl0ZW0oYSl9KX07XG5rLmJhPWZ1bmN0aW9uKGEpe2wud2luZG93JiZqZChsLndpbmRvdyxcInN0b3JhZ2VcIixhKX07ay5oYT1mdW5jdGlvbihhKXtsLndpbmRvdyYmdGQobC53aW5kb3csXCJzdG9yYWdlXCIsYSl9O2Z1bmN0aW9uIEFrKCl7dGhpcy50eXBlPVwibnVsbFN0b3JhZ2VcIn1rPUFrLnByb3RvdHlwZTtrLmdldD1mdW5jdGlvbigpe3JldHVybiBEKG51bGwpfTtrLnNldD1mdW5jdGlvbigpe3JldHVybiBEKCl9O2suVD1mdW5jdGlvbigpe3JldHVybiBEKCl9O2suYmE9ZnVuY3Rpb24oKXt9O2suaGE9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIEJrKCl7aWYoIUNrKCkpe2lmKFwiTm9kZVwiPT1IZSgpKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcIlRoZSBTZXNzaW9uU3RvcmFnZSBjb21wYXRpYmlsaXR5IGxpYnJhcnkgd2FzIG5vdCBmb3VuZC5cIik7dGhyb3cgbmV3IHQoXCJ3ZWItc3RvcmFnZS11bnN1cHBvcnRlZFwiKTt9dGhpcy5hPURrKCl8fGZpcmViYXNlLklOVEVSTkFMLm5vZGUuc2Vzc2lvblN0b3JhZ2U7dGhpcy50eXBlPVwic2Vzc2lvblN0b3JhZ2VcIn1mdW5jdGlvbiBEaygpe3RyeXt2YXIgYT1sLnNlc3Npb25TdG9yYWdlLGI9TmUoKTthJiYoYS5zZXRJdGVtKGIsXCIxXCIpLGEucmVtb3ZlSXRlbShiKSk7cmV0dXJuIGF9Y2F0Y2goYyl7cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gQ2soKXt2YXIgYT1cIk5vZGVcIj09SGUoKTthPURrKCl8fGEmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUmJmZpcmViYXNlLklOVEVSTkFMLm5vZGUuc2Vzc2lvblN0b3JhZ2U7aWYoIWEpcmV0dXJuITE7dHJ5e3JldHVybiBhLnNldEl0ZW0oXCJfX3Nha1wiLFwiMVwiKSxhLnJlbW92ZUl0ZW0oXCJfX3Nha1wiKSwhMH1jYXRjaChiKXtyZXR1cm4hMX19az1Cay5wcm90b3R5cGU7ay5nZXQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gRCgpLnRoZW4oZnVuY3Rpb24oKXt2YXIgYz1iLmEuZ2V0SXRlbShhKTtyZXR1cm4gVGUoYyl9KX07ay5zZXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBEKCkudGhlbihmdW5jdGlvbigpe3ZhciBkPVJlKGIpO251bGw9PT1kP2MuVChhKTpjLmEuc2V0SXRlbShhLGQpfSl9O2suVD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBEKCkudGhlbihmdW5jdGlvbigpe2IuYS5yZW1vdmVJdGVtKGEpfSl9O2suYmE9ZnVuY3Rpb24oKXt9O1xuay5oYT1mdW5jdGlvbigpe307ZnVuY3Rpb24gRWsoKXt2YXIgYT17fTthLkJyb3dzZXI9Rms7YS5Ob2RlPUdrO2EuUmVhY3ROYXRpdmU9SGs7YS5Xb3JrZXI9SWs7dGhpcy5hPWFbSGUoKV19dmFyIEprLEZrPXtGOnhrLCRhOkJrfSxHaz17Rjp4aywkYTpCa30sSGs9e0Y6WmosJGE6QWt9LElrPXtGOnhrLCRhOkFrfTsvKlxuXG4gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xudmFyIEtrPXtvZDpcImxvY2FsXCIsTk9ORTpcIm5vbmVcIixxZDpcInNlc3Npb25cIn07ZnVuY3Rpb24gTGsoYSl7dmFyIGI9bmV3IHQoXCJpbnZhbGlkLXBlcnNpc3RlbmNlLXR5cGVcIiksYz1uZXcgdChcInVuc3VwcG9ydGVkLXBlcnNpc3RlbmNlLXR5cGVcIik7YTp7Zm9yKGQgaW4gS2spaWYoS2tbZF09PWEpe3ZhciBkPSEwO2JyZWFrIGF9ZD0hMX1pZighZHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IGI7c3dpdGNoKEhlKCkpe2Nhc2UgXCJSZWFjdE5hdGl2ZVwiOmlmKFwic2Vzc2lvblwiPT09YSl0aHJvdyBjO2JyZWFrO2Nhc2UgXCJOb2RlXCI6aWYoXCJub25lXCIhPT1hKXRocm93IGM7YnJlYWs7Y2FzZSBcIldvcmtlclwiOmlmKFwic2Vzc2lvblwiPT09YXx8IWprKCkmJlwibm9uZVwiIT09YSl0aHJvdyBjO2JyZWFrO2RlZmF1bHQ6aWYoIU1lKCkmJlwibm9uZVwiIT09YSl0aHJvdyBjO319XG5mdW5jdGlvbiBNaygpe3ZhciBhPSFVZShJKCkpJiZGZSgpPyEwOiExLGI9UWUoKSxjPU1lKCk7dGhpcy5tPWE7dGhpcy5oPWI7dGhpcy5sPWM7dGhpcy5hPXt9O0prfHwoSms9bmV3IEVrKTthPUprO3RyeXt0aGlzLmc9IW5lKCkmJiRlKCl8fCFsLmluZGV4ZWREQj9uZXcgYS5hLkY6bmV3IHZrKEdlKCk/bmV3IHdrOm5ldyBhLmEuRil9Y2F0Y2goZCl7dGhpcy5nPW5ldyB3ayx0aGlzLmg9ITB9dHJ5e3RoaXMuaT1uZXcgYS5hLiRhfWNhdGNoKGQpe3RoaXMuaT1uZXcgd2t9dGhpcy51PW5ldyB3azt0aGlzLmY9cSh0aGlzLlZiLHRoaXMpO3RoaXMuYj17fX12YXIgTms7ZnVuY3Rpb24gT2soKXtOa3x8KE5rPW5ldyBNayk7cmV0dXJuIE5rfWZ1bmN0aW9uIFBrKGEsYil7c3dpdGNoKGIpe2Nhc2UgXCJzZXNzaW9uXCI6cmV0dXJuIGEuaTtjYXNlIFwibm9uZVwiOnJldHVybiBhLnU7ZGVmYXVsdDpyZXR1cm4gYS5nfX1cbmZ1bmN0aW9uIFFrKGEsYil7cmV0dXJuXCJmaXJlYmFzZTpcIithLm5hbWUrKGI/XCI6XCIrYjpcIlwiKX1mdW5jdGlvbiBSayhhLGIsYyl7dmFyIGQ9UWsoYixjKSxlPVBrKGEsYi5GKTtyZXR1cm4gYS5nZXQoYixjKS50aGVuKGZ1bmN0aW9uKGYpe3ZhciBnPW51bGw7dHJ5e2c9VGUobC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShkKSl9Y2F0Y2goaCl7fWlmKGcmJiFmKXJldHVybiBsLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGQpLGEuc2V0KGIsZyxjKTtnJiZmJiZcImxvY2FsU3RvcmFnZVwiIT1lLnR5cGUmJmwubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oZCl9KX1rPU1rLnByb3RvdHlwZTtrLmdldD1mdW5jdGlvbihhLGIpe3JldHVybiBQayh0aGlzLGEuRikuZ2V0KFFrKGEsYikpfTtmdW5jdGlvbiBTayhhLGIsYyl7Yz1RayhiLGMpO1wibG9jYWxcIj09Yi5GJiYoYS5iW2NdPW51bGwpO3JldHVybiBQayhhLGIuRikuVChjKX1cbmsuc2V0PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1RayhhLGMpLGU9dGhpcyxmPVBrKHRoaXMsYS5GKTtyZXR1cm4gZi5zZXQoZCxiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGYuZ2V0KGQpfSkudGhlbihmdW5jdGlvbihnKXtcImxvY2FsXCI9PWEuRiYmKGUuYltkXT1nKX0pfTtrLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGEsYixjKXthPVFrKGEsYik7dGhpcy5sJiYodGhpcy5iW2FdPWwubG9jYWxTdG9yYWdlLmdldEl0ZW0oYSkpO2tiKHRoaXMuYSkmJihQayh0aGlzLFwibG9jYWxcIikuYmEodGhpcy5mKSx0aGlzLmh8fChuZSgpfHwhJGUoKSkmJmwuaW5kZXhlZERCfHwhdGhpcy5sfHxUayh0aGlzKSk7dGhpcy5hW2FdfHwodGhpcy5hW2FdPVtdKTt0aGlzLmFbYV0ucHVzaChjKX07XG5rLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKGEsYixjKXthPVFrKGEsYik7dGhpcy5hW2FdJiYoVmEodGhpcy5hW2FdLGZ1bmN0aW9uKGQpe3JldHVybiBkPT1jfSksMD09dGhpcy5hW2FdLmxlbmd0aCYmZGVsZXRlIHRoaXMuYVthXSk7a2IodGhpcy5hKSYmKFBrKHRoaXMsXCJsb2NhbFwiKS5oYSh0aGlzLmYpLFVrKHRoaXMpKX07ZnVuY3Rpb24gVGsoYSl7VWsoYSk7YS5jPXNldEludGVydmFsKGZ1bmN0aW9uKCl7Zm9yKHZhciBiIGluIGEuYSl7dmFyIGM9bC5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShiKSxkPWEuYltiXTtjIT1kJiYoYS5iW2JdPWMsYz1uZXcgWWMoe3R5cGU6XCJzdG9yYWdlXCIsa2V5OmIsdGFyZ2V0OndpbmRvdyxvbGRWYWx1ZTpkLG5ld1ZhbHVlOmMsYTohMH0pLGEuVmIoYykpfX0sMUUzKX1mdW5jdGlvbiBVayhhKXthLmMmJihjbGVhckludGVydmFsKGEuYyksYS5jPW51bGwpfVxuay5WYj1mdW5jdGlvbihhKXtpZihhJiZhLmYpe3ZhciBiPWEuYS5rZXk7aWYobnVsbD09Yilmb3IodmFyIGMgaW4gdGhpcy5hKXt2YXIgZD10aGlzLmJbY107XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBkJiYoZD1udWxsKTt2YXIgZT1sLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGMpO2UhPT1kJiYodGhpcy5iW2NdPWUsdGhpcy5pYihjKSl9ZWxzZSBpZigwPT1iLmluZGV4T2YoXCJmaXJlYmFzZTpcIikmJnRoaXMuYVtiXSl7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBhLmEuYT9Qayh0aGlzLFwibG9jYWxcIikuaGEodGhpcy5mKTpVayh0aGlzKTtpZih0aGlzLm0paWYoYz1sLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGIpLGQ9YS5hLm5ld1ZhbHVlLGQhPT1jKW51bGwhPT1kP2wubG9jYWxTdG9yYWdlLnNldEl0ZW0oYixkKTpsLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGIpO2Vsc2UgaWYodGhpcy5iW2JdPT09ZCYmXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhLmEuYSlyZXR1cm47dmFyIGY9dGhpcztjPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIiE9PVxudHlwZW9mIGEuYS5hfHxmLmJbYl0hPT1sLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGIpKWYuYltiXT1sLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGIpLGYuaWIoYil9O1RiJiZkYyYmMTA9PWRjJiZsLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGIpIT09YS5hLm5ld1ZhbHVlJiZhLmEubmV3VmFsdWUhPT1hLmEub2xkVmFsdWU/c2V0VGltZW91dChjLDEwKTpjKCl9fWVsc2UgdyhhLHEodGhpcy5pYix0aGlzKSl9O2suaWI9ZnVuY3Rpb24oYSl7dGhpcy5hW2FdJiZ3KHRoaXMuYVthXSxmdW5jdGlvbihiKXtiKCl9KX07ZnVuY3Rpb24gVmsoYSl7dGhpcy5hPWE7dGhpcy5iPU9rKCl9dmFyIFdrPXtuYW1lOlwiYXV0aEV2ZW50XCIsRjpcImxvY2FsXCJ9O2Z1bmN0aW9uIFhrKGEpe3JldHVybiBhLmIuZ2V0KFdrLGEuYSkudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gcGgoYil9KX07ZnVuY3Rpb24gWWsoKXt0aGlzLmE9T2soKX07ZnVuY3Rpb24gWmsoKXt0aGlzLmI9LTF9O2Z1bmN0aW9uICRrKGEsYil7dGhpcy5iPWFsO3RoaXMuZj1sLlVpbnQ4QXJyYXk/bmV3IFVpbnQ4QXJyYXkodGhpcy5iKTpBcnJheSh0aGlzLmIpO3RoaXMuZz10aGlzLmM9MDt0aGlzLmE9W107dGhpcy5pPWE7dGhpcy5oPWI7dGhpcy5sPWwuSW50MzJBcnJheT9uZXcgSW50MzJBcnJheSg2NCk6QXJyYXkoNjQpO3ZvaWQgMD09PWJsJiYobC5JbnQzMkFycmF5P2JsPW5ldyBJbnQzMkFycmF5KGNsKTpibD1jbCk7dGhpcy5yZXNldCgpfXZhciBibDtyKCRrLFprKTtmb3IodmFyIGFsPTY0LGRsPWFsLTEsZWw9W10sZmw9MDtmbDxkbDtmbCsrKWVsW2ZsXT0wO3ZhciBnbD1XYSgxMjgsZWwpOyRrLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMuZz10aGlzLmM9MDt0aGlzLmE9bC5JbnQzMkFycmF5P25ldyBJbnQzMkFycmF5KHRoaXMuaCk6WGEodGhpcy5oKX07XG5mdW5jdGlvbiBobChhKXtmb3IodmFyIGI9YS5mLGM9YS5sLGQ9MCxlPTA7ZTxiLmxlbmd0aDspY1tkKytdPWJbZV08PDI0fGJbZSsxXTw8MTZ8YltlKzJdPDw4fGJbZSszXSxlPTQqZDtmb3IoYj0xNjs2ND5iO2IrKyl7ZT1jW2ItMTVdfDA7ZD1jW2ItMl18MDt2YXIgZj0oY1tiLTE2XXwwKSsoKGU+Pj43fGU8PDI1KV4oZT4+PjE4fGU8PDE0KV5lPj4+Myl8MCxnPShjW2ItN118MCkrKChkPj4+MTd8ZDw8MTUpXihkPj4+MTl8ZDw8MTMpXmQ+Pj4xMCl8MDtjW2JdPWYrZ3wwfWQ9YS5hWzBdfDA7ZT1hLmFbMV18MDt2YXIgaD1hLmFbMl18MCxtPWEuYVszXXwwLHA9YS5hWzRdfDAsdj1hLmFbNV18MCxDPWEuYVs2XXwwO2Y9YS5hWzddfDA7Zm9yKGI9MDs2ND5iO2IrKyl7dmFyIEE9KChkPj4+MnxkPDwzMCleKGQ+Pj4xM3xkPDwxOSleKGQ+Pj4yMnxkPDwxMCkpKyhkJmVeZCZoXmUmaCl8MDtnPXAmdl5+cCZDO2Y9ZisoKHA+Pj42fHA8PDI2KV4ocD4+PjExfHA8PDIxKV4ocD4+PjI1fHA8PFxuNykpfDA7Zz1nKyhibFtiXXwwKXwwO2c9ZisoZysoY1tiXXwwKXwwKXwwO2Y9QztDPXY7dj1wO3A9bStnfDA7bT1oO2g9ZTtlPWQ7ZD1nK0F8MH1hLmFbMF09YS5hWzBdK2R8MDthLmFbMV09YS5hWzFdK2V8MDthLmFbMl09YS5hWzJdK2h8MDthLmFbM109YS5hWzNdK218MDthLmFbNF09YS5hWzRdK3B8MDthLmFbNV09YS5hWzVdK3Z8MDthLmFbNl09YS5hWzZdK0N8MDthLmFbN109YS5hWzddK2Z8MH1cbmZ1bmN0aW9uIGlsKGEsYixjKXt2b2lkIDA9PT1jJiYoYz1iLmxlbmd0aCk7dmFyIGQ9MCxlPWEuYztpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpZm9yKDtkPGM7KWEuZltlKytdPWIuY2hhckNvZGVBdChkKyspLGU9PWEuYiYmKGhsKGEpLGU9MCk7ZWxzZSBpZihtYShiKSlmb3IoO2Q8Yzspe3ZhciBmPWJbZCsrXTtpZighKFwibnVtYmVyXCI9PXR5cGVvZiBmJiYwPD1mJiYyNTU+PWYmJmY9PShmfDApKSl0aHJvdyBFcnJvcihcIm1lc3NhZ2UgbXVzdCBiZSBhIGJ5dGUgYXJyYXlcIik7YS5mW2UrK109ZjtlPT1hLmImJihobChhKSxlPTApfWVsc2UgdGhyb3cgRXJyb3IoXCJtZXNzYWdlIG11c3QgYmUgc3RyaW5nIG9yIGFycmF5XCIpO2EuYz1lO2EuZys9Y31cbnZhciBjbD1bMTExNjM1MjQwOCwxODk5NDQ3NDQxLDMwNDkzMjM0NzEsMzkyMTAwOTU3Myw5NjE5ODcxNjMsMTUwODk3MDk5MywyNDUzNjM1NzQ4LDI4NzA3NjMyMjEsMzYyNDM4MTA4MCwzMTA1OTg0MDEsNjA3MjI1Mjc4LDE0MjY4ODE5ODcsMTkyNTA3ODM4OCwyMTYyMDc4MjA2LDI2MTQ4ODgxMDMsMzI0ODIyMjU4MCwzODM1MzkwNDAxLDQwMjIyMjQ3NzQsMjY0MzQ3MDc4LDYwNDgwNzYyOCw3NzAyNTU5ODMsMTI0OTE1MDEyMiwxNTU1MDgxNjkyLDE5OTYwNjQ5ODYsMjU1NDIyMDg4MiwyODIxODM0MzQ5LDI5NTI5OTY4MDgsMzIxMDMxMzY3MSwzMzM2NTcxODkxLDM1ODQ1Mjg3MTEsMTEzOTI2OTkzLDMzODI0MTg5NSw2NjYzMDcyMDUsNzczNTI5OTEyLDEyOTQ3NTczNzIsMTM5NjE4MjI5MSwxNjk1MTgzNzAwLDE5ODY2NjEwNTEsMjE3NzAyNjM1MCwyNDU2OTU2MDM3LDI3MzA0ODU5MjEsMjgyMDMwMjQxMSwzMjU5NzMwODAwLDMzNDU3NjQ3NzEsMzUxNjA2NTgxNywzNjAwMzUyODA0LFxuNDA5NDU3MTkwOSwyNzU0MjMzNDQsNDMwMjI3NzM0LDUwNjk0ODYxNiw2NTkwNjA1NTYsODgzOTk3ODc3LDk1ODEzOTU3MSwxMzIyODIyMjE4LDE1MzcwMDIwNjMsMTc0Nzg3Mzc3OSwxOTU1NTYyMjIyLDIwMjQxMDQ4MTUsMjIyNzczMDQ1MiwyMzYxODUyNDI0LDI0Mjg0MzY0NzQsMjc1NjczNDE4NywzMjA0MDMxNDc5LDMzMjkzMjUyOThdO2Z1bmN0aW9uIGpsKCl7JGsuY2FsbCh0aGlzLDgsa2wpfXIoamwsJGspO3ZhciBrbD1bMTc3OTAzMzcwMywzMTQ0MTM0Mjc3LDEwMTM5MDQyNDIsMjc3MzQ4MDc2MiwxMzU5ODkzMTE5LDI2MDA4MjI5MjQsNTI4NzM0NjM1LDE1NDE0NTkyMjVdO2Z1bmN0aW9uIGxsKGEsYixjLGQsZSl7dGhpcy51PWE7dGhpcy5pPWI7dGhpcy5sPWM7dGhpcy5tPWR8fG51bGw7dGhpcy5zPWV8fG51bGw7dGhpcy5oPWIrXCI6XCIrYzt0aGlzLnc9bmV3IFlrO3RoaXMuZz1uZXcgVmsodGhpcy5oKTt0aGlzLmY9bnVsbDt0aGlzLmI9W107dGhpcy5hPXRoaXMuYz1udWxsfWZ1bmN0aW9uIG1sKGEpe3JldHVybiBuZXcgdChcImludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uXCIsYSl9az1sbC5wcm90b3R5cGU7XG5rLmthPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuR2E/dGhpcy5HYTp0aGlzLkdhPUNlKCkudGhlbihmdW5jdGlvbigpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBKKFwidW5pdmVyc2FsTGlua3Muc3Vic2NyaWJlXCIsbCkpdGhyb3cgbWwoXCJjb3Jkb3ZhLXVuaXZlcnNhbC1saW5rcy1wbHVnaW4tZml4IGlzIG5vdCBpbnN0YWxsZWRcIik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBKKFwiQnVpbGRJbmZvLnBhY2thZ2VOYW1lXCIsbCkpdGhyb3cgbWwoXCJjb3Jkb3ZhLXBsdWdpbi1idWlsZGluZm8gaXMgbm90IGluc3RhbGxlZFwiKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgSihcImNvcmRvdmEucGx1Z2lucy5icm93c2VydGFiLm9wZW5VcmxcIixsKSl0aHJvdyBtbChcImNvcmRvdmEtcGx1Z2luLWJyb3dzZXJ0YWIgaXMgbm90IGluc3RhbGxlZFwiKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgSihcImNvcmRvdmEuSW5BcHBCcm93c2VyLm9wZW5cIixsKSl0aHJvdyBtbChcImNvcmRvdmEtcGx1Z2luLWluYXBwYnJvd3NlciBpcyBub3QgaW5zdGFsbGVkXCIpO1xufSxmdW5jdGlvbigpe3Rocm93IG5ldyB0KFwiY29yZG92YS1ub3QtcmVhZHlcIik7fSl9O2Z1bmN0aW9uIG5sKCl7Zm9yKHZhciBhPTIwLGI9W107MDxhOyliLnB1c2goXCIxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiLmNoYXJBdChNYXRoLmZsb29yKDYyKk1hdGgucmFuZG9tKCkpKSksYS0tO3JldHVybiBiLmpvaW4oXCJcIil9ZnVuY3Rpb24gb2woYSl7dmFyIGI9bmV3IGpsO2lsKGIsYSk7YT1bXTt2YXIgYz04KmIuZzs1Nj5iLmM/aWwoYixnbCw1Ni1iLmMpOmlsKGIsZ2wsYi5iLShiLmMtNTYpKTtmb3IodmFyIGQ9NjM7NTY8PWQ7ZC0tKWIuZltkXT1jJjI1NSxjLz0yNTY7aGwoYik7Zm9yKGQ9Yz0wO2Q8Yi5pO2QrKylmb3IodmFyIGU9MjQ7MDw9ZTtlLT04KWFbYysrXT1iLmFbZF0+PmUmMjU1O3JldHVybiAkZihhKX1cbmsuTGI9ZnVuY3Rpb24oYSxiKXtiKG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7cmV0dXJuIEQoKX07ay5KYj1mdW5jdGlvbigpe3JldHVybiBFKG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSl9O2suWGI9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ay5VYj1mdW5jdGlvbigpe3JldHVybiEwfTtrLlFiPWZ1bmN0aW9uKCl7cmV0dXJuITB9O1xuay5LYj1mdW5jdGlvbihhLGIsYyxkKXtpZih0aGlzLmMpcmV0dXJuIEUobmV3IHQoXCJyZWRpcmVjdC1vcGVyYXRpb24tcGVuZGluZ1wiKSk7dmFyIGU9dGhpcyxmPWwuZG9jdW1lbnQsZz1udWxsLGg9bnVsbCxtPW51bGwscD1udWxsO3JldHVybiB0aGlzLmM9RCgpLnRoZW4oZnVuY3Rpb24oKXtuaChiKTtyZXR1cm4gcGwoZSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHFsKGUsYSxiLGMsZCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuKG5ldyBCKGZ1bmN0aW9uKHYsQyl7aD1mdW5jdGlvbigpe3ZhciBBPUooXCJjb3Jkb3ZhLnBsdWdpbnMuYnJvd3NlcnRhYi5jbG9zZVwiLGwpO3YoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQSYmQSgpO2UuYSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuYS5jbG9zZSYmKGUuYS5jbG9zZSgpLGUuYT1udWxsKTtyZXR1cm4hMX07ZS5DYShoKTttPWZ1bmN0aW9uKCl7Z3x8KGc9QmQoMkUzKS50aGVuKGZ1bmN0aW9uKCl7QyhuZXcgdChcInJlZGlyZWN0LWNhbmNlbGxlZC1ieS11c2VyXCIpKX0pKX07XG5wPWZ1bmN0aW9uKCl7WGUoKSYmbSgpfTtmLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXN1bWVcIixtLCExKTtJKCkudG9Mb3dlckNhc2UoKS5tYXRjaCgvYW5kcm9pZC8pfHxmLmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIscCwhMSl9KSkubyhmdW5jdGlvbih2KXtyZXR1cm4gcmwoZSkudGhlbihmdW5jdGlvbigpe3Rocm93IHY7fSl9KX0pLm1hKGZ1bmN0aW9uKCl7bSYmZi5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzdW1lXCIsbSwhMSk7cCYmZi5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLHAsITEpO2cmJmcuY2FuY2VsKCk7aCYmZS5RYShoKTtlLmM9bnVsbH0pfTtcbmZ1bmN0aW9uIHFsKGEsYixjLGQsZSl7dmFyIGY9bmwoKSxnPW5ldyBvaChiLGQsbnVsbCxmLG5ldyB0KFwibm8tYXV0aC1ldmVudFwiKSxudWxsLGUpLGg9SihcIkJ1aWxkSW5mby5wYWNrYWdlTmFtZVwiLGwpO2lmKFwic3RyaW5nXCIhPT10eXBlb2YgaCl0aHJvdyBuZXcgdChcImludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uXCIpO3ZhciBtPUooXCJCdWlsZEluZm8uZGlzcGxheU5hbWVcIixsKSxwPXt9O2lmKEkoKS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9pcGhvbmV8aXBhZHxpcG9kLykpcC5pYmk9aDtlbHNlIGlmKEkoKS50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hbmRyb2lkLykpcC5hcG49aDtlbHNlIHJldHVybiBFKG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7bSYmKHAuYXBwRGlzcGxheU5hbWU9bSk7Zj1vbChmKTtwLnNlc3Npb25JZD1mO3ZhciB2PVlqKGEudSxhLmksYS5sLGIsYyxudWxsLGQsYS5tLHAsYS5zLGUpO3JldHVybiBhLmthKCkudGhlbihmdW5jdGlvbigpe3ZhciBDPVxuYS5oO3JldHVybiBhLncuYS5zZXQoV2ssZy52KCksQyl9KS50aGVuKGZ1bmN0aW9uKCl7dmFyIEM9SihcImNvcmRvdmEucGx1Z2lucy5icm93c2VydGFiLmlzQXZhaWxhYmxlXCIsbCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEMpdGhyb3cgbmV3IHQoXCJpbnZhbGlkLWNvcmRvdmEtY29uZmlndXJhdGlvblwiKTt2YXIgQT1udWxsO0MoZnVuY3Rpb24oUSl7aWYoUSl7QT1KKFwiY29yZG92YS5wbHVnaW5zLmJyb3dzZXJ0YWIub3BlblVybFwiLGwpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBBKXRocm93IG5ldyB0KFwiaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIik7QSh2KX1lbHNle0E9SihcImNvcmRvdmEuSW5BcHBCcm93c2VyLm9wZW5cIixsKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSl0aHJvdyBuZXcgdChcImludmFsaWQtY29yZG92YS1jb25maWd1cmF0aW9uXCIpO1E9SSgpO2EuYT1BKHYsUS5tYXRjaCgvKGlQYWR8aVBob25lfGlQb2QpLipPUyA3X1xcZC9pKXx8US5tYXRjaCgvKGlQYWR8aVBob25lfGlQb2QpLipPUyA4X1xcZC9pKT9cblwiX2JsYW5rXCI6XCJfc3lzdGVtXCIsXCJsb2NhdGlvbj15ZXNcIil9fSl9KX1mdW5jdGlvbiBzbChhLGIpe2Zvcih2YXIgYz0wO2M8YS5iLmxlbmd0aDtjKyspdHJ5e2EuYltjXShiKX1jYXRjaChkKXt9fWZ1bmN0aW9uIHBsKGEpe2EuZnx8KGEuZj1hLmthKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgQihmdW5jdGlvbihiKXtmdW5jdGlvbiBjKGQpe2IoZCk7YS5RYShjKTtyZXR1cm4hMX1hLkNhKGMpO3RsKGEpfSl9KSk7cmV0dXJuIGEuZn1mdW5jdGlvbiBybChhKXt2YXIgYj1udWxsO3JldHVybiBYayhhLmcpLnRoZW4oZnVuY3Rpb24oYyl7Yj1jO2M9YS5nO3JldHVybiBTayhjLmIsV2ssYy5hKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYn0pfVxuZnVuY3Rpb24gdGwoYSl7ZnVuY3Rpb24gYihnKXtkPSEwO2UmJmUuY2FuY2VsKCk7cmwoYSkudGhlbihmdW5jdGlvbihoKXt2YXIgbT1jO2lmKGgmJmcmJmcudXJsKXt2YXIgcD1udWxsO209dWcoZy51cmwpOy0xIT1tLmluZGV4T2YoXCIvX18vYXV0aC9jYWxsYmFja1wiKSYmKHA9WmQobSkscD1UZShZZChwLFwiZmlyZWJhc2VFcnJvclwiKXx8bnVsbCkscD0ocD1cIm9iamVjdFwiPT09dHlwZW9mIHA/eWEocCk6bnVsbCk/bmV3IG9oKGguYyxoLmIsbnVsbCxudWxsLHAsbnVsbCxoLlMoKSk6bmV3IG9oKGguYyxoLmIsbSxoLmYsbnVsbCxudWxsLGguUygpKSk7bT1wfHxjfXNsKGEsbSl9KX12YXIgYz1uZXcgb2goXCJ1bmtub3duXCIsbnVsbCxudWxsLG51bGwsbmV3IHQoXCJuby1hdXRoLWV2ZW50XCIpKSxkPSExLGU9QmQoNTAwKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHJsKGEpLnRoZW4oZnVuY3Rpb24oKXtkfHxzbChhLGMpfSl9KSxmPWwuaGFuZGxlT3BlblVSTDtsLmhhbmRsZU9wZW5VUkw9ZnVuY3Rpb24oZyl7MD09XG5nLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihKKFwiQnVpbGRJbmZvLnBhY2thZ2VOYW1lXCIsbCkudG9Mb3dlckNhc2UoKStcIjovL1wiKSYmYih7dXJsOmd9KTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZil0cnl7ZihnKX1jYXRjaChoKXtjb25zb2xlLmVycm9yKGgpfX07cmh8fChyaD1uZXcgcWgpO3NoKGIpfWsuQ2E9ZnVuY3Rpb24oYSl7dGhpcy5iLnB1c2goYSk7cGwodGhpcykubyhmdW5jdGlvbihiKXtcImF1dGgvaW52YWxpZC1jb3Jkb3ZhLWNvbmZpZ3VyYXRpb25cIj09PWIuY29kZSYmKGI9bmV3IG9oKFwidW5rbm93blwiLG51bGwsbnVsbCxudWxsLG5ldyB0KFwibm8tYXV0aC1ldmVudFwiKSksYShiKSl9KX07ay5RYT1mdW5jdGlvbihhKXtWYSh0aGlzLmIsZnVuY3Rpb24oYil7cmV0dXJuIGI9PWF9KX07ZnVuY3Rpb24gdWwoYSl7dGhpcy5hPWE7dGhpcy5iPU9rKCl9dmFyIHZsPXtuYW1lOlwicGVuZGluZ1JlZGlyZWN0XCIsRjpcInNlc3Npb25cIn07ZnVuY3Rpb24gd2woYSl7cmV0dXJuIGEuYi5zZXQodmwsXCJwZW5kaW5nXCIsYS5hKX1mdW5jdGlvbiB4bChhKXtyZXR1cm4gU2soYS5iLHZsLGEuYSl9ZnVuY3Rpb24geWwoYSl7cmV0dXJuIGEuYi5nZXQodmwsYS5hKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVyblwicGVuZGluZ1wiPT1ifSl9O2Z1bmN0aW9uIHpsKGEsYixjKXt0aGlzLmk9e307dGhpcy53PTA7dGhpcy5EPWE7dGhpcy51PWI7dGhpcy5tPWM7dGhpcy5oPVtdO3RoaXMuZj0hMTt0aGlzLmw9cSh0aGlzLnMsdGhpcyk7dGhpcy5iPW5ldyBBbDt0aGlzLkI9bmV3IEJsO3RoaXMuZz1uZXcgdWwodGhpcy51K1wiOlwiK3RoaXMubSk7dGhpcy5jPXt9O3RoaXMuYy51bmtub3duPXRoaXMuYjt0aGlzLmMuc2lnbkluVmlhUmVkaXJlY3Q9dGhpcy5iO3RoaXMuYy5saW5rVmlhUmVkaXJlY3Q9dGhpcy5iO3RoaXMuYy5yZWF1dGhWaWFSZWRpcmVjdD10aGlzLmI7dGhpcy5jLnNpZ25JblZpYVBvcHVwPXRoaXMuQjt0aGlzLmMubGlua1ZpYVBvcHVwPXRoaXMuQjt0aGlzLmMucmVhdXRoVmlhUG9wdXA9dGhpcy5CO3RoaXMuYT1DbCh0aGlzLkQsdGhpcy51LHRoaXMubSxCYSl9XG5mdW5jdGlvbiBDbChhLGIsYyxkKXt2YXIgZT1maXJlYmFzZS5TREtfVkVSU0lPTnx8bnVsbDtyZXR1cm4gRGUoKT9uZXcgbGwoYSxiLGMsZSxkKTpuZXcgU2ooYSxiLGMsZSxkKX16bC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmY9ITE7dGhpcy5hLlFhKHRoaXMubCk7dGhpcy5hPUNsKHRoaXMuRCx0aGlzLnUsdGhpcy5tKTt0aGlzLmk9e319O2Z1bmN0aW9uIERsKGEpe2EuZnx8KGEuZj0hMCxhLmEuQ2EoYS5sKSk7dmFyIGI9YS5hO3JldHVybiBhLmEua2EoKS5vKGZ1bmN0aW9uKGMpe2EuYT09YiYmYS5yZXNldCgpO3Rocm93IGM7fSl9ZnVuY3Rpb24gRWwoYSl7YS5hLlViKCkmJkRsKGEpLm8oZnVuY3Rpb24oYil7dmFyIGM9bmV3IG9oKFwidW5rbm93blwiLG51bGwsbnVsbCxudWxsLG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7RmwoYikmJmEucyhjKX0pO2EuYS5RYigpfHxHbChhLmIpfVxuZnVuY3Rpb24gSGwoYSxiKXtUYShhLmgsYil8fGEuaC5wdXNoKGIpO2EuZnx8eWwoYS5nKS50aGVuKGZ1bmN0aW9uKGMpe2M/eGwoYS5nKS50aGVuKGZ1bmN0aW9uKCl7RGwoYSkubyhmdW5jdGlvbihkKXt2YXIgZT1uZXcgb2goXCJ1bmtub3duXCIsbnVsbCxudWxsLG51bGwsbmV3IHQoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTtGbChkKSYmYS5zKGUpfSl9KTpFbChhKX0pLm8oZnVuY3Rpb24oKXtFbChhKX0pfWZ1bmN0aW9uIElsKGEsYil7VmEoYS5oLGZ1bmN0aW9uKGMpe3JldHVybiBjPT1ifSl9XG56bC5wcm90b3R5cGUucz1mdW5jdGlvbihhKXtpZighYSl0aHJvdyBuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKTs2RTU8PXVhKCktdGhpcy53JiYodGhpcy5pPXt9LHRoaXMudz0wKTtpZihhJiZhLmdldFVpZCgpJiZ0aGlzLmkuaGFzT3duUHJvcGVydHkoYS5nZXRVaWQoKSkpcmV0dXJuITE7Zm9yKHZhciBiPSExLGM9MDtjPHRoaXMuaC5sZW5ndGg7YysrKXt2YXIgZD10aGlzLmhbY107aWYoZC5DYihhLmMsYS5iKSl7aWYoYj10aGlzLmNbYS5jXSliLmgoYSxkKSxhJiYoYS5mfHxhLmIpJiYodGhpcy5pW2EuZ2V0VWlkKCldPSEwLHRoaXMudz11YSgpKTtiPSEwO2JyZWFrfX1HbCh0aGlzLmIpO3JldHVybiBifTt2YXIgSmw9bmV3IFdlKDJFMywxRTQpLEtsPW5ldyBXZSgzRTQsNkU0KTt6bC5wcm90b3R5cGUucGE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5iLnBhKCl9O1xuZnVuY3Rpb24gTGwoYSxiLGMsZCxlLGYsZyl7cmV0dXJuIGEuYS5KYihiLGMsZCxmdW5jdGlvbigpe2EuZnx8KGEuZj0hMCxhLmEuQ2EoYS5sKSl9LGZ1bmN0aW9uKCl7YS5yZXNldCgpfSxlLGYsZyl9ZnVuY3Rpb24gRmwoYSl7cmV0dXJuIGEmJlwiYXV0aC9jb3Jkb3ZhLW5vdC1yZWFkeVwiPT1hLmNvZGU/ITA6ITF9XG5mdW5jdGlvbiBNbChhLGIsYyxkLGUpe3ZhciBmO3JldHVybiB3bChhLmcpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5hLktiKGIsYyxkLGUpLm8oZnVuY3Rpb24oZyl7aWYoRmwoZykpdGhyb3cgbmV3IHQoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpO2Y9ZztyZXR1cm4geGwoYS5nKS50aGVuKGZ1bmN0aW9uKCl7dGhyb3cgZjt9KX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5hLlhiKCk/bmV3IEIoZnVuY3Rpb24oKXt9KTp4bChhLmcpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5wYSgpfSkudGhlbihmdW5jdGlvbigpe30pLm8oZnVuY3Rpb24oKXt9KX0pfSl9ZnVuY3Rpb24gTmwoYSxiLGMsZCxlKXtyZXR1cm4gYS5hLkxiKGQsZnVuY3Rpb24oZil7Yi5sYShjLG51bGwsZixlKX0sSmwuZ2V0KCkpfXZhciBPbD17fTtcbmZ1bmN0aW9uIFBsKGEsYixjKXt2YXIgZD1iK1wiOlwiK2M7T2xbZF18fChPbFtkXT1uZXcgemwoYSxiLGMpKTtyZXR1cm4gT2xbZF19ZnVuY3Rpb24gQWwoKXt0aGlzLmI9bnVsbDt0aGlzLmY9W107dGhpcy5jPVtdO3RoaXMuYT1udWxsO3RoaXMuaT10aGlzLmc9ITF9QWwucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5iPW51bGw7dGhpcy5hJiYodGhpcy5hLmNhbmNlbCgpLHRoaXMuYT1udWxsKX07XG5BbC5wcm90b3R5cGUuaD1mdW5jdGlvbihhLGIpe2lmKGEpe3RoaXMucmVzZXQoKTt0aGlzLmc9ITA7dmFyIGM9YS5jLGQ9YS5iLGU9YS5hJiZcImF1dGgvd2ViLXN0b3JhZ2UtdW5zdXBwb3J0ZWRcIj09YS5hLmNvZGUsZj1hLmEmJlwiYXV0aC9vcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCI9PWEuYS5jb2RlO3RoaXMuaT0hKCFlJiYhZik7XCJ1bmtub3duXCIhPWN8fGV8fGY/YS5hPyhRbCh0aGlzLCEwLG51bGwsYS5hKSxEKCkpOmIuRGEoYyxkKT9SbCh0aGlzLGEsYik6RShuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKSk6KFFsKHRoaXMsITEsbnVsbCxudWxsKSxEKCkpfWVsc2UgRShuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKSl9O2Z1bmN0aW9uIEdsKGEpe2EuZ3x8KGEuZz0hMCxRbChhLCExLG51bGwsbnVsbCkpfWZ1bmN0aW9uIFNsKGEpe2EuZyYmIWEuaSYmUWwoYSwhMSxudWxsLG51bGwpfVxuZnVuY3Rpb24gUmwoYSxiLGMpe2M9Yy5EYShiLmMsYi5iKTt2YXIgZD1iLmcsZT1iLmYsZj1iLmksZz1iLlMoKSxoPSEhYi5jLm1hdGNoKC9SZWRpcmVjdCQvKTtjKGQsZSxnLGYpLnRoZW4oZnVuY3Rpb24obSl7UWwoYSxoLG0sbnVsbCl9KS5vKGZ1bmN0aW9uKG0pe1FsKGEsaCxudWxsLG0pfSl9ZnVuY3Rpb24gVGwoYSxiKXthLmI9ZnVuY3Rpb24oKXtyZXR1cm4gRShiKX07aWYoYS5jLmxlbmd0aClmb3IodmFyIGM9MDtjPGEuYy5sZW5ndGg7YysrKWEuY1tjXShiKX1mdW5jdGlvbiBVbChhLGIpe2EuYj1mdW5jdGlvbigpe3JldHVybiBEKGIpfTtpZihhLmYubGVuZ3RoKWZvcih2YXIgYz0wO2M8YS5mLmxlbmd0aDtjKyspYS5mW2NdKGIpfWZ1bmN0aW9uIFFsKGEsYixjLGQpe2I/ZD9UbChhLGQpOlVsKGEsYyk6VWwoYSx7dXNlcjpudWxsfSk7YS5mPVtdO2EuYz1bXX1cbkFsLnByb3RvdHlwZS5wYT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIG5ldyBCKGZ1bmN0aW9uKGIsYyl7YS5iP2EuYigpLnRoZW4oYixjKTooYS5mLnB1c2goYiksYS5jLnB1c2goYyksVmwoYSkpfSl9O2Z1bmN0aW9uIFZsKGEpe3ZhciBiPW5ldyB0KFwidGltZW91dFwiKTthLmEmJmEuYS5jYW5jZWwoKTthLmE9QmQoS2wuZ2V0KCkpLnRoZW4oZnVuY3Rpb24oKXthLmJ8fChhLmc9ITAsUWwoYSwhMCxudWxsLGIpKX0pfWZ1bmN0aW9uIEJsKCl7fUJsLnByb3RvdHlwZS5oPWZ1bmN0aW9uKGEsYil7aWYoYSl7dmFyIGM9YS5jLGQ9YS5iO2EuYT8oYi5sYShhLmMsbnVsbCxhLmEsYS5iKSxEKCkpOmIuRGEoYyxkKT9XbChhLGIpOkUobmV3IHQoXCJpbnZhbGlkLWF1dGgtZXZlbnRcIikpfWVsc2UgRShuZXcgdChcImludmFsaWQtYXV0aC1ldmVudFwiKSl9O1xuZnVuY3Rpb24gV2woYSxiKXt2YXIgYz1hLmIsZD1hLmM7Yi5EYShkLGMpKGEuZyxhLmYsYS5TKCksYS5pKS50aGVuKGZ1bmN0aW9uKGUpe2IubGEoZCxlLG51bGwsYyl9KS5vKGZ1bmN0aW9uKGUpe2IubGEoZCxudWxsLGUsYyl9KX07ZnVuY3Rpb24gWGwoKXt0aGlzLkJiPSExO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiYXBwVmVyaWZpY2F0aW9uRGlzYWJsZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuQmJ9LHNldDpmdW5jdGlvbihhKXt0aGlzLkJiPWF9LGVudW1lcmFibGU6ITF9KX07ZnVuY3Rpb24gWWwoYSxiKXt0aGlzLmE9YjtLKHRoaXMsXCJ2ZXJpZmljYXRpb25JZFwiLGEpfVlsLnByb3RvdHlwZS5jb25maXJtPWZ1bmN0aW9uKGEpe2E9bGgodGhpcy52ZXJpZmljYXRpb25JZCxhKTtyZXR1cm4gdGhpcy5hKGEpfTtmdW5jdGlvbiBabChhLGIsYyxkKXtyZXR1cm4obmV3IGhoKGEpKS5jYihiLGMpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBZbChlLGQpfSl9O2Z1bmN0aW9uICRsKGEpe3ZhciBiPWZnKGEpO2lmKCEoYiYmYi5leHAmJmIuYXV0aF90aW1lJiZiLmlhdCkpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLFwiQW4gaW50ZXJuYWwgZXJyb3Igb2NjdXJyZWQuIFRoZSB0b2tlbiBvYnRhaW5lZCBieSBGaXJlYmFzZSBhcHBlYXJzIHRvIGJlIG1hbGZvcm1lZC4gUGxlYXNlIHJldHJ5IHRoZSBvcGVyYXRpb24uXCIpO0wodGhpcyx7dG9rZW46YSxleHBpcmF0aW9uVGltZTpaZSgxRTMqYi5leHApLGF1dGhUaW1lOlplKDFFMypiLmF1dGhfdGltZSksaXNzdWVkQXRUaW1lOlplKDFFMypiLmlhdCksc2lnbkluUHJvdmlkZXI6Yi5maXJlYmFzZSYmYi5maXJlYmFzZS5zaWduX2luX3Byb3ZpZGVyP2IuZmlyZWJhc2Uuc2lnbl9pbl9wcm92aWRlcjpudWxsLHNpZ25JblNlY29uZEZhY3RvcjpiLmZpcmViYXNlJiZiLmZpcmViYXNlLnNpZ25faW5fc2Vjb25kX2ZhY3Rvcj9iLmZpcmViYXNlLnNpZ25faW5fc2Vjb25kX2ZhY3RvcjpudWxsLGNsYWltczpifSl9XG47ZnVuY3Rpb24gYW0oYSxiLGMpe3ZhciBkPWImJmJbYm1dO2lmKCFkKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixcIkludGVybmFsIGFzc2VydDogSW52YWxpZCBNdWx0aUZhY3RvclJlc29sdmVyXCIpO3RoaXMuYT1hO3RoaXMuZj1sYihiKTt0aGlzLmc9Yzt0aGlzLmM9bmV3IHZnKG51bGwsZCk7dGhpcy5iPVtdO3ZhciBlPXRoaXM7dyhiW2NtXXx8W10sZnVuY3Rpb24oZil7KGY9cWYoZikpJiZlLmIucHVzaChmKX0pO0sodGhpcyxcImF1dGhcIix0aGlzLmEpO0sodGhpcyxcInNlc3Npb25cIix0aGlzLmMpO0sodGhpcyxcImhpbnRzXCIsdGhpcy5iKX12YXIgY209XCJtZmFJbmZvXCIsYm09XCJtZmFQZW5kaW5nQ3JlZGVudGlhbFwiO2FtLnByb3RvdHlwZS5QYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBhLm9iKHRoaXMuYS5iLHRoaXMuYykudGhlbihmdW5jdGlvbihjKXt2YXIgZD1sYihiLmYpO2RlbGV0ZSBkW2NtXTtkZWxldGUgZFtibV07eihkLGMpO3JldHVybiBiLmcoZCl9KX07ZnVuY3Rpb24gZG0oYSxiLGMsZCl7dC5jYWxsKHRoaXMsXCJtdWx0aS1mYWN0b3ItYXV0aC1yZXF1aXJlZFwiLGQsYik7dGhpcy5iPW5ldyBhbShhLGIsYyk7Syh0aGlzLFwicmVzb2x2ZXJcIix0aGlzLmIpfXIoZG0sdCk7ZnVuY3Rpb24gZW0oYSxiLGMpe2lmKGEmJm4oYS5zZXJ2ZXJSZXNwb25zZSkmJlwiYXV0aC9tdWx0aS1mYWN0b3ItYXV0aC1yZXF1aXJlZFwiPT09YS5jb2RlKXRyeXtyZXR1cm4gbmV3IGRtKGIsYS5zZXJ2ZXJSZXNwb25zZSxjLGEubWVzc2FnZSl9Y2F0Y2goZCl7fXJldHVybiBudWxsfTtmdW5jdGlvbiBmbSgpe31mbS5wcm90b3R5cGUub2I9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiLnR5cGU9PXdnP2dtKHRoaXMsYSxiLGMpOmhtKHRoaXMsYSxiKX07ZnVuY3Rpb24gZ20oYSxiLGMsZCl7cmV0dXJuIGMuRmEoKS50aGVuKGZ1bmN0aW9uKGUpe2U9e2lkVG9rZW46ZX07XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkJiYoZS5kaXNwbGF5TmFtZT1kKTt6KGUse3Bob25lVmVyaWZpY2F0aW9uSW5mbzpkaChhLmEpfSk7cmV0dXJuIE4oYixBaixlKX0pfWZ1bmN0aW9uIGhtKGEsYixjKXtyZXR1cm4gYy5GYSgpLnRoZW4oZnVuY3Rpb24oZCl7ZD17bWZhUGVuZGluZ0NyZWRlbnRpYWw6ZH07eihkLHtwaG9uZVZlcmlmaWNhdGlvbkluZm86ZGgoYS5hKX0pO3JldHVybiBOKGIsQmosZCl9KX1mdW5jdGlvbiBpbShhKXtLKHRoaXMsXCJmYWN0b3JJZFwiLGEuZWEpO3RoaXMuYT1hfXIoaW0sZm0pO1xuZnVuY3Rpb24gam0oYSl7aW0uY2FsbCh0aGlzLGEpO2lmKHRoaXMuYS5lYSE9aGguUFJPVklERVJfSUQpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiZmlyZWJhc2UuYXV0aC5QaG9uZU11bHRpRmFjdG9yQXNzZXJ0aW9uIHJlcXVpcmVzIGEgdmFsaWQgZmlyZWJhc2UuYXV0aC5QaG9uZUF1dGhDcmVkZW50aWFsXCIpO31yKGptLGltKTtmdW5jdGlvbiBrbShhLGIpe0YuY2FsbCh0aGlzLGEpO2Zvcih2YXIgYyBpbiBiKXRoaXNbY109YltjXX1yKGttLEYpO2Z1bmN0aW9uIGxtKGEsYil7dGhpcy5hPWE7dGhpcy5iPVtdO3RoaXMuYz1xKHRoaXMud2MsdGhpcyk7amQodGhpcy5hLFwidXNlclJlbG9hZGVkXCIsdGhpcy5jKTt2YXIgYz1bXTtiJiZiLm11bHRpRmFjdG9yJiZiLm11bHRpRmFjdG9yLmVucm9sbGVkRmFjdG9ycyYmdyhiLm11bHRpRmFjdG9yLmVucm9sbGVkRmFjdG9ycyxmdW5jdGlvbihkKXt2YXIgZT1udWxsLGY9e307aWYoZCl7ZC51aWQmJihmW25mXT1kLnVpZCk7ZC5kaXNwbGF5TmFtZSYmKGZbb2ZdPWQuZGlzcGxheU5hbWUpO2QuZW5yb2xsbWVudFRpbWUmJihmW3BmXT0obmV3IERhdGUoZC5lbnJvbGxtZW50VGltZSkpLnRvSVNPU3RyaW5nKCkpO2QucGhvbmVOdW1iZXImJihmW21mXT1kLnBob25lTnVtYmVyKTt0cnl7ZT1uZXcgcmYoZil9Y2F0Y2goZyl7fWQ9ZX1lbHNlIGQ9bnVsbDtkJiZjLnB1c2goZCl9KTttbSh0aGlzLGMpfVxuZnVuY3Rpb24gbm0oYSl7dmFyIGI9W107dyhhLm1mYUluZm98fFtdLGZ1bmN0aW9uKGMpeyhjPXFmKGMpKSYmYi5wdXNoKGMpfSk7cmV0dXJuIGJ9az1sbS5wcm90b3R5cGU7ay53Yz1mdW5jdGlvbihhKXttbSh0aGlzLG5tKGEuZWQpKX07ZnVuY3Rpb24gbW0oYSxiKXthLmI9YjtLKGEsXCJlbnJvbGxlZEZhY3RvcnNcIixiKX1rLk9iPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYS5JKCkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gbmV3IHZnKGEsbnVsbCl9KX07ay5kYz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMsZD10aGlzLmEuYTtyZXR1cm4gdGhpcy5PYigpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGEub2IoZCxlLGIpfSkudGhlbihmdW5jdGlvbihlKXtvbShjLmEsZSk7cmV0dXJuIGMuYS5yZWxvYWQoKX0pfTtcbmsuJGM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPVwic3RyaW5nXCI9PT10eXBlb2YgYT9hOmEudWlkLGQ9dGhpcy5hLmE7cmV0dXJuIHRoaXMuYS5JKCkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gTihkLEZqLHtpZFRva2VuOmUsbWZhRW5yb2xsbWVudElkOmN9KX0pLnRoZW4oZnVuY3Rpb24oZSl7dmFyIGY9T2EoYi5iLGZ1bmN0aW9uKGcpe3JldHVybiBnLnVpZCE9Y30pO21tKGIsZik7b20oYi5hLGUpO3JldHVybiBiLmEucmVsb2FkKCkubyhmdW5jdGlvbihnKXtpZihcImF1dGgvdXNlci10b2tlbi1leHBpcmVkXCIhPWcuY29kZSl0aHJvdyBnO30pfSl9O2sudj1mdW5jdGlvbigpe3JldHVybnttdWx0aUZhY3Rvcjp7ZW5yb2xsZWRGYWN0b3JzOlBhKHRoaXMuYixmdW5jdGlvbihhKXtyZXR1cm4gYS52KCl9KX19fTtmdW5jdGlvbiBwbShhLGIsYyl7dGhpcy5oPWE7dGhpcy5pPWI7dGhpcy5nPWM7dGhpcy5jPTNFNDt0aGlzLmY9OTZFNDt0aGlzLmI9bnVsbDt0aGlzLmE9dGhpcy5jO2lmKHRoaXMuZjx0aGlzLmMpdGhyb3cgRXJyb3IoXCJQcm9hY3RpdmUgcmVmcmVzaCBsb3dlciBib3VuZCBncmVhdGVyIHRoYW4gdXBwZXIgYm91bmQhXCIpO31wbS5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXt0aGlzLmE9dGhpcy5jO3FtKHRoaXMsITApfTtmdW5jdGlvbiBybShhLGIpe2lmKGIpcmV0dXJuIGEuYT1hLmMsYS5nKCk7Yj1hLmE7YS5hKj0yO2EuYT5hLmYmJihhLmE9YS5mKTtyZXR1cm4gYn1mdW5jdGlvbiBxbShhLGIpe2Euc3RvcCgpO2EuYj1CZChybShhLGIpKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIFllKCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuaCgpfSkudGhlbihmdW5jdGlvbigpe3FtKGEsITApfSkubyhmdW5jdGlvbihjKXthLmkoYykmJnFtKGEsITEpfSl9XG5wbS5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3RoaXMuYiYmKHRoaXMuYi5jYW5jZWwoKSx0aGlzLmI9bnVsbCl9O2Z1bmN0aW9uIHNtKGEpe3RoaXMuYz1hO3RoaXMuYj10aGlzLmE9bnVsbH1zbS5wcm90b3R5cGUudj1mdW5jdGlvbigpe3JldHVybnthcGlLZXk6dGhpcy5jLmMscmVmcmVzaFRva2VuOnRoaXMuYSxhY2Nlc3NUb2tlbjp0aGlzLmImJnRoaXMuYi50b1N0cmluZygpLGV4cGlyYXRpb25UaW1lOnRtKHRoaXMpfX07ZnVuY3Rpb24gdG0oYSl7cmV0dXJuIGEuYiYmMUUzKmEuYi5jfHwwfWZ1bmN0aW9uIHVtKGEsYil7dmFyIGM9Yi5yZWZyZXNoVG9rZW47YS5iPWdnKGJbQWddfHxcIlwiKTthLmE9Y31mdW5jdGlvbiB2bShhLGIpe2EuYj1iLmI7YS5hPWIuYX1cbmZ1bmN0aW9uIHdtKGEsYil7cmV0dXJuIFFpKGEuYyxiKS50aGVuKGZ1bmN0aW9uKGMpe2EuYj1nZyhjLmFjY2Vzc190b2tlbik7YS5hPWMucmVmcmVzaF90b2tlbjtyZXR1cm57YWNjZXNzVG9rZW46YS5iLnRvU3RyaW5nKCkscmVmcmVzaFRva2VuOmEuYX19KS5vKGZ1bmN0aW9uKGMpe1wiYXV0aC91c2VyLXRva2VuLWV4cGlyZWRcIj09Yy5jb2RlJiYoYS5hPW51bGwpO3Rocm93IGM7fSl9c20ucHJvdG90eXBlLmdldFRva2VuPWZ1bmN0aW9uKGEpe2E9ISFhO3JldHVybiB0aGlzLmImJiF0aGlzLmE/RShuZXcgdChcInVzZXItdG9rZW4tZXhwaXJlZFwiKSk6YXx8IXRoaXMuYnx8dWEoKT50bSh0aGlzKS0zRTQ/dGhpcy5hP3dtKHRoaXMse2dyYW50X3R5cGU6XCJyZWZyZXNoX3Rva2VuXCIscmVmcmVzaF90b2tlbjp0aGlzLmF9KTpEKG51bGwpOkQoe2FjY2Vzc1Rva2VuOnRoaXMuYi50b1N0cmluZygpLHJlZnJlc2hUb2tlbjp0aGlzLmF9KX07ZnVuY3Rpb24geG0oYSxiKXt0aGlzLmE9YXx8bnVsbDt0aGlzLmI9Ynx8bnVsbDtMKHRoaXMse2xhc3RTaWduSW5UaW1lOlplKGJ8fG51bGwpLGNyZWF0aW9uVGltZTpaZShhfHxudWxsKX0pfWZ1bmN0aW9uIHltKGEpe3JldHVybiBuZXcgeG0oYS5hLGEuYil9eG0ucHJvdG90eXBlLnY9ZnVuY3Rpb24oKXtyZXR1cm57bGFzdExvZ2luQXQ6dGhpcy5iLGNyZWF0ZWRBdDp0aGlzLmF9fTtmdW5jdGlvbiB6bShhLGIsYyxkLGUsZil7TCh0aGlzLHt1aWQ6YSxkaXNwbGF5TmFtZTpkfHxudWxsLHBob3RvVVJMOmV8fG51bGwsZW1haWw6Y3x8bnVsbCxwaG9uZU51bWJlcjpmfHxudWxsLHByb3ZpZGVySWQ6Yn0pfVxuZnVuY3Rpb24gUChhLGIsYyl7dGhpcy5OPVtdO3RoaXMubD1hLmFwaUtleTt0aGlzLm09YS5hcHBOYW1lO3RoaXMucz1hLmF1dGhEb21haW58fG51bGw7YT1maXJlYmFzZS5TREtfVkVSU0lPTj9MZShmaXJlYmFzZS5TREtfVkVSU0lPTik6bnVsbDt0aGlzLmE9bmV3IEVpKHRoaXMubCxBYShCYSksYSk7dGhpcy5iPW5ldyBzbSh0aGlzLmEpO0FtKHRoaXMsYltBZ10pO3VtKHRoaXMuYixiKTtLKHRoaXMsXCJyZWZyZXNoVG9rZW5cIix0aGlzLmIuYSk7Qm0odGhpcyxjfHx7fSk7Ry5jYWxsKHRoaXMpO3RoaXMuUD0hMTt0aGlzLnMmJk9lKCkmJih0aGlzLmk9UGwodGhpcy5zLHRoaXMubCx0aGlzLm0pKTt0aGlzLlI9W107dGhpcy5oPW51bGw7dGhpcy5CPUNtKHRoaXMpO3RoaXMuWj1xKHRoaXMuTWEsdGhpcyk7dmFyIGQ9dGhpczt0aGlzLm9hPW51bGw7dGhpcy56YT1mdW5jdGlvbihlKXtkLnZhKGUuZyl9O3RoaXMuYWE9bnVsbDt0aGlzLlc9W107dGhpcy55YT1mdW5jdGlvbihlKXtEbShkLFxuZS5jKX07dGhpcy4kPW51bGw7dGhpcy5PPW5ldyBsbSh0aGlzLGMpO0sodGhpcyxcIm11bHRpRmFjdG9yXCIsdGhpcy5PKX1yKFAsRyk7UC5wcm90b3R5cGUudmE9ZnVuY3Rpb24oYSl7dGhpcy5vYT1hO0tpKHRoaXMuYSxhKX07UC5wcm90b3R5cGUuamE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vYX07ZnVuY3Rpb24gRW0oYSxiKXthLmFhJiZ0ZChhLmFhLFwibGFuZ3VhZ2VDb2RlQ2hhbmdlZFwiLGEuemEpOyhhLmFhPWIpJiZqZChiLFwibGFuZ3VhZ2VDb2RlQ2hhbmdlZFwiLGEuemEpfWZ1bmN0aW9uIERtKGEsYil7YS5XPWI7TGkoYS5hLGZpcmViYXNlLlNES19WRVJTSU9OP0xlKGZpcmViYXNlLlNES19WRVJTSU9OLGEuVyk6bnVsbCl9UC5wcm90b3R5cGUuRWE9ZnVuY3Rpb24oKXtyZXR1cm4gWGEodGhpcy5XKX07ZnVuY3Rpb24gRm0oYSxiKXthLiQmJnRkKGEuJCxcImZyYW1ld29ya0NoYW5nZWRcIixhLnlhKTsoYS4kPWIpJiZqZChiLFwiZnJhbWV3b3JrQ2hhbmdlZFwiLGEueWEpfVxuUC5wcm90b3R5cGUuTWE9ZnVuY3Rpb24oKXt0aGlzLkIuYiYmKHRoaXMuQi5zdG9wKCksdGhpcy5CLnN0YXJ0KCkpfTtmdW5jdGlvbiBHbShhKXt0cnl7cmV0dXJuIGZpcmViYXNlLmFwcChhLm0pLmF1dGgoKX1jYXRjaChiKXt0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIsXCJObyBmaXJlYmFzZS5hdXRoLkF1dGggaW5zdGFuY2UgaXMgYXZhaWxhYmxlIGZvciB0aGUgRmlyZWJhc2UgQXBwICdcIithLm0rXCInIVwiKTt9fWZ1bmN0aW9uIENtKGEpe3JldHVybiBuZXcgcG0oZnVuY3Rpb24oKXtyZXR1cm4gYS5JKCEwKX0sZnVuY3Rpb24oYil7cmV0dXJuIGImJlwiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI9PWIuY29kZT8hMDohMX0sZnVuY3Rpb24oKXt2YXIgYj10bShhLmIpLXVhKCktM0U1O3JldHVybiAwPGI/YjowfSl9XG5mdW5jdGlvbiBIbShhKXthLkR8fGEuQi5ifHwoYS5CLnN0YXJ0KCksdGQoYSxcInRva2VuQ2hhbmdlZFwiLGEuWiksamQoYSxcInRva2VuQ2hhbmdlZFwiLGEuWikpfWZ1bmN0aW9uIEltKGEpe3RkKGEsXCJ0b2tlbkNoYW5nZWRcIixhLlopO2EuQi5zdG9wKCl9ZnVuY3Rpb24gQW0oYSxiKXthLnhhPWI7SyhhLFwiX2xhdFwiLGIpfWZ1bmN0aW9uIEptKGEsYil7VmEoYS5SLGZ1bmN0aW9uKGMpe3JldHVybiBjPT1ifSl9ZnVuY3Rpb24gS20oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGEuUi5sZW5ndGg7YysrKWIucHVzaChhLlJbY10oYSkpO3JldHVybiBGYyhiKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KX1mdW5jdGlvbiBMbShhKXthLmkmJiFhLlAmJihhLlA9ITAsSGwoYS5pLGEpKX1cbmZ1bmN0aW9uIEJtKGEsYil7TChhLHt1aWQ6Yi51aWQsZGlzcGxheU5hbWU6Yi5kaXNwbGF5TmFtZXx8bnVsbCxwaG90b1VSTDpiLnBob3RvVVJMfHxudWxsLGVtYWlsOmIuZW1haWx8fG51bGwsZW1haWxWZXJpZmllZDpiLmVtYWlsVmVyaWZpZWR8fCExLHBob25lTnVtYmVyOmIucGhvbmVOdW1iZXJ8fG51bGwsaXNBbm9ueW1vdXM6Yi5pc0Fub255bW91c3x8ITEsdGVuYW50SWQ6Yi50ZW5hbnRJZHx8bnVsbCxtZXRhZGF0YTpuZXcgeG0oYi5jcmVhdGVkQXQsYi5sYXN0TG9naW5BdCkscHJvdmlkZXJEYXRhOltdfSk7YS5hLmI9YS50ZW5hbnRJZH1LKFAucHJvdG90eXBlLFwicHJvdmlkZXJJZFwiLFwiZmlyZWJhc2VcIik7ZnVuY3Rpb24gTW0oKXt9ZnVuY3Rpb24gTm0oYSl7cmV0dXJuIEQoKS50aGVuKGZ1bmN0aW9uKCl7aWYoYS5EKXRocm93IG5ldyB0KFwiYXBwLWRlbGV0ZWRcIik7fSl9XG5mdW5jdGlvbiBPbShhKXtyZXR1cm4gUGEoYS5wcm92aWRlckRhdGEsZnVuY3Rpb24oYil7cmV0dXJuIGIucHJvdmlkZXJJZH0pfWZ1bmN0aW9uIFBtKGEsYil7YiYmKFFtKGEsYi5wcm92aWRlcklkKSxhLnByb3ZpZGVyRGF0YS5wdXNoKGIpKX1mdW5jdGlvbiBRbShhLGIpe1ZhKGEucHJvdmlkZXJEYXRhLGZ1bmN0aW9uKGMpe3JldHVybiBjLnByb3ZpZGVySWQ9PWJ9KX1mdW5jdGlvbiBSbShhLGIsYyl7KFwidWlkXCIhPWJ8fGMpJiZhLmhhc093blByb3BlcnR5KGIpJiZLKGEsYixjKX1cbmZ1bmN0aW9uIFNtKGEsYil7YSE9YiYmKEwoYSx7dWlkOmIudWlkLGRpc3BsYXlOYW1lOmIuZGlzcGxheU5hbWUscGhvdG9VUkw6Yi5waG90b1VSTCxlbWFpbDpiLmVtYWlsLGVtYWlsVmVyaWZpZWQ6Yi5lbWFpbFZlcmlmaWVkLHBob25lTnVtYmVyOmIucGhvbmVOdW1iZXIsaXNBbm9ueW1vdXM6Yi5pc0Fub255bW91cyx0ZW5hbnRJZDpiLnRlbmFudElkLHByb3ZpZGVyRGF0YTpbXX0pLGIubWV0YWRhdGE/SyhhLFwibWV0YWRhdGFcIix5bShiLm1ldGFkYXRhKSk6SyhhLFwibWV0YWRhdGFcIixuZXcgeG0pLHcoYi5wcm92aWRlckRhdGEsZnVuY3Rpb24oYyl7UG0oYSxjKX0pLHZtKGEuYixiLmIpLEsoYSxcInJlZnJlc2hUb2tlblwiLGEuYi5hKSxtbShhLk8sYi5PLmIpKX1rPVAucHJvdG90eXBlO2sucmVsb2FkPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gUih0aGlzLE5tKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gVG0oYSkudGhlbihmdW5jdGlvbigpe3JldHVybiBLbShhKX0pLnRoZW4oTW0pfSkpfTtcbmZ1bmN0aW9uIFRtKGEpe3JldHVybiBhLkkoKS50aGVuKGZ1bmN0aW9uKGIpe3ZhciBjPWEuaXNBbm9ueW1vdXM7cmV0dXJuIFVtKGEsYikudGhlbihmdW5jdGlvbigpe2N8fFJtKGEsXCJpc0Fub255bW91c1wiLCExKTtyZXR1cm4gYn0pfSl9ay5tYz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5JKGEpLnRoZW4oZnVuY3Rpb24oYil7cmV0dXJuIG5ldyAkbChiKX0pfTtrLkk9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gUih0aGlzLE5tKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYi5iLmdldFRva2VuKGEpfSkudGhlbihmdW5jdGlvbihjKXtpZighYyl0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO2MuYWNjZXNzVG9rZW4hPWIueGEmJihBbShiLGMuYWNjZXNzVG9rZW4pLGIuZGlzcGF0Y2hFdmVudChuZXcga20oXCJ0b2tlbkNoYW5nZWRcIikpKTtSbShiLFwicmVmcmVzaFRva2VuXCIsYy5yZWZyZXNoVG9rZW4pO3JldHVybiBjLmFjY2Vzc1Rva2VufSkpfTtcbmZ1bmN0aW9uIG9tKGEsYil7YltBZ10mJmEueGEhPWJbQWddJiYodW0oYS5iLGIpLGEuZGlzcGF0Y2hFdmVudChuZXcga20oXCJ0b2tlbkNoYW5nZWRcIikpLEFtKGEsYltBZ10pLFJtKGEsXCJyZWZyZXNoVG9rZW5cIixhLmIuYSkpfWZ1bmN0aW9uIFVtKGEsYil7cmV0dXJuIE4oYS5hLENqLHtpZFRva2VuOmJ9KS50aGVuKHEoYS5JYyxhKSl9XG5rLkljPWZ1bmN0aW9uKGEpe2E9YS51c2VycztpZighYXx8IWEubGVuZ3RoKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIik7YT1hWzBdO0JtKHRoaXMse3VpZDphLmxvY2FsSWQsZGlzcGxheU5hbWU6YS5kaXNwbGF5TmFtZSxwaG90b1VSTDphLnBob3RvVXJsLGVtYWlsOmEuZW1haWwsZW1haWxWZXJpZmllZDohIWEuZW1haWxWZXJpZmllZCxwaG9uZU51bWJlcjphLnBob25lTnVtYmVyLGxhc3RMb2dpbkF0OmEubGFzdExvZ2luQXQsY3JlYXRlZEF0OmEuY3JlYXRlZEF0LHRlbmFudElkOmEudGVuYW50SWR9KTtmb3IodmFyIGI9Vm0oYSksYz0wO2M8Yi5sZW5ndGg7YysrKVBtKHRoaXMsYltjXSk7Um0odGhpcyxcImlzQW5vbnltb3VzXCIsISh0aGlzLmVtYWlsJiZhLnBhc3N3b3JkSGFzaCkmJiEodGhpcy5wcm92aWRlckRhdGEmJnRoaXMucHJvdmlkZXJEYXRhLmxlbmd0aCkpO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcga20oXCJ1c2VyUmVsb2FkZWRcIix7ZWQ6YX0pKX07XG5mdW5jdGlvbiBWbShhKXtyZXR1cm4oYT1hLnByb3ZpZGVyVXNlckluZm8pJiZhLmxlbmd0aD9QYShhLGZ1bmN0aW9uKGIpe3JldHVybiBuZXcgem0oYi5yYXdJZCxiLnByb3ZpZGVySWQsYi5lbWFpbCxiLmRpc3BsYXlOYW1lLGIucGhvdG9VcmwsYi5waG9uZU51bWJlcil9KTpbXX1rLkpjPWZ1bmN0aW9uKGEpe2RmKFwiZmlyZWJhc2UuVXNlci5wcm90b3R5cGUucmVhdXRoZW50aWNhdGVBbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpcmViYXNlLlVzZXIucHJvdG90eXBlLnJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWwgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMucGIoYSl9O1xuay5wYj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9bnVsbDtyZXR1cm4gUih0aGlzLGEuYyh0aGlzLmEsdGhpcy51aWQpLnRoZW4oZnVuY3Rpb24oZCl7b20oYixkKTtjPVdtKGIsZCxcInJlYXV0aGVudGljYXRlXCIpO2IuaD1udWxsO3JldHVybiBiLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBjfSksITApfTtmdW5jdGlvbiBYbShhLGIpe3JldHVybiBUbShhKS50aGVuKGZ1bmN0aW9uKCl7aWYoVGEoT20oYSksYikpcmV0dXJuIEttKGEpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyBuZXcgdChcInByb3ZpZGVyLWFscmVhZHktbGlua2VkXCIpO30pfSl9ay5BYz1mdW5jdGlvbihhKXtkZihcImZpcmViYXNlLlVzZXIucHJvdG90eXBlLmxpbmtBbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpcmViYXNlLlVzZXIucHJvdG90eXBlLmxpbmtXaXRoQ3JlZGVudGlhbCBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpcy5tYihhKX07XG5rLm1iPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1udWxsO3JldHVybiBSKHRoaXMsWG0odGhpcyxhLnByb3ZpZGVySWQpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYi5JKCl9KS50aGVuKGZ1bmN0aW9uKGQpe3JldHVybiBhLmIoYi5hLGQpfSkudGhlbihmdW5jdGlvbihkKXtjPVdtKGIsZCxcImxpbmtcIik7cmV0dXJuIFltKGIsZCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGN9KSl9O2suQmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBSKHRoaXMsWG0odGhpcyxcInBob25lXCIpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gWmwoR20oYyksYSxiLHEoYy5tYixjKSl9KSl9O2suS2M9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBSKHRoaXMsRCgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gWmwoR20oYyksYSxiLHEoYy5wYixjKSl9KSwhMCl9O1xuZnVuY3Rpb24gV20oYSxiLGMpe3ZhciBkPW1oKGIpO2I9bGcoYik7cmV0dXJuIGdmKHt1c2VyOmEsY3JlZGVudGlhbDpkLGFkZGl0aW9uYWxVc2VySW5mbzpiLG9wZXJhdGlvblR5cGU6Y30pfWZ1bmN0aW9uIFltKGEsYil7b20oYSxiKTtyZXR1cm4gYS5yZWxvYWQoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KX1rLnhiPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBiLmEueGIoYyxhKX0pLnRoZW4oZnVuY3Rpb24oYyl7b20oYixjKTtyZXR1cm4gYi5yZWxvYWQoKX0pKX07ay5jZD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBSKHRoaXMsdGhpcy5JKCkudGhlbihmdW5jdGlvbihjKXtyZXR1cm4gYS5iKGIuYSxjKX0pLnRoZW4oZnVuY3Rpb24oYyl7b20oYixjKTtyZXR1cm4gYi5yZWxvYWQoKX0pKX07XG5rLnliPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBiLmEueWIoYyxhKX0pLnRoZW4oZnVuY3Rpb24oYyl7b20oYixjKTtyZXR1cm4gYi5yZWxvYWQoKX0pKX07XG5rLnpiPWZ1bmN0aW9uKGEpe2lmKHZvaWQgMD09PWEuZGlzcGxheU5hbWUmJnZvaWQgMD09PWEucGhvdG9VUkwpcmV0dXJuIE5tKHRoaXMpO3ZhciBiPXRoaXM7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGMpe3JldHVybiBiLmEuemIoYyx7ZGlzcGxheU5hbWU6YS5kaXNwbGF5TmFtZSxwaG90b1VybDphLnBob3RvVVJMfSl9KS50aGVuKGZ1bmN0aW9uKGMpe29tKGIsYyk7Um0oYixcImRpc3BsYXlOYW1lXCIsYy5kaXNwbGF5TmFtZXx8bnVsbCk7Um0oYixcInBob3RvVVJMXCIsYy5waG90b1VybHx8bnVsbCk7dyhiLnByb3ZpZGVyRGF0YSxmdW5jdGlvbihkKXtcInBhc3N3b3JkXCI9PT1kLnByb3ZpZGVySWQmJihLKGQsXCJkaXNwbGF5TmFtZVwiLGIuZGlzcGxheU5hbWUpLEsoZCxcInBob3RvVVJMXCIsYi5waG90b1VSTCkpfSk7cmV0dXJuIEttKGIpfSkudGhlbihNbSkpfTtcbmsuYWQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gUih0aGlzLFRtKHRoaXMpLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIFRhKE9tKGIpLGEpP2xqKGIuYSxjLFthXSkudGhlbihmdW5jdGlvbihkKXt2YXIgZT17fTt3KGQucHJvdmlkZXJVc2VySW5mb3x8W10sZnVuY3Rpb24oZil7ZVtmLnByb3ZpZGVySWRdPSEwfSk7dyhPbShiKSxmdW5jdGlvbihmKXtlW2ZdfHxRbShiLGYpfSk7ZVtoaC5QUk9WSURFUl9JRF18fEsoYixcInBob25lTnVtYmVyXCIsbnVsbCk7cmV0dXJuIEttKGIpfSk6S20oYikudGhlbihmdW5jdGlvbigpe3Rocm93IG5ldyB0KFwibm8tc3VjaC1wcm92aWRlclwiKTt9KX0pKX07XG5rLmRlbGV0ZT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGIpe3JldHVybiBOKGEuYSx6aix7aWRUb2tlbjpifSl9KS50aGVuKGZ1bmN0aW9uKCl7YS5kaXNwYXRjaEV2ZW50KG5ldyBrbShcInVzZXJEZWxldGVkXCIpKX0pKS50aGVuKGZ1bmN0aW9uKCl7Zm9yKHZhciBiPTA7YjxhLk4ubGVuZ3RoO2IrKylhLk5bYl0uY2FuY2VsKFwiYXBwLWRlbGV0ZWRcIik7RW0oYSxudWxsKTtGbShhLG51bGwpO2EuTj1bXTthLkQ9ITA7SW0oYSk7SyhhLFwicmVmcmVzaFRva2VuXCIsbnVsbCk7YS5pJiZJbChhLmksYSl9KX07XG5rLkNiPWZ1bmN0aW9uKGEsYil7cmV0dXJuXCJsaW5rVmlhUG9wdXBcIj09YSYmKHRoaXMuZ3x8bnVsbCk9PWImJnRoaXMuZnx8XCJyZWF1dGhWaWFQb3B1cFwiPT1hJiYodGhpcy5nfHxudWxsKT09YiYmdGhpcy5mfHxcImxpbmtWaWFSZWRpcmVjdFwiPT1hJiYodGhpcy5mYXx8bnVsbCk9PWJ8fFwicmVhdXRoVmlhUmVkaXJlY3RcIj09YSYmKHRoaXMuZmF8fG51bGwpPT1iPyEwOiExfTtrLmxhPWZ1bmN0aW9uKGEsYixjLGQpe1wibGlua1ZpYVBvcHVwXCIhPWEmJlwicmVhdXRoVmlhUG9wdXBcIiE9YXx8ZCE9KHRoaXMuZ3x8bnVsbCl8fChjJiZ0aGlzLnc/dGhpcy53KGMpOmImJiFjJiZ0aGlzLmYmJnRoaXMuZihiKSx0aGlzLmMmJih0aGlzLmMuY2FuY2VsKCksdGhpcy5jPW51bGwpLGRlbGV0ZSB0aGlzLmYsZGVsZXRlIHRoaXMudyl9O1xuay5EYT1mdW5jdGlvbihhLGIpe3JldHVyblwibGlua1ZpYVBvcHVwXCI9PWEmJmI9PSh0aGlzLmd8fG51bGwpP3EodGhpcy5IYix0aGlzKTpcInJlYXV0aFZpYVBvcHVwXCI9PWEmJmI9PSh0aGlzLmd8fG51bGwpP3EodGhpcy5JYix0aGlzKTpcImxpbmtWaWFSZWRpcmVjdFwiPT1hJiYodGhpcy5mYXx8bnVsbCk9PWI/cSh0aGlzLkhiLHRoaXMpOlwicmVhdXRoVmlhUmVkaXJlY3RcIj09YSYmKHRoaXMuZmF8fG51bGwpPT1iP3EodGhpcy5JYix0aGlzKTpudWxsfTtrLkNjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIFptKHRoaXMsXCJsaW5rVmlhUG9wdXBcIixhLGZ1bmN0aW9uKCl7cmV0dXJuIFhtKGIsYS5wcm92aWRlcklkKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIEttKGIpfSl9LCExKX07ay5MYz1mdW5jdGlvbihhKXtyZXR1cm4gWm0odGhpcyxcInJlYXV0aFZpYVBvcHVwXCIsYSxmdW5jdGlvbigpe3JldHVybiBEKCl9LCEwKX07XG5mdW5jdGlvbiBabShhLGIsYyxkLGUpe2lmKCFPZSgpKXJldHVybiBFKG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7aWYoYS5oJiYhZSlyZXR1cm4gRShhLmgpO3ZhciBmPWtnKGMucHJvdmlkZXJJZCksZz1OZShhLnVpZCtcIjo6OlwiKSxoPW51bGw7KCFRZSgpfHxGZSgpKSYmYS5zJiZjLmlzT0F1dGhQcm92aWRlciYmKGg9WWooYS5zLGEubCxhLm0sYixjLG51bGwsZyxmaXJlYmFzZS5TREtfVkVSU0lPTnx8bnVsbCxudWxsLG51bGwsYS50ZW5hbnRJZCkpO3ZhciBtPXdlKGgsZiYmZi50YSxmJiZmLnNhKTtkPWQoKS50aGVuKGZ1bmN0aW9uKCl7JG0oYSk7aWYoIWUpcmV0dXJuIGEuSSgpLnRoZW4oZnVuY3Rpb24oKXt9KX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gTGwoYS5pLG0sYixjLGcsISFoLGEudGVuYW50SWQpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBuZXcgQihmdW5jdGlvbihwLHYpe2EubGEoYixudWxsLG5ldyB0KFwiY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3RcIiksXG5hLmd8fG51bGwpO2EuZj1wO2Eudz12O2EuZz1nO2EuYz1ObChhLmksYSxiLG0sZyl9KX0pLnRoZW4oZnVuY3Rpb24ocCl7bSYmdmUobSk7cmV0dXJuIHA/Z2YocCk6bnVsbH0pLm8oZnVuY3Rpb24ocCl7bSYmdmUobSk7dGhyb3cgcDt9KTtyZXR1cm4gUihhLGQsZSl9ay5EYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3JldHVybiBhbih0aGlzLFwibGlua1ZpYVJlZGlyZWN0XCIsYSxmdW5jdGlvbigpe3JldHVybiBYbShiLGEucHJvdmlkZXJJZCl9LCExKX07ay5NYz1mdW5jdGlvbihhKXtyZXR1cm4gYW4odGhpcyxcInJlYXV0aFZpYVJlZGlyZWN0XCIsYSxmdW5jdGlvbigpe3JldHVybiBEKCl9LCEwKX07XG5mdW5jdGlvbiBhbihhLGIsYyxkLGUpe2lmKCFPZSgpKXJldHVybiBFKG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7aWYoYS5oJiYhZSlyZXR1cm4gRShhLmgpO3ZhciBmPW51bGwsZz1OZShhLnVpZCtcIjo6OlwiKTtkPWQoKS50aGVuKGZ1bmN0aW9uKCl7JG0oYSk7aWYoIWUpcmV0dXJuIGEuSSgpLnRoZW4oZnVuY3Rpb24oKXt9KX0pLnRoZW4oZnVuY3Rpb24oKXthLmZhPWc7cmV0dXJuIEttKGEpfSkudGhlbihmdW5jdGlvbihoKXthLmdhJiYoaD1hLmdhLGg9aC5iLnNldChibixhLnYoKSxoLmEpKTtyZXR1cm4gaH0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gTWwoYS5pLGIsYyxnLGEudGVuYW50SWQpfSkubyhmdW5jdGlvbihoKXtmPWg7aWYoYS5nYSlyZXR1cm4gY24oYS5nYSk7dGhyb3cgZjt9KS50aGVuKGZ1bmN0aW9uKCl7aWYoZil0aHJvdyBmO30pO3JldHVybiBSKGEsZCxlKX1cbmZ1bmN0aW9uICRtKGEpe2lmKCFhLml8fCFhLlApe2lmKGEuaSYmIWEuUCl0aHJvdyBuZXcgdChcImludGVybmFsLWVycm9yXCIpO3Rocm93IG5ldyB0KFwiYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkXCIpO319ay5IYj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzO3RoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCk7dmFyIGY9bnVsbDtjPXRoaXMuSSgpLnRoZW4oZnVuY3Rpb24oZyl7cmV0dXJuIEVnKGUuYSx7cmVxdWVzdFVyaTphLHBvc3RCb2R5OmQsc2Vzc2lvbklkOmIsaWRUb2tlbjpnfSl9KS50aGVuKGZ1bmN0aW9uKGcpe2Y9V20oZSxnLFwibGlua1wiKTtyZXR1cm4gWW0oZSxnKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZn0pO3JldHVybiBSKHRoaXMsYyl9O1xuay5JYj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzO3RoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCk7dmFyIGY9bnVsbCxnPUQoKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHpnKEZnKGUuYSx7cmVxdWVzdFVyaTphLHNlc3Npb25JZDpiLHBvc3RCb2R5OmQsdGVuYW50SWQ6Y30pLGUudWlkKX0pLnRoZW4oZnVuY3Rpb24oaCl7Zj1XbShlLGgsXCJyZWF1dGhlbnRpY2F0ZVwiKTtvbShlLGgpO2UuaD1udWxsO3JldHVybiBlLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBmfSk7cmV0dXJuIFIodGhpcyxnLCEwKX07XG5rLnFiPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz1udWxsO3JldHVybiBSKHRoaXMsdGhpcy5JKCkudGhlbihmdW5jdGlvbihkKXtjPWQ7cmV0dXJuXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhfHxrYihhKT97fTpaZihuZXcgUGYoYSkpfSkudGhlbihmdW5jdGlvbihkKXtyZXR1cm4gYi5hLnFiKGMsZCl9KS50aGVuKGZ1bmN0aW9uKGQpe2lmKGIuZW1haWwhPWQpcmV0dXJuIGIucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7fSkpfTtrLkFiPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcyxkPW51bGw7cmV0dXJuIFIodGhpcyx0aGlzLkkoKS50aGVuKGZ1bmN0aW9uKGUpe2Q9ZTtyZXR1cm5cInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fGtiKGIpP3t9OlpmKG5ldyBQZihiKSl9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBjLmEuQWIoZCxhLGUpfSkudGhlbihmdW5jdGlvbihlKXtpZihjLmVtYWlsIT1lKXJldHVybiBjLnJlbG9hZCgpfSkudGhlbihmdW5jdGlvbigpe30pKX07XG5mdW5jdGlvbiBSKGEsYixjKXt2YXIgZD1kbihhLGIsYyk7YS5OLnB1c2goZCk7ZC5tYShmdW5jdGlvbigpe1VhKGEuTixkKX0pO3JldHVybiBkLm8oZnVuY3Rpb24oZSl7dmFyIGY9bnVsbDtlJiZcImF1dGgvbXVsdGktZmFjdG9yLWF1dGgtcmVxdWlyZWRcIj09PWUuY29kZSYmKGY9ZW0oZS52KCksR20oYSkscShhLmhjLGEpKSk7dGhyb3cgZnx8ZTt9KX1rLmhjPWZ1bmN0aW9uKGEpe3ZhciBiPW51bGwsYz10aGlzO2E9emcoRChhKSxjLnVpZCkudGhlbihmdW5jdGlvbihkKXtiPVdtKGMsZCxcInJlYXV0aGVudGljYXRlXCIpO29tKGMsZCk7Yy5oPW51bGw7cmV0dXJuIGMucmVsb2FkKCl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGJ9KTtyZXR1cm4gUih0aGlzLGEsITApfTtcbmZ1bmN0aW9uIGRuKGEsYixjKXtyZXR1cm4gYS5oJiYhYz8oYi5jYW5jZWwoKSxFKGEuaCkpOmIubyhmdW5jdGlvbihkKXshZHx8XCJhdXRoL3VzZXItZGlzYWJsZWRcIiE9ZC5jb2RlJiZcImF1dGgvdXNlci10b2tlbi1leHBpcmVkXCIhPWQuY29kZXx8KGEuaHx8YS5kaXNwYXRjaEV2ZW50KG5ldyBrbShcInVzZXJJbnZhbGlkYXRlZFwiKSksYS5oPWQpO3Rocm93IGQ7fSl9ay50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52KCl9O1xuay52PWZ1bmN0aW9uKCl7dmFyIGE9e3VpZDp0aGlzLnVpZCxkaXNwbGF5TmFtZTp0aGlzLmRpc3BsYXlOYW1lLHBob3RvVVJMOnRoaXMucGhvdG9VUkwsZW1haWw6dGhpcy5lbWFpbCxlbWFpbFZlcmlmaWVkOnRoaXMuZW1haWxWZXJpZmllZCxwaG9uZU51bWJlcjp0aGlzLnBob25lTnVtYmVyLGlzQW5vbnltb3VzOnRoaXMuaXNBbm9ueW1vdXMsdGVuYW50SWQ6dGhpcy50ZW5hbnRJZCxwcm92aWRlckRhdGE6W10sYXBpS2V5OnRoaXMubCxhcHBOYW1lOnRoaXMubSxhdXRoRG9tYWluOnRoaXMucyxzdHNUb2tlbk1hbmFnZXI6dGhpcy5iLnYoKSxyZWRpcmVjdEV2ZW50SWQ6dGhpcy5mYXx8bnVsbH07dGhpcy5tZXRhZGF0YSYmeihhLHRoaXMubWV0YWRhdGEudigpKTt3KHRoaXMucHJvdmlkZXJEYXRhLGZ1bmN0aW9uKGIpe2EucHJvdmlkZXJEYXRhLnB1c2goaGYoYikpfSk7eihhLHRoaXMuTy52KCkpO3JldHVybiBhfTtcbmZ1bmN0aW9uIGVuKGEpe2lmKCFhLmFwaUtleSlyZXR1cm4gbnVsbDt2YXIgYj17YXBpS2V5OmEuYXBpS2V5LGF1dGhEb21haW46YS5hdXRoRG9tYWluLGFwcE5hbWU6YS5hcHBOYW1lfSxjPXt9O2lmKGEuc3RzVG9rZW5NYW5hZ2VyJiZhLnN0c1Rva2VuTWFuYWdlci5hY2Nlc3NUb2tlbiljW0FnXT1hLnN0c1Rva2VuTWFuYWdlci5hY2Nlc3NUb2tlbixjLnJlZnJlc2hUb2tlbj1hLnN0c1Rva2VuTWFuYWdlci5yZWZyZXNoVG9rZW58fG51bGw7ZWxzZSByZXR1cm4gbnVsbDt2YXIgZD1uZXcgUChiLGMsYSk7YS5wcm92aWRlckRhdGEmJncoYS5wcm92aWRlckRhdGEsZnVuY3Rpb24oZSl7ZSYmUG0oZCxnZihlKSl9KTthLnJlZGlyZWN0RXZlbnRJZCYmKGQuZmE9YS5yZWRpcmVjdEV2ZW50SWQpO3JldHVybiBkfVxuZnVuY3Rpb24gZm4oYSxiLGMsZCl7dmFyIGU9bmV3IFAoYSxiKTtjJiYoZS5nYT1jKTtkJiZEbShlLGQpO3JldHVybiBlLnJlbG9hZCgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZX0pfWZ1bmN0aW9uIGduKGEsYixjLGQpe3ZhciBlPWEuYixmPXt9O2ZbQWddPWUuYiYmZS5iLnRvU3RyaW5nKCk7Zi5yZWZyZXNoVG9rZW49ZS5hO2I9bmV3IFAoYnx8e2FwaUtleTphLmwsYXV0aERvbWFpbjphLnMsYXBwTmFtZTphLm19LGYpO2MmJihiLmdhPWMpO2QmJkRtKGIsZCk7U20oYixhKTtyZXR1cm4gYn07ZnVuY3Rpb24gaG4oYSl7dGhpcy5hPWE7dGhpcy5iPU9rKCl9dmFyIGJuPXtuYW1lOlwicmVkaXJlY3RVc2VyXCIsRjpcInNlc3Npb25cIn07ZnVuY3Rpb24gY24oYSl7cmV0dXJuIFNrKGEuYixibixhLmEpfWZ1bmN0aW9uIGpuKGEsYil7cmV0dXJuIGEuYi5nZXQoYm4sYS5hKS50aGVuKGZ1bmN0aW9uKGMpe2MmJmImJihjLmF1dGhEb21haW49Yik7cmV0dXJuIGVuKGN8fHt9KX0pfTtmdW5jdGlvbiBrbihhKXt0aGlzLmE9YTt0aGlzLmI9T2soKTt0aGlzLmM9bnVsbDt0aGlzLmY9bG4odGhpcyk7dGhpcy5iLmFkZExpc3RlbmVyKG1uKFwibG9jYWxcIiksdGhpcy5hLHEodGhpcy5nLHRoaXMpKX1rbi5wcm90b3R5cGUuZz1mdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1tbihcImxvY2FsXCIpO25uKHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gRCgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5jJiZcImxvY2FsXCIhPWEuYy5GP2EuYi5nZXQoYixhLmEpOm51bGx9KS50aGVuKGZ1bmN0aW9uKGMpe2lmKGMpcmV0dXJuIG9uKGEsXCJsb2NhbFwiKS50aGVuKGZ1bmN0aW9uKCl7YS5jPWJ9KX0pfSl9O2Z1bmN0aW9uIG9uKGEsYil7dmFyIGM9W10sZDtmb3IoZCBpbiBLaylLa1tkXSE9PWImJmMucHVzaChTayhhLmIsbW4oS2tbZF0pLGEuYSkpO2MucHVzaChTayhhLmIscG4sYS5hKSk7cmV0dXJuIEVjKGMpfVxuZnVuY3Rpb24gbG4oYSl7dmFyIGI9bW4oXCJsb2NhbFwiKSxjPW1uKFwic2Vzc2lvblwiKSxkPW1uKFwibm9uZVwiKTtyZXR1cm4gUmsoYS5iLGIsYS5hKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGEuYi5nZXQoYyxhLmEpfSkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gZT9jOmEuYi5nZXQoZCxhLmEpLnRoZW4oZnVuY3Rpb24oZil7cmV0dXJuIGY/ZDphLmIuZ2V0KGIsYS5hKS50aGVuKGZ1bmN0aW9uKGcpe3JldHVybiBnP2I6YS5iLmdldChwbixhLmEpLnRoZW4oZnVuY3Rpb24oaCl7cmV0dXJuIGg/bW4oaCk6Yn0pfSl9KX0pLnRoZW4oZnVuY3Rpb24oZSl7YS5jPWU7cmV0dXJuIG9uKGEsZS5GKX0pLm8oZnVuY3Rpb24oKXthLmN8fChhLmM9Yil9KX12YXIgcG49e25hbWU6XCJwZXJzaXN0ZW5jZVwiLEY6XCJzZXNzaW9uXCJ9O2Z1bmN0aW9uIG1uKGEpe3JldHVybntuYW1lOlwiYXV0aFVzZXJcIixGOmF9fVxua24ucHJvdG90eXBlLnRiPWZ1bmN0aW9uKGEpe3ZhciBiPW51bGwsYz10aGlzO0xrKGEpO3JldHVybiBubih0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGEhPWMuYy5GP2MuYi5nZXQoYy5jLGMuYSkudGhlbihmdW5jdGlvbihkKXtiPWQ7cmV0dXJuIG9uKGMsYSl9KS50aGVuKGZ1bmN0aW9uKCl7Yy5jPW1uKGEpO2lmKGIpcmV0dXJuIGMuYi5zZXQoYy5jLGIsYy5hKX0pOkQoKX0pfTtmdW5jdGlvbiBxbihhKXtyZXR1cm4gbm4oYSxmdW5jdGlvbigpe3JldHVybiBhLmIuc2V0KHBuLGEuYy5GLGEuYSl9KX1mdW5jdGlvbiBybihhLGIpe3JldHVybiBubihhLGZ1bmN0aW9uKCl7cmV0dXJuIGEuYi5zZXQoYS5jLGIudigpLGEuYSl9KX1mdW5jdGlvbiBzbihhKXtyZXR1cm4gbm4oYSxmdW5jdGlvbigpe3JldHVybiBTayhhLmIsYS5jLGEuYSl9KX1cbmZ1bmN0aW9uIHRuKGEsYil7cmV0dXJuIG5uKGEsZnVuY3Rpb24oKXtyZXR1cm4gYS5iLmdldChhLmMsYS5hKS50aGVuKGZ1bmN0aW9uKGMpe2MmJmImJihjLmF1dGhEb21haW49Yik7cmV0dXJuIGVuKGN8fHt9KX0pfSl9ZnVuY3Rpb24gbm4oYSxiKXthLmY9YS5mLnRoZW4oYixiKTtyZXR1cm4gYS5mfTtmdW5jdGlvbiB1bihhKXt0aGlzLmw9ITE7Syh0aGlzLFwic2V0dGluZ3NcIixuZXcgWGwpO0sodGhpcyxcImFwcFwiLGEpO2lmKFModGhpcykub3B0aW9ucyYmUyh0aGlzKS5vcHRpb25zLmFwaUtleSlhPWZpcmViYXNlLlNES19WRVJTSU9OP0xlKGZpcmViYXNlLlNES19WRVJTSU9OKTpudWxsLHRoaXMuYj1uZXcgRWkoUyh0aGlzKS5vcHRpb25zJiZTKHRoaXMpLm9wdGlvbnMuYXBpS2V5LEFhKEJhKSxhKTtlbHNlIHRocm93IG5ldyB0KFwiaW52YWxpZC1hcGkta2V5XCIpO3RoaXMuUD1bXTt0aGlzLm09W107dGhpcy5PPVtdO3RoaXMuJGI9ZmlyZWJhc2UuSU5URVJOQUwuY3JlYXRlU3Vic2NyaWJlKHEodGhpcy54Yyx0aGlzKSk7dGhpcy5XPXZvaWQgMDt0aGlzLmFjPWZpcmViYXNlLklOVEVSTkFMLmNyZWF0ZVN1YnNjcmliZShxKHRoaXMueWMsdGhpcykpO3ZuKHRoaXMsbnVsbCk7dGhpcy5pPW5ldyBrbihTKHRoaXMpLm9wdGlvbnMuYXBpS2V5K1wiOlwiK1ModGhpcykubmFtZSk7dGhpcy5CPVxubmV3IGhuKFModGhpcykub3B0aW9ucy5hcGlLZXkrXCI6XCIrUyh0aGlzKS5uYW1lKTt0aGlzLlo9VCh0aGlzLHduKHRoaXMpKTt0aGlzLmg9VCh0aGlzLHhuKHRoaXMpKTt0aGlzLmFhPSExO3RoaXMub2E9cSh0aGlzLlhjLHRoaXMpO3RoaXMuTWE9cSh0aGlzLmNhLHRoaXMpO3RoaXMueGE9cSh0aGlzLmpjLHRoaXMpO3RoaXMueWE9cSh0aGlzLnVjLHRoaXMpO3RoaXMuemE9cSh0aGlzLnZjLHRoaXMpO3RoaXMuYT1udWxsO3luKHRoaXMpO3RoaXMuSU5URVJOQUw9e307dGhpcy5JTlRFUk5BTFtcImRlbGV0ZVwiXT1xKHRoaXMuZGVsZXRlLHRoaXMpO3RoaXMuSU5URVJOQUwubG9nRnJhbWV3b3JrPXEodGhpcy5FYyx0aGlzKTt0aGlzLnM9MDtHLmNhbGwodGhpcyk7em4odGhpcyk7dGhpcy5OPVtdfXIodW4sRyk7ZnVuY3Rpb24gQW4oYSl7Ri5jYWxsKHRoaXMsXCJsYW5ndWFnZUNvZGVDaGFuZ2VkXCIpO3RoaXMuZz1hfXIoQW4sRik7XG5mdW5jdGlvbiBCbihhKXtGLmNhbGwodGhpcyxcImZyYW1ld29ya0NoYW5nZWRcIik7dGhpcy5jPWF9cihCbixGKTtrPXVuLnByb3RvdHlwZTtrLnRiPWZ1bmN0aW9uKGEpe2E9dGhpcy5pLnRiKGEpO3JldHVybiBUKHRoaXMsYSl9O2sudmE9ZnVuY3Rpb24oYSl7dGhpcy4kPT09YXx8dGhpcy5sfHwodGhpcy4kPWEsS2kodGhpcy5iLHRoaXMuJCksdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBBbih0aGlzLmphKCkpKSl9O2suamE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kfTtrLmRkPWZ1bmN0aW9uKCl7dmFyIGE9bC5uYXZpZ2F0b3I7dGhpcy52YShhP2EubGFuZ3VhZ2VzJiZhLmxhbmd1YWdlc1swXXx8YS5sYW5ndWFnZXx8YS51c2VyTGFuZ3VhZ2V8fG51bGw6bnVsbCl9O2suRWM9ZnVuY3Rpb24oYSl7dGhpcy5OLnB1c2goYSk7TGkodGhpcy5iLGZpcmViYXNlLlNES19WRVJTSU9OP0xlKGZpcmViYXNlLlNES19WRVJTSU9OLHRoaXMuTik6bnVsbCk7dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBCbih0aGlzLk4pKX07XG5rLkVhPWZ1bmN0aW9uKCl7cmV0dXJuIFhhKHRoaXMuTil9O2sudWI9ZnVuY3Rpb24oYSl7dGhpcy5SPT09YXx8dGhpcy5sfHwodGhpcy5SPWEsdGhpcy5iLmI9dGhpcy5SKX07ay5TPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuUn07ZnVuY3Rpb24gem4oYSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJsY1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5qYSgpfSxzZXQ6ZnVuY3Rpb24oYil7dGhpcy52YShiKX0sZW51bWVyYWJsZTohMX0pO2EuJD1udWxsO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwidGlcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuUygpfSxzZXQ6ZnVuY3Rpb24oYil7dGhpcy51YihiKX0sZW51bWVyYWJsZTohMX0pO2EuUj1udWxsfVxuay50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57YXBpS2V5OlModGhpcykub3B0aW9ucy5hcGlLZXksYXV0aERvbWFpbjpTKHRoaXMpLm9wdGlvbnMuYXV0aERvbWFpbixhcHBOYW1lOlModGhpcykubmFtZSxjdXJyZW50VXNlcjpVKHRoaXMpJiZVKHRoaXMpLnYoKX19O2Z1bmN0aW9uIENuKGEpe3JldHVybiBhLlpifHxFKG5ldyB0KFwiYXV0aC1kb21haW4tY29uZmlnLXJlcXVpcmVkXCIpKX1mdW5jdGlvbiB5bihhKXt2YXIgYj1TKGEpLm9wdGlvbnMuYXV0aERvbWFpbixjPVMoYSkub3B0aW9ucy5hcGlLZXk7YiYmT2UoKSYmKGEuWmI9YS5aLnRoZW4oZnVuY3Rpb24oKXtpZighYS5sKXthLmE9UGwoYixjLFMoYSkubmFtZSk7SGwoYS5hLGEpO1UoYSkmJkxtKFUoYSkpO2lmKGEuRCl7TG0oYS5EKTt2YXIgZD1hLkQ7ZC52YShhLmphKCkpO0VtKGQsYSk7ZD1hLkQ7RG0oZCxhLk4pO0ZtKGQsYSk7YS5EPW51bGx9cmV0dXJuIGEuYX19KSl9XG5rLkNiPWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ1bmtub3duXCI6Y2FzZSBcInNpZ25JblZpYVJlZGlyZWN0XCI6cmV0dXJuITA7Y2FzZSBcInNpZ25JblZpYVBvcHVwXCI6cmV0dXJuIHRoaXMuZz09YiYmISF0aGlzLmY7ZGVmYXVsdDpyZXR1cm4hMX19O2subGE9ZnVuY3Rpb24oYSxiLGMsZCl7XCJzaWduSW5WaWFQb3B1cFwiPT1hJiZ0aGlzLmc9PWQmJihjJiZ0aGlzLnc/dGhpcy53KGMpOmImJiFjJiZ0aGlzLmYmJnRoaXMuZihiKSx0aGlzLmMmJih0aGlzLmMuY2FuY2VsKCksdGhpcy5jPW51bGwpLGRlbGV0ZSB0aGlzLmYsZGVsZXRlIHRoaXMudyl9O2suRGE9ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInNpZ25JblZpYVJlZGlyZWN0XCI9PWF8fFwic2lnbkluVmlhUG9wdXBcIj09YSYmdGhpcy5nPT1iJiZ0aGlzLmY/cSh0aGlzLmdjLHRoaXMpOm51bGx9O1xuay5nYz1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLGY9e3JlcXVlc3RVcmk6YSxwb3N0Qm9keTpkLHNlc3Npb25JZDpiLHRlbmFudElkOmN9O3RoaXMuYyYmKHRoaXMuYy5jYW5jZWwoKSx0aGlzLmM9bnVsbCk7cmV0dXJuIGUuWi50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIERuKGUsQ2coZS5iLGYpKX0pfTtcbmsuVmM9ZnVuY3Rpb24oYSl7aWYoIU9lKCkpcmV0dXJuIEUobmV3IHQoXCJvcGVyYXRpb24tbm90LXN1cHBvcnRlZC1pbi10aGlzLWVudmlyb25tZW50XCIpKTt2YXIgYj10aGlzLGM9a2coYS5wcm92aWRlcklkKSxkPU5lKCksZT1udWxsOyghUWUoKXx8RmUoKSkmJlModGhpcykub3B0aW9ucy5hdXRoRG9tYWluJiZhLmlzT0F1dGhQcm92aWRlciYmKGU9WWooUyh0aGlzKS5vcHRpb25zLmF1dGhEb21haW4sUyh0aGlzKS5vcHRpb25zLmFwaUtleSxTKHRoaXMpLm5hbWUsXCJzaWduSW5WaWFQb3B1cFwiLGEsbnVsbCxkLGZpcmViYXNlLlNES19WRVJTSU9OfHxudWxsLG51bGwsbnVsbCx0aGlzLlMoKSkpO3ZhciBmPXdlKGUsYyYmYy50YSxjJiZjLnNhKTtjPUNuKHRoaXMpLnRoZW4oZnVuY3Rpb24oZyl7cmV0dXJuIExsKGcsZixcInNpZ25JblZpYVBvcHVwXCIsYSxkLCEhZSxiLlMoKSl9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBCKGZ1bmN0aW9uKGcsaCl7Yi5sYShcInNpZ25JblZpYVBvcHVwXCIsXG5udWxsLG5ldyB0KFwiY2FuY2VsbGVkLXBvcHVwLXJlcXVlc3RcIiksYi5nKTtiLmY9ZztiLnc9aDtiLmc9ZDtiLmM9TmwoYi5hLGIsXCJzaWduSW5WaWFQb3B1cFwiLGYsZCl9KX0pLnRoZW4oZnVuY3Rpb24oZyl7ZiYmdmUoZik7cmV0dXJuIGc/Z2YoZyk6bnVsbH0pLm8oZnVuY3Rpb24oZyl7ZiYmdmUoZik7dGhyb3cgZzt9KTtyZXR1cm4gVCh0aGlzLGMpfTtrLldjPWZ1bmN0aW9uKGEpe2lmKCFPZSgpKXJldHVybiBFKG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7dmFyIGI9dGhpcyxjPUNuKHRoaXMpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gcW4oYi5pKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gTWwoYi5hLFwic2lnbkluVmlhUmVkaXJlY3RcIixhLHZvaWQgMCxiLlMoKSl9KTtyZXR1cm4gVCh0aGlzLGMpfTtcbmZ1bmN0aW9uIEVuKGEpe2lmKCFPZSgpKXJldHVybiBFKG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiKSk7dmFyIGI9Q24oYSkudGhlbihmdW5jdGlvbigpe3JldHVybiBhLmEucGEoKX0pLnRoZW4oZnVuY3Rpb24oYyl7cmV0dXJuIGM/Z2YoYyk6bnVsbH0pO3JldHVybiBUKGEsYil9ay5wYT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIEVuKHRoaXMpLnRoZW4oZnVuY3Rpb24oYil7YS5hJiZTbChhLmEuYik7cmV0dXJuIGJ9KS5vKGZ1bmN0aW9uKGIpe2EuYSYmU2woYS5hLmIpO3Rocm93IGI7fSl9O1xuay5iZD1mdW5jdGlvbihhKXtpZighYSlyZXR1cm4gRShuZXcgdChcIm51bGwtdXNlclwiKSk7aWYodGhpcy5SIT1hLnRlbmFudElkKXJldHVybiBFKG5ldyB0KFwidGVuYW50LWlkLW1pc21hdGNoXCIpKTt2YXIgYj10aGlzLGM9e307Yy5hcGlLZXk9Uyh0aGlzKS5vcHRpb25zLmFwaUtleTtjLmF1dGhEb21haW49Uyh0aGlzKS5vcHRpb25zLmF1dGhEb21haW47Yy5hcHBOYW1lPVModGhpcykubmFtZTt2YXIgZD1nbihhLGMsYi5CLGIuRWEoKSk7cmV0dXJuIFQodGhpcyx0aGlzLmgudGhlbihmdW5jdGlvbigpe2lmKFMoYikub3B0aW9ucy5hcGlLZXkhPWEubClyZXR1cm4gZC5yZWxvYWQoKX0pLnRoZW4oZnVuY3Rpb24oKXtpZihVKGIpJiZhLnVpZD09VShiKS51aWQpcmV0dXJuIFNtKFUoYiksYSksYi5jYShhKTt2bihiLGQpO0xtKGQpO3JldHVybiBiLmNhKGQpfSkudGhlbihmdW5jdGlvbigpe0ZuKGIpfSkpfTtcbmZ1bmN0aW9uIEduKGEsYil7dmFyIGM9e307Yy5hcGlLZXk9UyhhKS5vcHRpb25zLmFwaUtleTtjLmF1dGhEb21haW49UyhhKS5vcHRpb25zLmF1dGhEb21haW47Yy5hcHBOYW1lPVMoYSkubmFtZTtyZXR1cm4gYS5aLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZm4oYyxiLGEuQixhLkVhKCkpfSkudGhlbihmdW5jdGlvbihkKXtpZihVKGEpJiZkLnVpZD09VShhKS51aWQpcmV0dXJuIFNtKFUoYSksZCksYS5jYShkKTt2bihhLGQpO0xtKGQpO3JldHVybiBhLmNhKGQpfSkudGhlbihmdW5jdGlvbigpe0ZuKGEpfSl9XG5mdW5jdGlvbiB2bihhLGIpe1UoYSkmJihKbShVKGEpLGEuTWEpLHRkKFUoYSksXCJ0b2tlbkNoYW5nZWRcIixhLnhhKSx0ZChVKGEpLFwidXNlckRlbGV0ZWRcIixhLnlhKSx0ZChVKGEpLFwidXNlckludmFsaWRhdGVkXCIsYS56YSksSW0oVShhKSkpO2ImJihiLlIucHVzaChhLk1hKSxqZChiLFwidG9rZW5DaGFuZ2VkXCIsYS54YSksamQoYixcInVzZXJEZWxldGVkXCIsYS55YSksamQoYixcInVzZXJJbnZhbGlkYXRlZFwiLGEuemEpLDA8YS5zJiZIbShiKSk7SyhhLFwiY3VycmVudFVzZXJcIixiKTtiJiYoYi52YShhLmphKCkpLEVtKGIsYSksRG0oYixhLk4pLEZtKGIsYSkpfWsud2I9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLGI9dGhpcy5oLnRoZW4oZnVuY3Rpb24oKXthLmEmJlNsKGEuYS5iKTtpZighVShhKSlyZXR1cm4gRCgpO3ZuKGEsbnVsbCk7cmV0dXJuIHNuKGEuaSkudGhlbihmdW5jdGlvbigpe0ZuKGEpfSl9KTtyZXR1cm4gVCh0aGlzLGIpfTtcbmZ1bmN0aW9uIEhuKGEpe3ZhciBiPWpuKGEuQixTKGEpLm9wdGlvbnMuYXV0aERvbWFpbikudGhlbihmdW5jdGlvbihjKXtpZihhLkQ9YyljLmdhPWEuQjtyZXR1cm4gY24oYS5CKX0pO3JldHVybiBUKGEsYil9ZnVuY3Rpb24gd24oYSl7dmFyIGI9UyhhKS5vcHRpb25zLmF1dGhEb21haW4sYz1IbihhKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHRuKGEuaSxiKX0pLnRoZW4oZnVuY3Rpb24oZCl7cmV0dXJuIGQ/KGQuZ2E9YS5CLGEuRCYmKGEuRC5mYXx8bnVsbCk9PShkLmZhfHxudWxsKT9kOmQucmVsb2FkKCkudGhlbihmdW5jdGlvbigpe3JldHVybiBybihhLmksZCkudGhlbihmdW5jdGlvbigpe3JldHVybiBkfSl9KS5vKGZ1bmN0aW9uKGUpe3JldHVyblwiYXV0aC9uZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCI9PWUuY29kZT9kOnNuKGEuaSl9KSk6bnVsbH0pLnRoZW4oZnVuY3Rpb24oZCl7dm4oYSxkfHxudWxsKX0pO3JldHVybiBUKGEsYyl9XG5mdW5jdGlvbiB4bihhKXtyZXR1cm4gYS5aLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gRW4oYSl9KS5vKGZ1bmN0aW9uKCl7fSkudGhlbihmdW5jdGlvbigpe2lmKCFhLmwpcmV0dXJuIGEub2EoKX0pLm8oZnVuY3Rpb24oKXt9KS50aGVuKGZ1bmN0aW9uKCl7aWYoIWEubCl7YS5hYT0hMDt2YXIgYj1hLmk7Yi5iLmFkZExpc3RlbmVyKG1uKFwibG9jYWxcIiksYi5hLGEub2EpfX0pfVxuay5YYz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIHRuKHRoaXMuaSxTKHRoaXMpLm9wdGlvbnMuYXV0aERvbWFpbikudGhlbihmdW5jdGlvbihiKXtpZighYS5sKXt2YXIgYztpZihjPVUoYSkmJmIpe2M9VShhKS51aWQ7dmFyIGQ9Yi51aWQ7Yz12b2lkIDA9PT1jfHxudWxsPT09Y3x8XCJcIj09PWN8fHZvaWQgMD09PWR8fG51bGw9PT1kfHxcIlwiPT09ZD8hMTpjPT1kfWlmKGMpcmV0dXJuIFNtKFUoYSksYiksVShhKS5JKCk7aWYoVShhKXx8Yil2bihhLGIpLGImJihMbShiKSxiLmdhPWEuQiksYS5hJiZIbChhLmEsYSksRm4oYSl9fSl9O2suY2E9ZnVuY3Rpb24oYSl7cmV0dXJuIHJuKHRoaXMuaSxhKX07ay5qYz1mdW5jdGlvbigpe0ZuKHRoaXMpO3RoaXMuY2EoVSh0aGlzKSl9O2sudWM9ZnVuY3Rpb24oKXt0aGlzLndiKCl9O2sudmM9ZnVuY3Rpb24oKXt0aGlzLndiKCl9O1xuZnVuY3Rpb24gRG4oYSxiKXt2YXIgYz1udWxsLGQ9bnVsbDtyZXR1cm4gVChhLGIudGhlbihmdW5jdGlvbihlKXtjPW1oKGUpO2Q9bGcoZSk7cmV0dXJuIEduKGEsZSl9LGZ1bmN0aW9uKGUpe3ZhciBmPW51bGw7ZSYmXCJhdXRoL211bHRpLWZhY3Rvci1hdXRoLXJlcXVpcmVkXCI9PT1lLmNvZGUmJihmPWVtKGUudigpLGEscShhLmljLGEpKSk7dGhyb3cgZnx8ZTt9KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGdmKHt1c2VyOlUoYSksY3JlZGVudGlhbDpjLGFkZGl0aW9uYWxVc2VySW5mbzpkLG9wZXJhdGlvblR5cGU6XCJzaWduSW5cIn0pfSkpfWsuaWM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztyZXR1cm4gdGhpcy5oLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gRG4oYixEKGEpKX0pfTtrLnhjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7dGhpcy5hZGRBdXRoVG9rZW5MaXN0ZW5lcihmdW5jdGlvbigpe2EubmV4dChVKGIpKX0pfTtcbmsueWM9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztJbih0aGlzLGZ1bmN0aW9uKCl7YS5uZXh0KFUoYikpfSl9O2suR2M9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXM7dGhpcy5hYSYmUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EoVShkKSk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGEubmV4dCYmYS5uZXh0KFUoZCkpfSk7cmV0dXJuIHRoaXMuJGIoYSxiLGMpfTtrLkZjPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzO3RoaXMuYWEmJlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtkLlc9ZC5nZXRVaWQoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hKFUoZCkpOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLm5leHQmJmEubmV4dChVKGQpKX0pO3JldHVybiB0aGlzLmFjKGEsYixjKX07XG5rLmtjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMsYz10aGlzLmgudGhlbihmdW5jdGlvbigpe3JldHVybiBVKGIpP1UoYikuSShhKS50aGVuKGZ1bmN0aW9uKGQpe3JldHVybnthY2Nlc3NUb2tlbjpkfX0pOm51bGx9KTtyZXR1cm4gVCh0aGlzLGMpfTtrLlJjPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIHRoaXMuaC50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIERuKGIsTihiLmIsRWose3Rva2VuOmF9KSl9KS50aGVuKGZ1bmN0aW9uKGMpe3ZhciBkPWMudXNlcjtSbShkLFwiaXNBbm9ueW1vdXNcIiwhMSk7Yi5jYShkKTtyZXR1cm4gY30pfTtrLlNjPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gdGhpcy5oLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gRG4oYyxOKGMuYixYZyx7ZW1haWw6YSxwYXNzd29yZDpifSkpfSl9O1xuay5jYz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIHRoaXMuaC50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIERuKGMsTihjLmIseWose2VtYWlsOmEscGFzc3dvcmQ6Yn0pKX0pfTtrLllhPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIHRoaXMuaC50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIERuKGIsYS5pYShiLmIpKX0pfTtrLlFjPWZ1bmN0aW9uKGEpe2RmKFwiZmlyZWJhc2UuYXV0aC5BdXRoLnByb3RvdHlwZS5zaWduSW5BbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpcmViYXNlLmF1dGguQXV0aC5wcm90b3R5cGUuc2lnbkluV2l0aENyZWRlbnRpYWwgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMuWWEoYSl9O1xuay52Yj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIHRoaXMuaC50aGVuKGZ1bmN0aW9uKCl7dmFyIGI9VShhKTtpZihiJiZiLmlzQW5vbnltb3VzKXt2YXIgYz1nZih7cHJvdmlkZXJJZDpudWxsLGlzTmV3VXNlcjohMX0pO3JldHVybiBnZih7dXNlcjpiLGNyZWRlbnRpYWw6bnVsbCxhZGRpdGlvbmFsVXNlckluZm86YyxvcGVyYXRpb25UeXBlOlwic2lnbkluXCJ9KX1yZXR1cm4gRG4oYSxhLmIudmIoKSkudGhlbihmdW5jdGlvbihkKXt2YXIgZT1kLnVzZXI7Um0oZSxcImlzQW5vbnltb3VzXCIsITApO2EuY2EoZSk7cmV0dXJuIGR9KX0pfTtmdW5jdGlvbiBTKGEpe3JldHVybiBhLmFwcH1mdW5jdGlvbiBVKGEpe3JldHVybiBhLmN1cnJlbnRVc2VyfWsuZ2V0VWlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUodGhpcykmJlUodGhpcykudWlkfHxudWxsfTtmdW5jdGlvbiBKbihhKXtyZXR1cm4gVShhKSYmVShhKS5fbGF0fHxudWxsfVxuZnVuY3Rpb24gRm4oYSl7aWYoYS5hYSl7Zm9yKHZhciBiPTA7YjxhLm0ubGVuZ3RoO2IrKylpZihhLm1bYl0pYS5tW2JdKEpuKGEpKTtpZihhLlchPT1hLmdldFVpZCgpJiZhLk8ubGVuZ3RoKWZvcihhLlc9YS5nZXRVaWQoKSxiPTA7YjxhLk8ubGVuZ3RoO2IrKylpZihhLk9bYl0pYS5PW2JdKEpuKGEpKX19ay5iYz1mdW5jdGlvbihhKXt0aGlzLmFkZEF1dGhUb2tlbkxpc3RlbmVyKGEpO3RoaXMucysrOzA8dGhpcy5zJiZVKHRoaXMpJiZIbShVKHRoaXMpKX07ay5OYz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO3codGhpcy5tLGZ1bmN0aW9uKGMpe2M9PWEmJmIucy0tfSk7MD50aGlzLnMmJih0aGlzLnM9MCk7MD09dGhpcy5zJiZVKHRoaXMpJiZJbShVKHRoaXMpKTt0aGlzLnJlbW92ZUF1dGhUb2tlbkxpc3RlbmVyKGEpfTtcbmsuYWRkQXV0aFRva2VuTGlzdGVuZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpczt0aGlzLm0ucHVzaChhKTtUKHRoaXMsdGhpcy5oLnRoZW4oZnVuY3Rpb24oKXtiLmx8fFRhKGIubSxhKSYmYShKbihiKSl9KSl9O2sucmVtb3ZlQXV0aFRva2VuTGlzdGVuZXI9ZnVuY3Rpb24oYSl7VmEodGhpcy5tLGZ1bmN0aW9uKGIpe3JldHVybiBiPT1hfSl9O2Z1bmN0aW9uIEluKGEsYil7YS5PLnB1c2goYik7VChhLGEuaC50aGVuKGZ1bmN0aW9uKCl7IWEubCYmVGEoYS5PLGIpJiZhLlchPT1hLmdldFVpZCgpJiYoYS5XPWEuZ2V0VWlkKCksYihKbihhKSkpfSkpfVxuay5kZWxldGU9ZnVuY3Rpb24oKXt0aGlzLmw9ITA7Zm9yKHZhciBhPTA7YTx0aGlzLlAubGVuZ3RoO2ErKyl0aGlzLlBbYV0uY2FuY2VsKFwiYXBwLWRlbGV0ZWRcIik7dGhpcy5QPVtdO3RoaXMuaSYmKGE9dGhpcy5pLGEuYi5yZW1vdmVMaXN0ZW5lcihtbihcImxvY2FsXCIpLGEuYSx0aGlzLm9hKSk7dGhpcy5hJiYoSWwodGhpcy5hLHRoaXMpLFNsKHRoaXMuYS5iKSk7cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpfTtmdW5jdGlvbiBUKGEsYil7YS5QLnB1c2goYik7Yi5tYShmdW5jdGlvbigpe1VhKGEuUCxiKX0pO3JldHVybiBifWsuZmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFQodGhpcyxWaSh0aGlzLmIsYSkpfTtrLnpjPWZ1bmN0aW9uKGEpe3JldHVybiEhYmgoYSl9O1xuay5zYj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIFQodGhpcyxEKCkudGhlbihmdW5jdGlvbigpe3ZhciBkPW5ldyBQZihiKTtpZighZC5jKXRocm93IG5ldyB0KFwiYXJndW1lbnQtZXJyb3JcIixYZitcIiBtdXN0IGJlIHRydWUgd2hlbiBzZW5kaW5nIHNpZ24gaW4gbGluayB0byBlbWFpbFwiKTtyZXR1cm4gWmYoZCl9KS50aGVuKGZ1bmN0aW9uKGQpe3JldHVybiBjLmIuc2IoYSxkKX0pLnRoZW4oZnVuY3Rpb24oKXt9KSl9O2suZmQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuUGEoYSkudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gYi5kYXRhLmVtYWlsfSl9O2suamI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVCh0aGlzLHRoaXMuYi5qYihhLGIpLnRoZW4oZnVuY3Rpb24oKXt9KSl9O2suUGE9ZnVuY3Rpb24oYSl7cmV0dXJuIFQodGhpcyx0aGlzLmIuUGEoYSkudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gbmV3IHNmKGIpfSkpfTtcbmsuZmI9ZnVuY3Rpb24oYSl7cmV0dXJuIFQodGhpcyx0aGlzLmIuZmIoYSkudGhlbihmdW5jdGlvbigpe30pKX07ay5yYj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIFQodGhpcyxEKCkudGhlbihmdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8a2IoYik/e306WmYobmV3IFBmKGIpKX0pLnRoZW4oZnVuY3Rpb24oZCl7cmV0dXJuIGMuYi5yYihhLGQpfSkudGhlbihmdW5jdGlvbigpe30pKX07ay5VYz1mdW5jdGlvbihhLGIpe3JldHVybiBUKHRoaXMsWmwodGhpcyxhLGIscSh0aGlzLllhLHRoaXMpKSl9O1xuay5UYz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIFQodGhpcyxEKCkudGhlbihmdW5jdGlvbigpe3ZhciBkPWJ8fG9lKCksZT1haChhLGQpO2Q9YmgoZCk7aWYoIWQpdGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiSW52YWxpZCBlbWFpbCBsaW5rIVwiKTtpZihkLnRlbmFudElkIT09Yy5TKCkpdGhyb3cgbmV3IHQoXCJ0ZW5hbnQtaWQtbWlzbWF0Y2hcIik7cmV0dXJuIGMuWWEoZSl9KSl9O2Z1bmN0aW9uIEtuKCl7fUtuLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt9O0tuLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe307S24ucHJvdG90eXBlLmdldFJlc3BvbnNlPWZ1bmN0aW9uKCl7fTtLbi5wcm90b3R5cGUuZXhlY3V0ZT1mdW5jdGlvbigpe307ZnVuY3Rpb24gTG4oKXt0aGlzLmE9e307dGhpcy5iPTFFMTJ9dmFyIE1uPW51bGw7TG4ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3RoaXMuYVt0aGlzLmIudG9TdHJpbmcoKV09bmV3IE5uKGEsYik7cmV0dXJuIHRoaXMuYisrfTtMbi5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oYSl7dmFyIGI9T24odGhpcyxhKTthPVBuKGEpO2ImJmEmJihiLmRlbGV0ZSgpLGRlbGV0ZSB0aGlzLmFbYV0pfTtMbi5wcm90b3R5cGUuZ2V0UmVzcG9uc2U9ZnVuY3Rpb24oYSl7cmV0dXJuKGE9T24odGhpcyxhKSk/YS5nZXRSZXNwb25zZSgpOm51bGx9O0xuLnByb3RvdHlwZS5leGVjdXRlPWZ1bmN0aW9uKGEpeyhhPU9uKHRoaXMsYSkpJiZhLmV4ZWN1dGUoKX07ZnVuY3Rpb24gT24oYSxiKXtyZXR1cm4oYj1QbihiKSk/YS5hW2JdfHxudWxsOm51bGx9ZnVuY3Rpb24gUG4oYSl7cmV0dXJuKGE9XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhPzFFMTI6YSk/YS50b1N0cmluZygpOm51bGx9XG5mdW5jdGlvbiBObihhLGIpe3RoaXMuZz0hMTt0aGlzLmM9Yjt0aGlzLmE9dGhpcy5iPW51bGw7dGhpcy5oPVwiaW52aXNpYmxlXCIhPT10aGlzLmMuc2l6ZTt0aGlzLmY9ZmMoYSk7dmFyIGM9dGhpczt0aGlzLmk9ZnVuY3Rpb24oKXtjLmV4ZWN1dGUoKX07dGhpcy5oP3RoaXMuZXhlY3V0ZSgpOmpkKHRoaXMuZixcImNsaWNrXCIsdGhpcy5pKX1Obi5wcm90b3R5cGUuZ2V0UmVzcG9uc2U9ZnVuY3Rpb24oKXtRbih0aGlzKTtyZXR1cm4gdGhpcy5ifTtcbk5uLnByb3RvdHlwZS5leGVjdXRlPWZ1bmN0aW9uKCl7UW4odGhpcyk7dmFyIGE9dGhpczt0aGlzLmF8fCh0aGlzLmE9c2V0VGltZW91dChmdW5jdGlvbigpe2EuYj1KZSgpO3ZhciBiPWEuYy5jYWxsYmFjayxjPWEuY1tcImV4cGlyZWQtY2FsbGJhY2tcIl07aWYoYil0cnl7YihhLmIpfWNhdGNoKGQpe31hLmE9c2V0VGltZW91dChmdW5jdGlvbigpe2EuYT1udWxsO2EuYj1udWxsO2lmKGMpdHJ5e2MoKX1jYXRjaChkKXt9YS5oJiZhLmV4ZWN1dGUoKX0sNkU0KX0sNTAwKSl9O05uLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24oKXtRbih0aGlzKTt0aGlzLmc9ITA7Y2xlYXJUaW1lb3V0KHRoaXMuYSk7dGhpcy5hPW51bGw7dGQodGhpcy5mLFwiY2xpY2tcIix0aGlzLmkpfTtmdW5jdGlvbiBRbihhKXtpZihhLmcpdGhyb3cgRXJyb3IoXCJyZUNBUFRDSEEgbW9jayB3YXMgYWxyZWFkeSBkZWxldGVkIVwiKTt9O2Z1bmN0aW9uIFJuKCl7fUsoUm4sXCJGQUNUT1JfSURcIixcInBob25lXCIpO2Z1bmN0aW9uIFNuKCl7fVNuLnByb3RvdHlwZS5nPWZ1bmN0aW9uKCl7TW58fChNbj1uZXcgTG4pO3JldHVybiBEKE1uKX07U24ucHJvdG90eXBlLmM9ZnVuY3Rpb24oKXt9O3ZhciBUbj1udWxsO2Z1bmN0aW9uIFVuKCl7dGhpcy5iPWwuZ3JlY2FwdGNoYT9JbmZpbml0eTowO3RoaXMuZj1udWxsO3RoaXMuYT1cIl9fcmNiXCIrTWF0aC5mbG9vcigxRTYqTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoKX12YXIgVm49bmV3IG9iKHBiLFwiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpLmpzP29ubG9hZD0le29ubG9hZH0mcmVuZGVyPWV4cGxpY2l0JmhsPSV7aGx9XCIpLFduPW5ldyBXZSgzRTQsNkU0KTtcblVuLnByb3RvdHlwZS5nPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIG5ldyBCKGZ1bmN0aW9uKGMsZCl7dmFyIGU9c2V0VGltZW91dChmdW5jdGlvbigpe2QobmV3IHQoXCJuZXR3b3JrLXJlcXVlc3QtZmFpbGVkXCIpKX0sV24uZ2V0KCkpO2lmKCFsLmdyZWNhcHRjaGF8fGEhPT1iLmYmJiFiLmIpe2xbYi5hXT1mdW5jdGlvbigpe2lmKGwuZ3JlY2FwdGNoYSl7Yi5mPWE7dmFyIGc9bC5ncmVjYXB0Y2hhLnJlbmRlcjtsLmdyZWNhcHRjaGEucmVuZGVyPWZ1bmN0aW9uKGgsbSl7aD1nKGgsbSk7Yi5iKys7cmV0dXJuIGh9O2NsZWFyVGltZW91dChlKTtjKGwuZ3JlY2FwdGNoYSl9ZWxzZSBjbGVhclRpbWVvdXQoZSksZChuZXcgdChcImludGVybmFsLWVycm9yXCIpKTtkZWxldGUgbFtiLmFdfTt2YXIgZj14YihWbix7b25sb2FkOmIuYSxobDphfHxcIlwifSk7RCh4aShmKSkubyhmdW5jdGlvbigpe2NsZWFyVGltZW91dChlKTtkKG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcIlVuYWJsZSB0byBsb2FkIGV4dGVybmFsIHJlQ0FQVENIQSBkZXBlbmRlbmNpZXMhXCIpKX0pfWVsc2UgY2xlYXJUaW1lb3V0KGUpLFxuYyhsLmdyZWNhcHRjaGEpfSl9O1VuLnByb3RvdHlwZS5jPWZ1bmN0aW9uKCl7dGhpcy5iLS19O3ZhciBYbj1udWxsO2Z1bmN0aW9uIFluKGEsYixjLGQsZSxmLGcpe0sodGhpcyxcInR5cGVcIixcInJlY2FwdGNoYVwiKTt0aGlzLmM9dGhpcy5mPW51bGw7dGhpcy5EPSExO3RoaXMudT1iO3RoaXMuZz1udWxsO2c/KFRufHwoVG49bmV3IFNuKSxnPVRuKTooWG58fChYbj1uZXcgVW4pLGc9WG4pO3RoaXMubT1nO3RoaXMuYT1jfHx7dGhlbWU6XCJsaWdodFwiLHR5cGU6XCJpbWFnZVwifTt0aGlzLmg9W107aWYodGhpcy5hW1puXSl0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsXCJzaXRla2V5IHNob3VsZCBub3QgYmUgcHJvdmlkZWQgZm9yIHJlQ0FQVENIQSBhcyBvbmUgaXMgYXV0b21hdGljYWxseSBwcm92aXNpb25lZCBmb3IgdGhlIGN1cnJlbnQgcHJvamVjdC5cIik7dGhpcy5pPVwiaW52aXNpYmxlXCI9PT10aGlzLmFbJG5dO2lmKCFsLmRvY3VtZW50KXRocm93IG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiLFwiUmVjYXB0Y2hhVmVyaWZpZXIgaXMgb25seSBzdXBwb3J0ZWQgaW4gYSBicm93c2VyIEhUVFAvSFRUUFMgZW52aXJvbm1lbnQgd2l0aCBET00gc3VwcG9ydC5cIik7XG5pZighZmMoYil8fCF0aGlzLmkmJmZjKGIpLmhhc0NoaWxkTm9kZXMoKSl0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsXCJyZUNBUFRDSEEgY29udGFpbmVyIGlzIGVpdGhlciBub3QgZm91bmQgb3IgYWxyZWFkeSBjb250YWlucyBpbm5lciBlbGVtZW50cyFcIik7dGhpcy5zPW5ldyBFaShhLGZ8fG51bGwsZXx8bnVsbCk7dGhpcy53PWR8fGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9O3ZhciBoPXRoaXM7dGhpcy5sPVtdO3ZhciBtPXRoaXMuYVthb107dGhpcy5hW2FvXT1mdW5jdGlvbih2KXtibyhoLHYpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtKW0odik7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIG0pe3ZhciBDPUoobSxsKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmQyh2KX19O3ZhciBwPXRoaXMuYVtjb107dGhpcy5hW2NvXT1mdW5jdGlvbigpe2JvKGgsbnVsbCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHApcCgpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBwKXt2YXIgdj1cbkoocCxsKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdiYmdigpfX19dmFyIGFvPVwiY2FsbGJhY2tcIixjbz1cImV4cGlyZWQtY2FsbGJhY2tcIixabj1cInNpdGVrZXlcIiwkbj1cInNpemVcIjtmdW5jdGlvbiBibyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sLmxlbmd0aDtjKyspdHJ5e2EubFtjXShiKX1jYXRjaChkKXt9fWZ1bmN0aW9uIGVvKGEsYil7VmEoYS5sLGZ1bmN0aW9uKGMpe3JldHVybiBjPT1ifSl9ZnVuY3Rpb24gZm8oYSxiKXthLmgucHVzaChiKTtiLm1hKGZ1bmN0aW9uKCl7VWEoYS5oLGIpfSk7cmV0dXJuIGJ9az1Zbi5wcm90b3R5cGU7XG5rLkdhPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gdGhpcy5mP3RoaXMuZjp0aGlzLmY9Zm8odGhpcyxEKCkudGhlbihmdW5jdGlvbigpe2lmKFBlKCkmJiFHZSgpKXJldHVybiBCZSgpO3Rocm93IG5ldyB0KFwib3BlcmF0aW9uLW5vdC1zdXBwb3J0ZWQtaW4tdGhpcy1lbnZpcm9ubWVudFwiLFwiUmVjYXB0Y2hhVmVyaWZpZXIgaXMgb25seSBzdXBwb3J0ZWQgaW4gYSBicm93c2VyIEhUVFAvSFRUUFMgZW52aXJvbm1lbnQuXCIpO30pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gYS5tLmcoYS53KCkpfSkudGhlbihmdW5jdGlvbihiKXthLmc9YjtyZXR1cm4gTihhLnMsRGose30pfSkudGhlbihmdW5jdGlvbihiKXthLmFbWm5dPWIucmVjYXB0Y2hhU2l0ZUtleX0pLm8oZnVuY3Rpb24oYil7YS5mPW51bGw7dGhyb3cgYjt9KSl9O1xuay5yZW5kZXI9ZnVuY3Rpb24oKXtnbyh0aGlzKTt2YXIgYT10aGlzO3JldHVybiBmbyh0aGlzLHRoaXMuR2EoKS50aGVuKGZ1bmN0aW9uKCl7aWYobnVsbD09PWEuYyl7dmFyIGI9YS51O2lmKCFhLmkpe3ZhciBjPWZjKGIpO2I9aWMoXCJESVZcIik7Yy5hcHBlbmRDaGlsZChiKX1hLmM9YS5nLnJlbmRlcihiLGEuYSl9cmV0dXJuIGEuY30pKX07ay52ZXJpZnk9ZnVuY3Rpb24oKXtnbyh0aGlzKTt2YXIgYT10aGlzO3JldHVybiBmbyh0aGlzLHRoaXMucmVuZGVyKCkudGhlbihmdW5jdGlvbihiKXtyZXR1cm4gbmV3IEIoZnVuY3Rpb24oYyl7dmFyIGQ9YS5nLmdldFJlc3BvbnNlKGIpO2lmKGQpYyhkKTtlbHNle3ZhciBlPWZ1bmN0aW9uKGYpe2YmJihlbyhhLGUpLGMoZikpfTthLmwucHVzaChlKTthLmkmJmEuZy5leGVjdXRlKGEuYyl9fSl9KSl9O2sucmVzZXQ9ZnVuY3Rpb24oKXtnbyh0aGlzKTtudWxsIT09dGhpcy5jJiZ0aGlzLmcucmVzZXQodGhpcy5jKX07XG5mdW5jdGlvbiBnbyhhKXtpZihhLkQpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLFwiUmVjYXB0Y2hhVmVyaWZpZXIgaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkLlwiKTt9ay5jbGVhcj1mdW5jdGlvbigpe2dvKHRoaXMpO3RoaXMuRD0hMDt0aGlzLm0uYygpO2Zvcih2YXIgYT0wO2E8dGhpcy5oLmxlbmd0aDthKyspdGhpcy5oW2FdLmNhbmNlbChcIlJlY2FwdGNoYVZlcmlmaWVyIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZC5cIik7aWYoIXRoaXMuaSl7YT1mYyh0aGlzLnUpO2Zvcih2YXIgYjtiPWEuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChiKX19O1xuZnVuY3Rpb24gaG8oYSxiLGMpe3ZhciBkPSExO3RyeXt0aGlzLmI9Y3x8ZmlyZWJhc2UuYXBwKCl9Y2F0Y2goZyl7dGhyb3cgbmV3IHQoXCJhcmd1bWVudC1lcnJvclwiLFwiTm8gZmlyZWJhc2UuYXBwLkFwcCBpbnN0YW5jZSBpcyBjdXJyZW50bHkgaW5pdGlhbGl6ZWQuXCIpO31pZih0aGlzLmIub3B0aW9ucyYmdGhpcy5iLm9wdGlvbnMuYXBpS2V5KWM9dGhpcy5iLm9wdGlvbnMuYXBpS2V5O2Vsc2UgdGhyb3cgbmV3IHQoXCJpbnZhbGlkLWFwaS1rZXlcIik7dmFyIGU9dGhpcyxmPW51bGw7dHJ5e2Y9dGhpcy5iLmF1dGgoKS5FYSgpfWNhdGNoKGcpe310cnl7ZD10aGlzLmIuYXV0aCgpLnNldHRpbmdzLmFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZ31jYXRjaChnKXt9Zj1maXJlYmFzZS5TREtfVkVSU0lPTj9MZShmaXJlYmFzZS5TREtfVkVSU0lPTixmKTpudWxsO1luLmNhbGwodGhpcyxjLGEsYixmdW5jdGlvbigpe3RyeXt2YXIgZz1lLmIuYXV0aCgpLmphKCl9Y2F0Y2goaCl7Zz1cbm51bGx9cmV0dXJuIGd9LGYsQWEoQmEpLGQpfXIoaG8sWW4pO2Z1bmN0aW9uIGlvKGEsYixjLGQpe2E6e2M9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYyk7dmFyIGU9MDtmb3IodmFyIGY9ITEsZz0wO2c8Yi5sZW5ndGg7ZysrKWlmKGJbZ10ub3B0aW9uYWwpZj0hMDtlbHNle2lmKGYpdGhyb3cgbmV3IHQoXCJpbnRlcm5hbC1lcnJvclwiLFwiQXJndW1lbnQgdmFsaWRhdG9yIGVuY291bnRlcmVkIGEgcmVxdWlyZWQgYXJndW1lbnQgYWZ0ZXIgYW4gb3B0aW9uYWwgYXJndW1lbnQuXCIpO2UrK31mPWIubGVuZ3RoO2lmKGMubGVuZ3RoPGV8fGY8Yy5sZW5ndGgpZD1cIkV4cGVjdGVkIFwiKyhlPT1mPzE9PWU/XCIxIGFyZ3VtZW50XCI6ZStcIiBhcmd1bWVudHNcIjplK1wiLVwiK2YrXCIgYXJndW1lbnRzXCIpK1wiIGJ1dCBnb3QgXCIrYy5sZW5ndGgrXCIuXCI7ZWxzZXtmb3IoZT0wO2U8Yy5sZW5ndGg7ZSsrKWlmKGY9YltlXS5vcHRpb25hbCYmdm9pZCAwPT09Y1tlXSwhYltlXS5LKGNbZV0pJiYhZil7Yj1iW2VdO2lmKDA+ZXx8ZT49am8ubGVuZ3RoKXRocm93IG5ldyB0KFwiaW50ZXJuYWwtZXJyb3JcIixcblwiQXJndW1lbnQgdmFsaWRhdG9yIHJlY2VpdmVkIGFuIHVuc3VwcG9ydGVkIG51bWJlciBvZiBhcmd1bWVudHMuXCIpO2M9am9bZV07ZD0oZD9cIlwiOmMrXCIgYXJndW1lbnQgXCIpKyhiLm5hbWU/J1wiJytiLm5hbWUrJ1wiICc6XCJcIikrXCJtdXN0IGJlIFwiK2IuSitcIi5cIjticmVhayBhfWQ9bnVsbH19aWYoZCl0aHJvdyBuZXcgdChcImFyZ3VtZW50LWVycm9yXCIsYStcIiBmYWlsZWQ6IFwiK2QpO312YXIgam89XCJGaXJzdCBTZWNvbmQgVGhpcmQgRm91cnRoIEZpZnRoIFNpeHRoIFNldmVudGggRWlnaHRoIE5pbnRoXCIuc3BsaXQoXCIgXCIpO2Z1bmN0aW9uIFYoYSxiKXtyZXR1cm57bmFtZTphfHxcIlwiLEo6XCJhIHZhbGlkIHN0cmluZ1wiLG9wdGlvbmFsOiEhYixLOmZ1bmN0aW9uKGMpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgY319fVxuZnVuY3Rpb24ga28oYSxiKXtyZXR1cm57bmFtZTphfHxcIlwiLEo6XCJhIGJvb2xlYW5cIixvcHRpb25hbDohIWIsSzpmdW5jdGlvbihjKXtyZXR1cm5cImJvb2xlYW5cIj09PXR5cGVvZiBjfX19ZnVuY3Rpb24gVyhhLGIpe3JldHVybntuYW1lOmF8fFwiXCIsSjpcImEgdmFsaWQgb2JqZWN0XCIsb3B0aW9uYWw6ISFiLEs6bn19ZnVuY3Rpb24gbG8oYSxiKXtyZXR1cm57bmFtZTphfHxcIlwiLEo6XCJhIGZ1bmN0aW9uXCIsb3B0aW9uYWw6ISFiLEs6ZnVuY3Rpb24oYyl7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGN9fX1mdW5jdGlvbiBtbyhhLGIpe3JldHVybntuYW1lOmF8fFwiXCIsSjpcIm51bGxcIixvcHRpb25hbDohIWIsSzpmdW5jdGlvbihjKXtyZXR1cm4gbnVsbD09PWN9fX1mdW5jdGlvbiBubygpe3JldHVybntuYW1lOlwiXCIsSjpcImFuIEhUTUwgZWxlbWVudFwiLG9wdGlvbmFsOiExLEs6ZnVuY3Rpb24oYSl7cmV0dXJuISEoYSYmYSBpbnN0YW5jZW9mIEVsZW1lbnQpfX19XG5mdW5jdGlvbiBvbygpe3JldHVybntuYW1lOlwiYXV0aFwiLEo6XCJhbiBpbnN0YW5jZSBvZiBGaXJlYmFzZSBBdXRoXCIsb3B0aW9uYWw6ITAsSzpmdW5jdGlvbihhKXtyZXR1cm4hIShhJiZhIGluc3RhbmNlb2YgdW4pfX19ZnVuY3Rpb24gcG8oKXtyZXR1cm57bmFtZTpcImFwcFwiLEo6XCJhbiBpbnN0YW5jZSBvZiBGaXJlYmFzZSBBcHBcIixvcHRpb25hbDohMCxLOmZ1bmN0aW9uKGEpe3JldHVybiEhKGEmJmEgaW5zdGFuY2VvZiBmaXJlYmFzZS5hcHAuQXBwKX19fWZ1bmN0aW9uIHFvKGEpe3JldHVybntuYW1lOmE/YStcIkNyZWRlbnRpYWxcIjpcImNyZWRlbnRpYWxcIixKOmE/XCJhIHZhbGlkIFwiK2ErXCIgY3JlZGVudGlhbFwiOlwiYSB2YWxpZCBjcmVkZW50aWFsXCIsb3B0aW9uYWw6ITEsSzpmdW5jdGlvbihiKXtpZighYilyZXR1cm4hMTt2YXIgYz0hYXx8Yi5wcm92aWRlcklkPT09YTtyZXR1cm4hKCFiLmlhfHwhYyl9fX1cbmZ1bmN0aW9uIHJvKCl7cmV0dXJue25hbWU6XCJtdWx0aUZhY3RvckFzc2VydGlvblwiLEo6XCJhIHZhbGlkIG11bHRpRmFjdG9yQXNzZXJ0aW9uXCIsb3B0aW9uYWw6ITEsSzpmdW5jdGlvbihhKXtyZXR1cm4gYT8hIWEub2I6ITF9fX1mdW5jdGlvbiBzbygpe3JldHVybntuYW1lOlwiYXV0aFByb3ZpZGVyXCIsSjpcImEgdmFsaWQgQXV0aCBwcm92aWRlclwiLG9wdGlvbmFsOiExLEs6ZnVuY3Rpb24oYSl7cmV0dXJuISEoYSYmYS5wcm92aWRlcklkJiZhLmhhc093blByb3BlcnR5JiZhLmhhc093blByb3BlcnR5KFwiaXNPQXV0aFByb3ZpZGVyXCIpKX19fWZ1bmN0aW9uIHRvKGEsYil7cmV0dXJuIG4oYSkmJlwic3RyaW5nXCI9PT10eXBlb2YgYS50eXBlJiZhLnR5cGU9PT1iJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5GYX1mdW5jdGlvbiB1byhhKXtyZXR1cm4gbihhKSYmXCJzdHJpbmdcIj09PXR5cGVvZiBhLnVpZH1cbmZ1bmN0aW9uIHZvKCl7cmV0dXJue25hbWU6XCJhcHBsaWNhdGlvblZlcmlmaWVyXCIsSjpcImFuIGltcGxlbWVudGF0aW9uIG9mIGZpcmViYXNlLmF1dGguQXBwbGljYXRpb25WZXJpZmllclwiLG9wdGlvbmFsOiExLEs6ZnVuY3Rpb24oYSl7cmV0dXJuISghYXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhLnR5cGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhLnZlcmlmeSl9fX1mdW5jdGlvbiBYKGEsYixjLGQpe3JldHVybntuYW1lOmN8fFwiXCIsSjphLkorXCIgb3IgXCIrYi5KLG9wdGlvbmFsOiEhZCxLOmZ1bmN0aW9uKGUpe3JldHVybiBhLksoZSl8fGIuSyhlKX19fTtmdW5jdGlvbiBZKGEsYil7Zm9yKHZhciBjIGluIGIpe3ZhciBkPWJbY10ubmFtZTthW2RdPXdvKGQsYVtjXSxiW2NdLmopfX1mdW5jdGlvbiB4byhhLGIpe2Zvcih2YXIgYyBpbiBiKXt2YXIgZD1iW2NdLm5hbWU7ZCE9PWMmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGQse2dldDp0YShmdW5jdGlvbihlKXtyZXR1cm4gdGhpc1tlXX0sYyksc2V0OnRhKGZ1bmN0aW9uKGUsZixnLGgpe2lvKGUsW2ddLFtoXSwhMCk7dGhpc1tmXT1ofSxkLGMsYltjXS5nYiksZW51bWVyYWJsZTohMH0pfX1mdW5jdGlvbiBaKGEsYixjLGQpe2FbYl09d28oYixjLGQpfVxuZnVuY3Rpb24gd28oYSxiLGMpe2Z1bmN0aW9uIGQoKXt2YXIgZz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO2lvKGUsYyxnKTtyZXR1cm4gYi5hcHBseSh0aGlzLGcpfWlmKCFjKXJldHVybiBiO3ZhciBlPXlvKGEpLGY7Zm9yKGYgaW4gYilkW2ZdPWJbZl07Zm9yKGYgaW4gYi5wcm90b3R5cGUpZC5wcm90b3R5cGVbZl09Yi5wcm90b3R5cGVbZl07cmV0dXJuIGR9ZnVuY3Rpb24geW8oYSl7YT1hLnNwbGl0KFwiLlwiKTtyZXR1cm4gYVthLmxlbmd0aC0xXX07WSh1bi5wcm90b3R5cGUse2ZiOntuYW1lOlwiYXBwbHlBY3Rpb25Db2RlXCIsajpbVihcImNvZGVcIildfSxQYTp7bmFtZTpcImNoZWNrQWN0aW9uQ29kZVwiLGo6W1YoXCJjb2RlXCIpXX0samI6e25hbWU6XCJjb25maXJtUGFzc3dvcmRSZXNldFwiLGo6W1YoXCJjb2RlXCIpLFYoXCJuZXdQYXNzd29yZFwiKV19LGNjOntuYW1lOlwiY3JlYXRlVXNlcldpdGhFbWFpbEFuZFBhc3N3b3JkXCIsajpbVihcImVtYWlsXCIpLFYoXCJwYXNzd29yZFwiKV19LGZjOntuYW1lOlwiZmV0Y2hTaWduSW5NZXRob2RzRm9yRW1haWxcIixqOltWKFwiZW1haWxcIildfSxwYTp7bmFtZTpcImdldFJlZGlyZWN0UmVzdWx0XCIsajpbXX0semM6e25hbWU6XCJpc1NpZ25JbldpdGhFbWFpbExpbmtcIixqOltWKFwiZW1haWxMaW5rXCIpXX0sRmM6e25hbWU6XCJvbkF1dGhTdGF0ZUNoYW5nZWRcIixqOltYKFcoKSxsbygpLFwibmV4dE9yT2JzZXJ2ZXJcIiksbG8oXCJvcHRfZXJyb3JcIiwhMCksbG8oXCJvcHRfY29tcGxldGVkXCIsITApXX0sR2M6e25hbWU6XCJvbklkVG9rZW5DaGFuZ2VkXCIsXG5qOltYKFcoKSxsbygpLFwibmV4dE9yT2JzZXJ2ZXJcIiksbG8oXCJvcHRfZXJyb3JcIiwhMCksbG8oXCJvcHRfY29tcGxldGVkXCIsITApXX0scmI6e25hbWU6XCJzZW5kUGFzc3dvcmRSZXNldEVtYWlsXCIsajpbVihcImVtYWlsXCIpLFgoVyhcIm9wdF9hY3Rpb25Db2RlU2V0dGluZ3NcIiwhMCksbW8obnVsbCwhMCksXCJvcHRfYWN0aW9uQ29kZVNldHRpbmdzXCIsITApXX0sc2I6e25hbWU6XCJzZW5kU2lnbkluTGlua1RvRW1haWxcIixqOltWKFwiZW1haWxcIiksVyhcImFjdGlvbkNvZGVTZXR0aW5nc1wiKV19LHRiOntuYW1lOlwic2V0UGVyc2lzdGVuY2VcIixqOltWKFwicGVyc2lzdGVuY2VcIildfSxRYzp7bmFtZTpcInNpZ25JbkFuZFJldHJpZXZlRGF0YVdpdGhDcmVkZW50aWFsXCIsajpbcW8oKV19LHZiOntuYW1lOlwic2lnbkluQW5vbnltb3VzbHlcIixqOltdfSxZYTp7bmFtZTpcInNpZ25JbldpdGhDcmVkZW50aWFsXCIsajpbcW8oKV19LFJjOntuYW1lOlwic2lnbkluV2l0aEN1c3RvbVRva2VuXCIsajpbVihcInRva2VuXCIpXX0sXG5TYzp7bmFtZTpcInNpZ25JbldpdGhFbWFpbEFuZFBhc3N3b3JkXCIsajpbVihcImVtYWlsXCIpLFYoXCJwYXNzd29yZFwiKV19LFRjOntuYW1lOlwic2lnbkluV2l0aEVtYWlsTGlua1wiLGo6W1YoXCJlbWFpbFwiKSxWKFwiZW1haWxMaW5rXCIsITApXX0sVWM6e25hbWU6XCJzaWduSW5XaXRoUGhvbmVOdW1iZXJcIixqOltWKFwicGhvbmVOdW1iZXJcIiksdm8oKV19LFZjOntuYW1lOlwic2lnbkluV2l0aFBvcHVwXCIsajpbc28oKV19LFdjOntuYW1lOlwic2lnbkluV2l0aFJlZGlyZWN0XCIsajpbc28oKV19LGJkOntuYW1lOlwidXBkYXRlQ3VycmVudFVzZXJcIixqOltYKGZ1bmN0aW9uKGEpe3JldHVybntuYW1lOlwidXNlclwiLEo6XCJhbiBpbnN0YW5jZSBvZiBGaXJlYmFzZSBVc2VyXCIsb3B0aW9uYWw6ISFhLEs6ZnVuY3Rpb24oYil7cmV0dXJuISEoYiYmYiBpbnN0YW5jZW9mIFApfX19KCksbW8oKSxcInVzZXJcIildfSx3Yjp7bmFtZTpcInNpZ25PdXRcIixqOltdfSx0b0pTT046e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX0sXG5kZDp7bmFtZTpcInVzZURldmljZUxhbmd1YWdlXCIsajpbXX0sZmQ6e25hbWU6XCJ2ZXJpZnlQYXNzd29yZFJlc2V0Q29kZVwiLGo6W1YoXCJjb2RlXCIpXX19KTt4byh1bi5wcm90b3R5cGUse2xjOntuYW1lOlwibGFuZ3VhZ2VDb2RlXCIsZ2I6WChWKCksbW8oKSxcImxhbmd1YWdlQ29kZVwiKX0sdGk6e25hbWU6XCJ0ZW5hbnRJZFwiLGdiOlgoVigpLG1vKCksXCJ0ZW5hbnRJZFwiKX19KTt1bi5QZXJzaXN0ZW5jZT1Lazt1bi5QZXJzaXN0ZW5jZS5MT0NBTD1cImxvY2FsXCI7dW4uUGVyc2lzdGVuY2UuU0VTU0lPTj1cInNlc3Npb25cIjt1bi5QZXJzaXN0ZW5jZS5OT05FPVwibm9uZVwiO1xuWShQLnByb3RvdHlwZSx7XCJkZWxldGVcIjp7bmFtZTpcImRlbGV0ZVwiLGo6W119LG1jOntuYW1lOlwiZ2V0SWRUb2tlblJlc3VsdFwiLGo6W2tvKFwib3B0X2ZvcmNlUmVmcmVzaFwiLCEwKV19LEk6e25hbWU6XCJnZXRJZFRva2VuXCIsajpba28oXCJvcHRfZm9yY2VSZWZyZXNoXCIsITApXX0sQWM6e25hbWU6XCJsaW5rQW5kUmV0cmlldmVEYXRhV2l0aENyZWRlbnRpYWxcIixqOltxbygpXX0sbWI6e25hbWU6XCJsaW5rV2l0aENyZWRlbnRpYWxcIixqOltxbygpXX0sQmM6e25hbWU6XCJsaW5rV2l0aFBob25lTnVtYmVyXCIsajpbVihcInBob25lTnVtYmVyXCIpLHZvKCldfSxDYzp7bmFtZTpcImxpbmtXaXRoUG9wdXBcIixqOltzbygpXX0sRGM6e25hbWU6XCJsaW5rV2l0aFJlZGlyZWN0XCIsajpbc28oKV19LEpjOntuYW1lOlwicmVhdXRoZW50aWNhdGVBbmRSZXRyaWV2ZURhdGFXaXRoQ3JlZGVudGlhbFwiLGo6W3FvKCldfSxwYjp7bmFtZTpcInJlYXV0aGVudGljYXRlV2l0aENyZWRlbnRpYWxcIixqOltxbygpXX0sS2M6e25hbWU6XCJyZWF1dGhlbnRpY2F0ZVdpdGhQaG9uZU51bWJlclwiLFxuajpbVihcInBob25lTnVtYmVyXCIpLHZvKCldfSxMYzp7bmFtZTpcInJlYXV0aGVudGljYXRlV2l0aFBvcHVwXCIsajpbc28oKV19LE1jOntuYW1lOlwicmVhdXRoZW50aWNhdGVXaXRoUmVkaXJlY3RcIixqOltzbygpXX0scmVsb2FkOntuYW1lOlwicmVsb2FkXCIsajpbXX0scWI6e25hbWU6XCJzZW5kRW1haWxWZXJpZmljYXRpb25cIixqOltYKFcoXCJvcHRfYWN0aW9uQ29kZVNldHRpbmdzXCIsITApLG1vKG51bGwsITApLFwib3B0X2FjdGlvbkNvZGVTZXR0aW5nc1wiLCEwKV19LHRvSlNPTjp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfSxhZDp7bmFtZTpcInVubGlua1wiLGo6W1YoXCJwcm92aWRlclwiKV19LHhiOntuYW1lOlwidXBkYXRlRW1haWxcIixqOltWKFwiZW1haWxcIildfSx5Yjp7bmFtZTpcInVwZGF0ZVBhc3N3b3JkXCIsajpbVihcInBhc3N3b3JkXCIpXX0sY2Q6e25hbWU6XCJ1cGRhdGVQaG9uZU51bWJlclwiLGo6W3FvKFwicGhvbmVcIildfSx6Yjp7bmFtZTpcInVwZGF0ZVByb2ZpbGVcIixqOltXKFwicHJvZmlsZVwiKV19LFxuQWI6e25hbWU6XCJ2ZXJpZnlCZWZvcmVVcGRhdGVFbWFpbFwiLGo6W1YoXCJlbWFpbFwiKSxYKFcoXCJvcHRfYWN0aW9uQ29kZVNldHRpbmdzXCIsITApLG1vKG51bGwsITApLFwib3B0X2FjdGlvbkNvZGVTZXR0aW5nc1wiLCEwKV19fSk7WShMbi5wcm90b3R5cGUse2V4ZWN1dGU6e25hbWU6XCJleGVjdXRlXCJ9LHJlbmRlcjp7bmFtZTpcInJlbmRlclwifSxyZXNldDp7bmFtZTpcInJlc2V0XCJ9LGdldFJlc3BvbnNlOntuYW1lOlwiZ2V0UmVzcG9uc2VcIn19KTtZKEtuLnByb3RvdHlwZSx7ZXhlY3V0ZTp7bmFtZTpcImV4ZWN1dGVcIn0scmVuZGVyOntuYW1lOlwicmVuZGVyXCJ9LHJlc2V0OntuYW1lOlwicmVzZXRcIn0sZ2V0UmVzcG9uc2U6e25hbWU6XCJnZXRSZXNwb25zZVwifX0pO1koQi5wcm90b3R5cGUse21hOntuYW1lOlwiZmluYWxseVwifSxvOntuYW1lOlwiY2F0Y2hcIn0sdGhlbjp7bmFtZTpcInRoZW5cIn19KTtcbnhvKFhsLnByb3RvdHlwZSx7YXBwVmVyaWZpY2F0aW9uRGlzYWJsZWQ6e25hbWU6XCJhcHBWZXJpZmljYXRpb25EaXNhYmxlZEZvclRlc3RpbmdcIixnYjprbyhcImFwcFZlcmlmaWNhdGlvbkRpc2FibGVkRm9yVGVzdGluZ1wiKX19KTtZKFlsLnByb3RvdHlwZSx7Y29uZmlybTp7bmFtZTpcImNvbmZpcm1cIixqOltWKFwidmVyaWZpY2F0aW9uQ29kZVwiKV19fSk7Wih5ZyxcImZyb21KU09OXCIsZnVuY3Rpb24oYSl7YT1cInN0cmluZ1wiPT09dHlwZW9mIGE/SlNPTi5wYXJzZShhKTphO2Zvcih2YXIgYixjPVtKZywkZyxnaCxHZ10sZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKGI9Y1tkXShhKSlyZXR1cm4gYjtyZXR1cm4gbnVsbH0sW1goVigpLFcoKSxcImpzb25cIildKTtaKFZnLFwiY3JlZGVudGlhbFwiLGZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBVZyhhLGIpfSxbVihcImVtYWlsXCIpLFYoXCJwYXNzd29yZFwiKV0pO1koVWcucHJvdG90eXBlLHt2OntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19fSk7XG5ZKE1nLnByb3RvdHlwZSx7QWE6e25hbWU6XCJhZGRTY29wZVwiLGo6W1YoXCJzY29wZVwiKV19LElhOntuYW1lOlwic2V0Q3VzdG9tUGFyYW1ldGVyc1wiLGo6W1coXCJjdXN0b21PQXV0aFBhcmFtZXRlcnNcIildfX0pO1ooTWcsXCJjcmVkZW50aWFsXCIsTmcsW1goVigpLFcoKSxcInRva2VuXCIpXSk7WihWZyxcImNyZWRlbnRpYWxXaXRoTGlua1wiLGFoLFtWKFwiZW1haWxcIiksVihcImVtYWlsTGlua1wiKV0pO1koT2cucHJvdG90eXBlLHtBYTp7bmFtZTpcImFkZFNjb3BlXCIsajpbVihcInNjb3BlXCIpXX0sSWE6e25hbWU6XCJzZXRDdXN0b21QYXJhbWV0ZXJzXCIsajpbVyhcImN1c3RvbU9BdXRoUGFyYW1ldGVyc1wiKV19fSk7WihPZyxcImNyZWRlbnRpYWxcIixQZyxbWChWKCksVygpLFwidG9rZW5cIildKTtZKFFnLnByb3RvdHlwZSx7QWE6e25hbWU6XCJhZGRTY29wZVwiLGo6W1YoXCJzY29wZVwiKV19LElhOntuYW1lOlwic2V0Q3VzdG9tUGFyYW1ldGVyc1wiLGo6W1coXCJjdXN0b21PQXV0aFBhcmFtZXRlcnNcIildfX0pO1xuWihRZyxcImNyZWRlbnRpYWxcIixSZyxbWChWKCksWChXKCksbW8oKSksXCJpZFRva2VuXCIpLFgoVigpLG1vKCksXCJhY2Nlc3NUb2tlblwiLCEwKV0pO1koU2cucHJvdG90eXBlLHtJYTp7bmFtZTpcInNldEN1c3RvbVBhcmFtZXRlcnNcIixqOltXKFwiY3VzdG9tT0F1dGhQYXJhbWV0ZXJzXCIpXX19KTtaKFNnLFwiY3JlZGVudGlhbFwiLFRnLFtYKFYoKSxXKCksXCJ0b2tlblwiKSxWKFwic2VjcmV0XCIsITApXSk7WShNLnByb3RvdHlwZSx7QWE6e25hbWU6XCJhZGRTY29wZVwiLGo6W1YoXCJzY29wZVwiKV19LGNyZWRlbnRpYWw6e25hbWU6XCJjcmVkZW50aWFsXCIsajpbWChWKCksWChXKCksbW8oKSksXCJvcHRpb25zT3JJZFRva2VuXCIpLFgoVigpLG1vKCksXCJhY2Nlc3NUb2tlblwiLCEwKV19LElhOntuYW1lOlwic2V0Q3VzdG9tUGFyYW1ldGVyc1wiLGo6W1coXCJjdXN0b21PQXV0aFBhcmFtZXRlcnNcIildfX0pO1koSGcucHJvdG90eXBlLHt2OntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19fSk7XG5ZKEJnLnByb3RvdHlwZSx7djp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1ooaGgsXCJjcmVkZW50aWFsXCIsbGgsW1YoXCJ2ZXJpZmljYXRpb25JZFwiKSxWKFwidmVyaWZpY2F0aW9uQ29kZVwiKV0pO1xuWShoaC5wcm90b3R5cGUse2NiOntuYW1lOlwidmVyaWZ5UGhvbmVOdW1iZXJcIixqOltYKFYoKSxmdW5jdGlvbihhLGIpe3JldHVybntuYW1lOmF8fFwicGhvbmVJbmZvT3B0aW9uc1wiLEo6XCJ2YWxpZCBwaG9uZSBpbmZvIG9wdGlvbnNcIixvcHRpb25hbDohIWIsSzpmdW5jdGlvbihjKXtyZXR1cm4gYz9jLnNlc3Npb24mJmMucGhvbmVOdW1iZXI/dG8oYy5zZXNzaW9uLHdnKSYmXCJzdHJpbmdcIj09PXR5cGVvZiBjLnBob25lTnVtYmVyOmMuc2Vzc2lvbiYmYy5tdWx0aUZhY3RvckhpbnQ/dG8oYy5zZXNzaW9uLHhnKSYmdW8oYy5tdWx0aUZhY3RvckhpbnQpOmMuc2Vzc2lvbiYmYy5tdWx0aUZhY3RvclVpZD90byhjLnNlc3Npb24seGcpJiZcInN0cmluZ1wiPT09dHlwZW9mIGMubXVsdGlGYWN0b3JVaWQ6Yy5waG9uZU51bWJlcj9cInN0cmluZ1wiPT09dHlwZW9mIGMucGhvbmVOdW1iZXI6ITE6ITF9fX0oKSxcInBob25lSW5mb09wdGlvbnNcIiksdm8oKV19fSk7XG5ZKGNoLnByb3RvdHlwZSx7djp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1kodC5wcm90b3R5cGUse3RvSlNPTjp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1kodWgucHJvdG90eXBlLHt0b0pTT046e25hbWU6XCJ0b0pTT05cIixqOltWKG51bGwsITApXX19KTtZKHRoLnByb3RvdHlwZSx7dG9KU09OOntuYW1lOlwidG9KU09OXCIsajpbVihudWxsLCEwKV19fSk7WShkbS5wcm90b3R5cGUse3RvSlNPTjp7bmFtZTpcInRvSlNPTlwiLGo6W1YobnVsbCwhMCldfX0pO1koYW0ucHJvdG90eXBlLHtQYzp7bmFtZTpcInJlc29sdmVTaWduSW5cIixqOltybygpXX19KTtcblkobG0ucHJvdG90eXBlLHtPYjp7bmFtZTpcImdldFNlc3Npb25cIixqOltdfSxkYzp7bmFtZTpcImVucm9sbFwiLGo6W3JvKCksVihcImRpc3BsYXlOYW1lXCIsITApXX0sJGM6e25hbWU6XCJ1bmVucm9sbFwiLGo6W1goe25hbWU6XCJtdWx0aUZhY3RvckluZm9cIixKOlwiYSB2YWxpZCBtdWx0aUZhY3RvckluZm9cIixvcHRpb25hbDohMSxLOnVvfSxWKCksXCJtdWx0aUZhY3RvckluZm9JZGVudGlmaWVyXCIpXX19KTtZKGhvLnByb3RvdHlwZSx7Y2xlYXI6e25hbWU6XCJjbGVhclwiLGo6W119LHJlbmRlcjp7bmFtZTpcInJlbmRlclwiLGo6W119LHZlcmlmeTp7bmFtZTpcInZlcmlmeVwiLGo6W119fSk7WihHZixcInBhcnNlTGlua1wiLE9mLFtWKFwibGlua1wiKV0pO1ooUm4sXCJhc3NlcnRpb25cIixmdW5jdGlvbihhKXtyZXR1cm4gbmV3IGptKGEpfSxbcW8oXCJwaG9uZVwiKV0pO1xuKGZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBmaXJlYmFzZSYmZmlyZWJhc2UuSU5URVJOQUwmJmZpcmViYXNlLklOVEVSTkFMLnJlZ2lzdGVyQ29tcG9uZW50KXt2YXIgYT17QWN0aW9uQ29kZUluZm86e09wZXJhdGlvbjp7RU1BSUxfU0lHTklOOnhmLFBBU1NXT1JEX1JFU0VUOlwiUEFTU1dPUkRfUkVTRVRcIixSRUNPVkVSX0VNQUlMOlwiUkVDT1ZFUl9FTUFJTFwiLFJFVkVSVF9TRUNPTkRfRkFDVE9SX0FERElUSU9OOnpmLFZFUklGWV9BTkRfQ0hBTkdFX0VNQUlMOnlmLFZFUklGWV9FTUFJTDpcIlZFUklGWV9FTUFJTFwifX0sQXV0aDp1bixBdXRoQ3JlZGVudGlhbDp5ZyxFcnJvcjp0fTtaKGEsXCJFbWFpbEF1dGhQcm92aWRlclwiLFZnLFtdKTtaKGEsXCJGYWNlYm9va0F1dGhQcm92aWRlclwiLE1nLFtdKTtaKGEsXCJHaXRodWJBdXRoUHJvdmlkZXJcIixPZyxbXSk7WihhLFwiR29vZ2xlQXV0aFByb3ZpZGVyXCIsUWcsW10pO1ooYSxcIlR3aXR0ZXJBdXRoUHJvdmlkZXJcIixTZyxbXSk7XG5aKGEsXCJPQXV0aFByb3ZpZGVyXCIsTSxbVihcInByb3ZpZGVySWRcIildKTtaKGEsXCJTQU1MQXV0aFByb3ZpZGVyXCIsTGcsW1YoXCJwcm92aWRlcklkXCIpXSk7WihhLFwiUGhvbmVBdXRoUHJvdmlkZXJcIixoaCxbb28oKV0pO1ooYSxcIlJlY2FwdGNoYVZlcmlmaWVyXCIsaG8sW1goVigpLG5vKCksXCJyZWNhcHRjaGFDb250YWluZXJcIiksVyhcInJlY2FwdGNoYVBhcmFtZXRlcnNcIiwhMCkscG8oKV0pO1ooYSxcIkFjdGlvbkNvZGVVUkxcIixHZixbXSk7WihhLFwiUGhvbmVNdWx0aUZhY3RvckdlbmVyYXRvclwiLFJuLFtdKTtmaXJlYmFzZS5JTlRFUk5BTC5yZWdpc3RlckNvbXBvbmVudCh7bmFtZTpcImF1dGhcIixpbnN0YW5jZUZhY3Rvcnk6ZnVuY3Rpb24oYil7Yj1iLmdldFByb3ZpZGVyKFwiYXBwXCIpLmdldEltbWVkaWF0ZSgpO3JldHVybiBuZXcgdW4oYil9LG11bHRpcGxlSW5zdGFuY2VzOiExLHNlcnZpY2VQcm9wczphLGluc3RhbnRpYXRpb25Nb2RlOlwiTEFaWVwiLHR5cGU6XCJQVUJMSUNcIn0pO2ZpcmViYXNlLklOVEVSTkFMLnJlZ2lzdGVyQ29tcG9uZW50KHtuYW1lOlwiYXV0aC1pbnRlcm5hbFwiLFxuaW5zdGFuY2VGYWN0b3J5OmZ1bmN0aW9uKGIpe2I9Yi5nZXRQcm92aWRlcihcImF1dGhcIikuZ2V0SW1tZWRpYXRlKCk7cmV0dXJue2dldFVpZDpxKGIuZ2V0VWlkLGIpLGdldFRva2VuOnEoYi5rYyxiKSxhZGRBdXRoVG9rZW5MaXN0ZW5lcjpxKGIuYmMsYikscmVtb3ZlQXV0aFRva2VuTGlzdGVuZXI6cShiLk5jLGIpfX0sbXVsdGlwbGVJbnN0YW5jZXM6ITEsaW5zdGFudGlhdGlvbk1vZGU6XCJMQVpZXCIsdHlwZTpcIlBSSVZBVEVcIn0pO2ZpcmViYXNlLnJlZ2lzdGVyVmVyc2lvbihcIkBmaXJlYmFzZS9hdXRoXCIsXCIwLjE0LjlcIik7ZmlyZWJhc2UuSU5URVJOQUwuZXh0ZW5kTmFtZXNwYWNlKHtVc2VyOlB9KX1lbHNlIHRocm93IEVycm9yKFwiQ2Fubm90IGZpbmQgdGhlIGZpcmViYXNlIG5hbWVzcGFjZTsgYmUgc3VyZSB0byBpbmNsdWRlIGZpcmViYXNlLWFwcC5qcyBiZWZvcmUgdGhpcyBsaWJyYXJ5LlwiKTt9KSgpO30pLmFwcGx5KHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge30pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRoLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL21haW4uc2Nzcz81MjI0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n")}]);